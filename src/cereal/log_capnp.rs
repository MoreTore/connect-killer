// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: log.capnp

pub const LOG_VERSION: i32 = 1;

pub mod map { /* Key,Value */
  #[derive(Copy, Clone)]
  pub struct Owned<Key,Value> {
    _phantom: ::core::marker::PhantomData<(Key,Value)>
  }
  impl <Key,Value> ::capnp::introspect::Introspect for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value> }).into() } }
  impl <Key,Value> ::capnp::traits::Owned for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, Key,Value>; type Builder<'a> = Builder<'a, Key,Value>; }
  impl <Key,Value> ::capnp::traits::OwnedStruct for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, Key,Value>; type Builder<'a> = Builder<'a, Key,Value>; }
  impl <Key,Value> ::capnp::traits::Pipelined for Owned<Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Pipeline = Pipeline<Key,Value>; }

  pub struct Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    reader: ::capnp::private::layout::StructReader<'a>,
    _phantom: ::core::marker::PhantomData<(Key,Value)>
  }
  impl <'a,Key,Value> ::core::marker::Copy for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {}
  impl <'a,Key,Value> ::core::clone::Clone for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,Key,Value> ::capnp::traits::HasTypeId for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,Key,Value> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,Key,Value> ::core::convert::From<Reader<'a,Key,Value>> for ::capnp::dynamic_value::Reader<'a> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn from(reader: Reader<'a,Key,Value>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value>})))
    }
  }

  impl <'a,Key,Value> ::core::fmt::Debug for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,Key,Value> ::capnp::traits::FromPointerReader<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,Key,Value> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,Key,Value> ::capnp::traits::Imbue<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,Key,Value> Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    pub fn reborrow(&self) -> Reader<'_,Key,Value> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_entries(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::map::entry::Owned<Key,Value>>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_entries(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    builder: ::capnp::private::layout::StructBuilder<'a>,
    _phantom: ::core::marker::PhantomData<(Key,Value)>
  }
  impl <'a,Key,Value> ::capnp::traits::HasStructSize for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 1 };
  }
  impl <'a,Key,Value> ::capnp::traits::HasTypeId for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,Key,Value> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,Key,Value> ::core::convert::From<Builder<'a,Key,Value>> for ::capnp::dynamic_value::Builder<'a> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn from(builder: Builder<'a,Key,Value>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value>})))
    }
  }

  impl <'a,Key,Value> ::capnp::traits::ImbueMut<'a> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,Key,Value> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,Key,Value> ::capnp::traits::SetterInput<Owned<Key,Value>> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,Key,Value> Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    pub fn into_reader(self) -> Reader<'a,Key,Value> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,Key,Value> {
      Builder { builder: self.builder.reborrow(), ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,Key,Value> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_entries(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::map::entry::Owned<Key,Value>>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_entries(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::map::entry::Owned<Key,Value>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_entries(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::map::entry::Owned<Key,Value>> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_entries(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline<Key,Value> {
    _typeless: ::capnp::any_pointer::Pipeline,
    _phantom: ::core::marker::PhantomData<(Key,Value)>
  }
  impl<Key,Value> ::capnp::capability::FromTypelessPipeline for Pipeline<Key,Value> {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless, _phantom: ::core::marker::PhantomData, }
    }
  }
  impl<Key,Value> Pipeline<Key,Value> where Key: ::capnp::traits::Pipelined, <Key as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline, Value: ::capnp::traits::Pipelined, <Value as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 48] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 63, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 77, 97, 112, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(14, 234, 110, 74, 8, 221, 223, 165),
      ::capnp::word(1, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(69, 110, 116, 114, 121, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(101, 110, 116, 114, 105, 101, 115, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 234, 110, 74, 8, 221, 223, 165),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(75, 101, 121, 0, 0, 0, 0, 0),
      ::capnp::word(86, 97, 108, 117, 101, 0, 0, 0),
    ];
    pub fn get_field_types<Key,Value>(index: u16) -> ::capnp::introspect::Type where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      match index {
        0 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::map::entry::Owned<Key,Value>> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types<Key,Value>(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0];
    pub const TYPE_ID: u64 = 0xf8b1_3ce2_183e_b696;
  }

  pub mod entry { /* Key,Value */
    #[derive(Copy, Clone)]
    pub struct Owned<Key,Value> {
      _phantom: ::core::marker::PhantomData<(Key,Value)>
    }
    impl <Key,Value> ::capnp::introspect::Introspect for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value> }).into() } }
    impl <Key,Value> ::capnp::traits::Owned for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, Key,Value>; type Builder<'a> = Builder<'a, Key,Value>; }
    impl <Key,Value> ::capnp::traits::OwnedStruct for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, Key,Value>; type Builder<'a> = Builder<'a, Key,Value>; }
    impl <Key,Value> ::capnp::traits::Pipelined for Owned<Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Pipeline = Pipeline<Key,Value>; }

    pub struct Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      reader: ::capnp::private::layout::StructReader<'a>,
      _phantom: ::core::marker::PhantomData<(Key,Value)>
    }
    impl <'a,Key,Value> ::core::marker::Copy for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {}
    impl <'a,Key,Value> ::core::clone::Clone for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,Key,Value> ::capnp::traits::HasTypeId for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,Key,Value> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader, _phantom: ::core::marker::PhantomData, }
      }
    }

    impl <'a,Key,Value> ::core::convert::From<Reader<'a,Key,Value>> for ::capnp::dynamic_value::Reader<'a> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn from(reader: Reader<'a,Key,Value>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value>})))
      }
    }

    impl <'a,Key,Value> ::core::fmt::Debug for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,Key,Value> ::capnp::traits::FromPointerReader<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,Key,Value> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,Key,Value> ::capnp::traits::Imbue<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,Key,Value> Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      pub fn reborrow(&self) -> Reader<'_,Key,Value> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<<Key as ::capnp::traits::Owned>::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_key(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<<Value as ::capnp::traits::Owned>::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_value(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      builder: ::capnp::private::layout::StructBuilder<'a>,
      _phantom: ::core::marker::PhantomData<(Key,Value)>
    }
    impl <'a,Key,Value> ::capnp::traits::HasStructSize for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 2 };
    }
    impl <'a,Key,Value> ::capnp::traits::HasTypeId for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,Key,Value> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder, _phantom: ::core::marker::PhantomData, }
      }
    }

    impl <'a,Key,Value> ::core::convert::From<Builder<'a,Key,Value>> for ::capnp::dynamic_value::Builder<'a> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn from(builder: Builder<'a,Key,Value>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value>})))
      }
    }

    impl <'a,Key,Value> ::capnp::traits::ImbueMut<'a> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,Key,Value> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,Key,Value> ::capnp::traits::SetterInput<Owned<Key,Value>> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,Key,Value> Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      pub fn into_reader(self) -> Reader<'a,Key,Value> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,Key,Value> {
        Builder { builder: self.builder.reborrow(), ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,Key,Value> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<<Key as ::capnp::traits::Owned>::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn initn_key(self, length: u32) -> <Key as ::capnp::traits::Owned>::Builder<'a> {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).initn_as(length)
      }
      #[inline]
      pub fn set_key(&mut self, value: impl ::capnp::traits::SetterInput<Key>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_key(self, ) -> <Key as ::capnp::traits::Owned>::Builder<'a> {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).init_as()
      }
      #[inline]
      pub fn has_key(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<<Value as ::capnp::traits::Owned>::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn initn_value(self, length: u32) -> <Value as ::capnp::traits::Owned>::Builder<'a> {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).initn_as(length)
      }
      #[inline]
      pub fn set_value(&mut self, value: impl ::capnp::traits::SetterInput<Value>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_value(self, ) -> <Value as ::capnp::traits::Owned>::Builder<'a> {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).init_as()
      }
      #[inline]
      pub fn has_value(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    pub struct Pipeline<Key,Value> {
      _typeless: ::capnp::any_pointer::Pipeline,
      _phantom: ::core::marker::PhantomData<(Key,Value)>
    }
    impl<Key,Value> ::capnp::capability::FromTypelessPipeline for Pipeline<Key,Value> {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless, _phantom: ::core::marker::PhantomData, }
      }
    }
    impl<Key,Value> Pipeline<Key,Value> where Key: ::capnp::traits::Pipelined, <Key as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline, Value: ::capnp::traits::Pipelined, <Value as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline  {
      pub fn get_key(&self) -> <Key as ::capnp::traits::Pipelined>::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
      }
      pub fn get_value(&self) -> <Value as ::capnp::traits::Pipelined>::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 47] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(14, 234, 110, 74, 8, 221, 223, 165),
        ::capnp::word(14, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 97, 112, 46, 69, 110),
        ::capnp::word(116, 114, 121, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(107, 101, 121, 0, 0, 0, 0, 0),
        ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 97, 108, 117, 101, 0, 0, 0),
        ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types<Key,Value>(index: u16) -> ::capnp::introspect::Type where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
        match index {
          0 => <Key as ::capnp::introspect::Introspect>::introspect(),
          1 => <Value as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types<Key,Value>(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
      pub const TYPE_ID: u64 = 0xa5df_dd08_4a6e_ea0e;
    }
  }
}

#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum LongitudinalPersonality {
  Aggressive = 0,
  Standard = 1,
  Relaxed = 2,
}

impl ::capnp::introspect::Introspect for LongitudinalPersonality {
  fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &longitudinal_personality::ENCODED_NODE, annotation_types: longitudinal_personality::get_annotation_types }).into() }
}
impl <'a> ::core::convert::From<LongitudinalPersonality> for ::capnp::dynamic_value::Reader<'a> {
  fn from(e: LongitudinalPersonality) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &longitudinal_personality::ENCODED_NODE, annotation_types: longitudinal_personality::get_annotation_types }.into()).into() }
}
impl ::core::convert::TryFrom<u16> for LongitudinalPersonality {
  type Error = ::capnp::NotInSchema;
  fn try_from(value: u16) -> ::core::result::Result<Self, <LongitudinalPersonality as ::core::convert::TryFrom<u16>>::Error> {
    match value {
      0 => ::core::result::Result::Ok(Self::Aggressive),
      1 => ::core::result::Result::Ok(Self::Standard),
      2 => ::core::result::Result::Ok(Self::Relaxed),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl From<LongitudinalPersonality> for u16 {
  #[inline]
  fn from(x: LongitudinalPersonality) -> u16 { x as u16 }
}
impl ::capnp::traits::HasTypeId for LongitudinalPersonality {
  const TYPE_ID: u64 = 0xd692_e23d_1a24_7d99u64;
}
mod longitudinal_personality {
pub static ENCODED_NODE: [::capnp::Word; 33] = [
  ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
  ::capnp::word(153, 125, 36, 26, 61, 226, 146, 214),
  ::capnp::word(10, 0, 0, 0, 2, 0, 0, 0),
  ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
  ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(33, 0, 0, 0, 79, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
  ::capnp::word(112, 58, 76, 111, 110, 103, 105, 116),
  ::capnp::word(117, 100, 105, 110, 97, 108, 80, 101),
  ::capnp::word(114, 115, 111, 110, 97, 108, 105, 116),
  ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
  ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 90, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(25, 0, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 0, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(97, 103, 103, 114, 101, 115, 115, 105),
  ::capnp::word(118, 101, 0, 0, 0, 0, 0, 0),
  ::capnp::word(115, 116, 97, 110, 100, 97, 114, 100),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(114, 101, 108, 97, 120, 101, 100, 0),
];
pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
  panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
}
}

pub mod init_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_kernel_args(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_kernel_args(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_gctx_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_gctx_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_dongle_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_dongle_id(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_device_type(self) -> ::core::result::Result<crate::cereal::log_capnp::init_data::DeviceType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_version(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_version(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_android_build_info(self) -> ::capnp::Result<crate::cereal::log_capnp::init_data::android_build_info::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_android_build_info(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_android_sensors_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::init_data::android_sensor::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_android_sensors_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_chffr_android_extra_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::init_data::chffr_android_extra::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_chffr_android_extra_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_panda_info(self) -> ::capnp::Result<crate::cereal::log_capnp::init_data::panda_info::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_panda_info(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_dirty(self) -> bool {
      self.reader.get_bool_field(16)
    }
    #[inline]
    pub fn get_git_commit(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_git_commit(&self) -> bool {
      !self.reader.get_pointer_field(8).is_null()
    }
    #[inline]
    pub fn get_git_branch(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_git_branch(&self) -> bool {
      !self.reader.get_pointer_field(9).is_null()
    }
    #[inline]
    pub fn get_passive(self) -> bool {
      self.reader.get_bool_field(17)
    }
    #[inline]
    pub fn get_git_remote(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_git_remote(&self) -> bool {
      !self.reader.get_pointer_field(10).is_null()
    }
    #[inline]
    pub fn get_ios_build_info_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::init_data::ios_build_info::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(11), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_ios_build_info_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(11).is_null()
    }
    #[inline]
    pub fn get_kernel_version(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(12), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_kernel_version(&self) -> bool {
      !self.reader.get_pointer_field(12).is_null()
    }
    #[inline]
    pub fn get_android_properties(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Reader<'a,::capnp::text::Owned,::capnp::text::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(13), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_android_properties(&self) -> bool {
      !self.reader.get_pointer_field(13).is_null()
    }
    #[inline]
    pub fn get_params(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Reader<'a,::capnp::text::Owned,::capnp::data::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(14), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_params(&self) -> bool {
      !self.reader.get_pointer_field(14).is_null()
    }
    #[inline]
    pub fn get_os_version(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(15), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_os_version(&self) -> bool {
      !self.reader.get_pointer_field(15).is_null()
    }
    #[inline]
    pub fn get_commands(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Reader<'a,::capnp::text::Owned,::capnp::data::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(16), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_commands(&self) -> bool {
      !self.reader.get_pointer_field(16).is_null()
    }
    #[inline]
    pub fn get_wall_time_nanos(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_git_commit_date(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(17), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_git_commit_date(&self) -> bool {
      !self.reader.get_pointer_field(17).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 18 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_kernel_args(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_kernel_args(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text_list::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_kernel_args(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_kernel_args(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_gctx_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_gctx_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
    }
    #[inline]
    pub fn init_gctx_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    #[inline]
    pub fn has_gctx_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_dongle_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_dongle_id(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
    }
    #[inline]
    pub fn init_dongle_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    #[inline]
    pub fn has_dongle_id(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_device_type(self) -> ::core::result::Result<crate::cereal::log_capnp::init_data::DeviceType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_device_type(&mut self, value: crate::cereal::log_capnp::init_data::DeviceType)  {
      self.builder.set_data_field::<u16>(0, value as u16);
    }
    #[inline]
    pub fn get_version(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_version(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false).unwrap()
    }
    #[inline]
    pub fn init_version(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(3).init_text(size)
    }
    #[inline]
    pub fn has_version(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_android_build_info(self) -> ::capnp::Result<crate::cereal::log_capnp::init_data::android_build_info::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_android_build_info(&mut self, value: crate::cereal::log_capnp::init_data::android_build_info::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_android_build_info(self, ) -> crate::cereal::log_capnp::init_data::android_build_info::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), 0)
    }
    #[inline]
    pub fn has_android_build_info(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_android_sensors_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::init_data::android_sensor::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_android_sensors_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::init_data::android_sensor::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_android_sensors_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::init_data::android_sensor::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_android_sensors_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_chffr_android_extra_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::init_data::chffr_android_extra::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_chffr_android_extra_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::init_data::chffr_android_extra::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_chffr_android_extra_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::init_data::chffr_android_extra::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), 0)
    }
    #[inline]
    pub fn has_chffr_android_extra_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_panda_info(self) -> ::capnp::Result<crate::cereal::log_capnp::init_data::panda_info::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_panda_info(&mut self, value: crate::cereal::log_capnp::init_data::panda_info::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_panda_info(self, ) -> crate::cereal::log_capnp::init_data::panda_info::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), 0)
    }
    #[inline]
    pub fn has_panda_info(&self) -> bool {
      !self.builder.is_pointer_field_null(7)
    }
    #[inline]
    pub fn get_dirty(self) -> bool {
      self.builder.get_bool_field(16)
    }
    #[inline]
    pub fn set_dirty(&mut self, value: bool)  {
      self.builder.set_bool_field(16, value);
    }
    #[inline]
    pub fn get_git_commit(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_git_commit(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(8), value, false).unwrap()
    }
    #[inline]
    pub fn init_git_commit(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(8).init_text(size)
    }
    #[inline]
    pub fn has_git_commit(&self) -> bool {
      !self.builder.is_pointer_field_null(8)
    }
    #[inline]
    pub fn get_git_branch(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_git_branch(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false).unwrap()
    }
    #[inline]
    pub fn init_git_branch(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(9).init_text(size)
    }
    #[inline]
    pub fn has_git_branch(&self) -> bool {
      !self.builder.is_pointer_field_null(9)
    }
    #[inline]
    pub fn get_passive(self) -> bool {
      self.builder.get_bool_field(17)
    }
    #[inline]
    pub fn set_passive(&mut self, value: bool)  {
      self.builder.set_bool_field(17, value);
    }
    #[inline]
    pub fn get_git_remote(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_git_remote(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(10), value, false).unwrap()
    }
    #[inline]
    pub fn init_git_remote(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(10).init_text(size)
    }
    #[inline]
    pub fn has_git_remote(&self) -> bool {
      !self.builder.is_pointer_field_null(10)
    }
    #[inline]
    pub fn get_ios_build_info_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::init_data::ios_build_info::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(11), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_ios_build_info_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::init_data::ios_build_info::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(11), value, false)
    }
    #[inline]
    pub fn init_ios_build_info_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::init_data::ios_build_info::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(11), 0)
    }
    #[inline]
    pub fn has_ios_build_info_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(11)
    }
    #[inline]
    pub fn get_kernel_version(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(12), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_kernel_version(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(12), value, false).unwrap()
    }
    #[inline]
    pub fn init_kernel_version(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(12).init_text(size)
    }
    #[inline]
    pub fn has_kernel_version(&self) -> bool {
      !self.builder.is_pointer_field_null(12)
    }
    #[inline]
    pub fn get_android_properties(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::text::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(13), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_android_properties(&mut self, value: crate::cereal::log_capnp::map::Reader<'_,::capnp::text::Owned,::capnp::text::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(13), value, false)
    }
    #[inline]
    pub fn init_android_properties(self, ) -> crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::text::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(13), 0)
    }
    #[inline]
    pub fn has_android_properties(&self) -> bool {
      !self.builder.is_pointer_field_null(13)
    }
    #[inline]
    pub fn get_params(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::data::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(14), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_params(&mut self, value: crate::cereal::log_capnp::map::Reader<'_,::capnp::text::Owned,::capnp::data::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(14), value, false)
    }
    #[inline]
    pub fn init_params(self, ) -> crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::data::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(14), 0)
    }
    #[inline]
    pub fn has_params(&self) -> bool {
      !self.builder.is_pointer_field_null(14)
    }
    #[inline]
    pub fn get_os_version(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(15), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_os_version(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(15), value, false).unwrap()
    }
    #[inline]
    pub fn init_os_version(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(15).init_text(size)
    }
    #[inline]
    pub fn has_os_version(&self) -> bool {
      !self.builder.is_pointer_field_null(15)
    }
    #[inline]
    pub fn get_commands(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::data::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(16), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_commands(&mut self, value: crate::cereal::log_capnp::map::Reader<'_,::capnp::text::Owned,::capnp::data::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(16), value, false)
    }
    #[inline]
    pub fn init_commands(self, ) -> crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::data::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(16), 0)
    }
    #[inline]
    pub fn has_commands(&self) -> bool {
      !self.builder.is_pointer_field_null(16)
    }
    #[inline]
    pub fn get_wall_time_nanos(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_wall_time_nanos(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_git_commit_date(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(17), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_git_commit_date(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(17), value, false).unwrap()
    }
    #[inline]
    pub fn init_git_commit_date(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(17).init_text(size)
    }
    #[inline]
    pub fn has_git_commit_date(&self) -> bool {
      !self.builder.is_pointer_field_null(17)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_android_build_info(&self) -> crate::cereal::log_capnp::init_data::android_build_info::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(4))
    }
    pub fn get_chffr_android_extra_d_e_p_r_e_c_a_t_e_d(&self) -> crate::cereal::log_capnp::init_data::chffr_android_extra::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(6))
    }
    pub fn get_panda_info(&self) -> crate::cereal::log_capnp::init_data::panda_info::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(7))
    }
    pub fn get_ios_build_info_d_e_p_r_e_c_a_t_e_d(&self) -> crate::cereal::log_capnp::init_data::ios_build_info::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(11))
    }
    pub fn get_android_properties(&self) -> crate::cereal::log_capnp::map::Pipeline<::capnp::text::Owned,::capnp::text::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(13))
    }
    pub fn get_params(&self) -> crate::cereal::log_capnp::map::Pipeline<::capnp::text::Owned,::capnp::data::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(14))
    }
    pub fn get_commands(&self) -> crate::cereal::log_capnp::map::Pipeline<::capnp::text::Owned,::capnp::data::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(16))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 460] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(92, 182, 63, 235, 202, 8, 16, 231),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(18, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 103, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 0, 0, 0, 215, 4, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 73, 110, 105, 116, 68, 97),
      ::capnp::word(116, 97, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(8, 102, 168, 235, 56, 114, 93, 157),
      ::capnp::word(41, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(173, 240, 223, 92, 114, 232, 115, 230),
      ::capnp::word(41, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(108, 66, 31, 194, 213, 25, 41, 254),
      ::capnp::word(41, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(205, 219, 135, 168, 147, 59, 81, 155),
      ::capnp::word(45, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(165, 21, 246, 164, 83, 93, 251, 156),
      ::capnp::word(45, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(128, 85, 159, 35, 40, 59, 126, 217),
      ::capnp::word(49, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(68, 101, 118, 105, 99, 101, 84, 121),
      ::capnp::word(112, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 97, 110, 100, 97, 73, 110, 102),
      ::capnp::word(111, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 110, 100, 114, 111, 105, 100, 66),
      ::capnp::word(117, 105, 108, 100, 73, 110, 102, 111),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 110, 100, 114, 111, 105, 100, 83),
      ::capnp::word(101, 110, 115, 111, 114, 0, 0, 0),
      ::capnp::word(67, 104, 102, 102, 114, 65, 110, 100),
      ::capnp::word(114, 111, 105, 100, 69, 120, 116, 114),
      ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 111, 115, 66, 117, 105, 108, 100),
      ::capnp::word(73, 110, 102, 111, 0, 0, 0, 0),
      ::capnp::word(88, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 2, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 2, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(124, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 2, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 2, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 2, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 2, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 2, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 2, 0, 0, 226, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 2, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 2, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 2, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 2, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 3, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 3, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 3, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 3, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 3, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 4, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(107, 101, 114, 110, 101, 108, 65, 114),
      ::capnp::word(103, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 99, 116, 120, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 111, 110, 103, 108, 101, 73, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 118, 105, 99, 101, 84, 121),
      ::capnp::word(112, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 102, 168, 235, 56, 114, 93, 157),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 101, 114, 115, 105, 111, 110, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 100, 114, 111, 105, 100, 66),
      ::capnp::word(117, 105, 108, 100, 73, 110, 102, 111),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 66, 31, 194, 213, 25, 41, 254),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 100, 114, 111, 105, 100, 83),
      ::capnp::word(101, 110, 115, 111, 114, 115, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 219, 135, 168, 147, 59, 81, 155),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 104, 102, 102, 114, 65, 110, 100),
      ::capnp::word(114, 111, 105, 100, 69, 120, 116, 114),
      ::capnp::word(97, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 21, 246, 164, 83, 93, 251, 156),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 110, 100, 97, 73, 110, 102),
      ::capnp::word(111, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 240, 223, 92, 114, 232, 115, 230),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 105, 114, 116, 121, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 105, 116, 67, 111, 109, 109, 105),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 105, 116, 66, 114, 97, 110, 99),
      ::capnp::word(104, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 115, 115, 105, 118, 101, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 105, 116, 82, 101, 109, 111, 116),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 111, 115, 66, 117, 105, 108, 100),
      ::capnp::word(73, 110, 102, 111, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 85, 159, 35, 40, 59, 126, 217),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(107, 101, 114, 110, 101, 108, 86, 101),
      ::capnp::word(114, 115, 105, 111, 110, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 100, 114, 111, 105, 100, 80),
      ::capnp::word(114, 111, 112, 101, 114, 116, 105, 101),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 39, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 114, 97, 109, 115, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 39, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 115, 86, 101, 114, 115, 105, 111),
      ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 109, 109, 97, 110, 100, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 39, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 97, 108, 108, 84, 105, 109, 101),
      ::capnp::word(78, 97, 110, 111, 115, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 105, 116, 67, 111, 109, 109, 105),
      ::capnp::word(116, 68, 97, 116, 101, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::text_list::Owned as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        3 => <crate::cereal::log_capnp::init_data::DeviceType as ::capnp::introspect::Introspect>::introspect(),
        4 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <crate::cereal::log_capnp::init_data::android_build_info::Owned as ::capnp::introspect::Introspect>::introspect(),
        6 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::init_data::android_sensor::Owned> as ::capnp::introspect::Introspect>::introspect(),
        7 => <crate::cereal::log_capnp::init_data::chffr_android_extra::Owned as ::capnp::introspect::Introspect>::introspect(),
        8 => <crate::cereal::log_capnp::init_data::panda_info::Owned as ::capnp::introspect::Introspect>::introspect(),
        9 => <bool as ::capnp::introspect::Introspect>::introspect(),
        10 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        11 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        12 => <bool as ::capnp::introspect::Introspect>::introspect(),
        13 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        14 => <crate::cereal::log_capnp::init_data::ios_build_info::Owned as ::capnp::introspect::Introspect>::introspect(),
        15 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        16 => <crate::cereal::log_capnp::map::Owned<::capnp::text::Owned,::capnp::text::Owned> as ::capnp::introspect::Introspect>::introspect(),
        17 => <crate::cereal::log_capnp::map::Owned<::capnp::text::Owned,::capnp::data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        18 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        19 => <crate::cereal::log_capnp::map::Owned<::capnp::text::Owned,::capnp::data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        20 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        21 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[5,16,6,7,19,3,9,2,1,11,10,21,13,14,0,15,18,8,17,12,4,20];
    pub const TYPE_ID: u64 = 0xe710_08ca_eb3f_b65c;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum DeviceType {
    Unknown = 0,
    Neo = 1,
    ChffrAndroid = 2,
    ChffrIos = 3,
    Tici = 4,
    Pc = 5,
    Tizi = 6,
    Mici = 7,
  }

  impl ::capnp::introspect::Introspect for DeviceType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &device_type::ENCODED_NODE, annotation_types: device_type::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<DeviceType> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: DeviceType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &device_type::ENCODED_NODE, annotation_types: device_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for DeviceType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <DeviceType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Unknown),
        1 => ::core::result::Result::Ok(Self::Neo),
        2 => ::core::result::Result::Ok(Self::ChffrAndroid),
        3 => ::core::result::Result::Ok(Self::ChffrIos),
        4 => ::core::result::Result::Ok(Self::Tici),
        5 => ::core::result::Result::Ok(Self::Pc),
        6 => ::core::result::Result::Ok(Self::Tizi),
        7 => ::core::result::Result::Ok(Self::Mici),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<DeviceType> for u16 {
    #[inline]
    fn from(x: DeviceType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for DeviceType {
    const TYPE_ID: u64 = 0x9d5d_7238_eba8_6608u64;
  }
  mod device_type {
  pub static ENCODED_NODE: [::capnp::Word; 52] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(8, 102, 168, 235, 56, 114, 93, 157),
    ::capnp::word(19, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(92, 182, 63, 235, 202, 8, 16, 231),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 199, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 73, 110, 105, 116, 68, 97),
    ::capnp::word(116, 97, 46, 68, 101, 118, 105, 99),
    ::capnp::word(101, 84, 121, 112, 101, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(32, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 0, 0, 0, 26, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
    ::capnp::word(110, 101, 111, 0, 0, 0, 0, 0),
    ::capnp::word(99, 104, 102, 102, 114, 65, 110, 100),
    ::capnp::word(114, 111, 105, 100, 0, 0, 0, 0),
    ::capnp::word(99, 104, 102, 102, 114, 73, 111, 115),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 105, 99, 105, 0, 0, 0, 0),
    ::capnp::word(112, 99, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 105, 122, 105, 0, 0, 0, 0),
    ::capnp::word(109, 105, 99, 105, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod panda_info {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_has_panda(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_dongle_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_dongle_id(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_st_version(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_st_version(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_esp_version(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_esp_version(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 3 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_has_panda(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_has_panda(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_dongle_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_dongle_id(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
      }
      #[inline]
      pub fn init_dongle_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_dongle_id(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_st_version(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_st_version(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
      }
      #[inline]
      pub fn init_st_version(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      #[inline]
      pub fn has_st_version(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_esp_version(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_esp_version(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
      }
      #[inline]
      pub fn init_esp_version(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      #[inline]
      pub fn has_esp_version(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 82] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(173, 240, 223, 92, 114, 232, 115, 230),
        ::capnp::word(19, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(92, 182, 63, 235, 202, 8, 16, 231),
        ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 234, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 231, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 73, 110, 105, 116, 68, 97),
        ::capnp::word(116, 97, 46, 80, 97, 110, 100, 97),
        ::capnp::word(73, 110, 102, 111, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(113, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(124, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 0, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(104, 97, 115, 80, 97, 110, 100, 97),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 111, 110, 103, 108, 101, 73, 100),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 86, 101, 114, 115, 105, 111),
        ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 115, 112, 86, 101, 114, 115, 105),
        ::capnp::word(111, 110, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,3,0,2];
      pub const TYPE_ID: u64 = 0xe673_e872_5cdf_f0ad;
    }
  }

  pub mod android_build_info {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_board(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_board(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_bootloader(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_bootloader(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_brand(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_brand(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_device(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_device(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_display(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_display(&self) -> bool {
        !self.reader.get_pointer_field(4).is_null()
      }
      #[inline]
      pub fn get_fingerprint(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_fingerprint(&self) -> bool {
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn get_hardware(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_hardware(&self) -> bool {
        !self.reader.get_pointer_field(6).is_null()
      }
      #[inline]
      pub fn get_host(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_host(&self) -> bool {
        !self.reader.get_pointer_field(7).is_null()
      }
      #[inline]
      pub fn get_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_id(&self) -> bool {
        !self.reader.get_pointer_field(8).is_null()
      }
      #[inline]
      pub fn get_manufacturer(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_manufacturer(&self) -> bool {
        !self.reader.get_pointer_field(9).is_null()
      }
      #[inline]
      pub fn get_model(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(10), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_model(&self) -> bool {
        !self.reader.get_pointer_field(10).is_null()
      }
      #[inline]
      pub fn get_product(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(11), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_product(&self) -> bool {
        !self.reader.get_pointer_field(11).is_null()
      }
      #[inline]
      pub fn get_radio_version(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(12), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_radio_version(&self) -> bool {
        !self.reader.get_pointer_field(12).is_null()
      }
      #[inline]
      pub fn get_serial(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(13), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_serial(&self) -> bool {
        !self.reader.get_pointer_field(13).is_null()
      }
      #[inline]
      pub fn get_supported_abis(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(14), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_supported_abis(&self) -> bool {
        !self.reader.get_pointer_field(14).is_null()
      }
      #[inline]
      pub fn get_tags(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(15), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_tags(&self) -> bool {
        !self.reader.get_pointer_field(15).is_null()
      }
      #[inline]
      pub fn get_time(self) -> i64 {
        self.reader.get_data_field::<i64>(0)
      }
      #[inline]
      pub fn get_type(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(16), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_type(&self) -> bool {
        !self.reader.get_pointer_field(16).is_null()
      }
      #[inline]
      pub fn get_user(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(17), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_user(&self) -> bool {
        !self.reader.get_pointer_field(17).is_null()
      }
      #[inline]
      pub fn get_version_codename(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(18), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_version_codename(&self) -> bool {
        !self.reader.get_pointer_field(18).is_null()
      }
      #[inline]
      pub fn get_version_release(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(19), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_version_release(&self) -> bool {
        !self.reader.get_pointer_field(19).is_null()
      }
      #[inline]
      pub fn get_version_sdk(self) -> i32 {
        self.reader.get_data_field::<i32>(2)
      }
      #[inline]
      pub fn get_version_security_patch(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(20), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_version_security_patch(&self) -> bool {
        !self.reader.get_pointer_field(20).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 21 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_board(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_board(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
      }
      #[inline]
      pub fn init_board(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_board(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_bootloader(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_bootloader(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
      }
      #[inline]
      pub fn init_bootloader(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      #[inline]
      pub fn has_bootloader(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_brand(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_brand(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
      }
      #[inline]
      pub fn init_brand(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      #[inline]
      pub fn has_brand(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_device(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_device(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false).unwrap()
      }
      #[inline]
      pub fn init_device(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(3).init_text(size)
      }
      #[inline]
      pub fn has_device(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_display(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_display(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false).unwrap()
      }
      #[inline]
      pub fn init_display(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(4).init_text(size)
      }
      #[inline]
      pub fn has_display(&self) -> bool {
        !self.builder.is_pointer_field_null(4)
      }
      #[inline]
      pub fn get_fingerprint(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_fingerprint(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false).unwrap()
      }
      #[inline]
      pub fn init_fingerprint(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(5).init_text(size)
      }
      #[inline]
      pub fn has_fingerprint(&self) -> bool {
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn get_hardware(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_hardware(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false).unwrap()
      }
      #[inline]
      pub fn init_hardware(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(6).init_text(size)
      }
      #[inline]
      pub fn has_hardware(&self) -> bool {
        !self.builder.is_pointer_field_null(6)
      }
      #[inline]
      pub fn get_host(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_host(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false).unwrap()
      }
      #[inline]
      pub fn init_host(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(7).init_text(size)
      }
      #[inline]
      pub fn has_host(&self) -> bool {
        !self.builder.is_pointer_field_null(7)
      }
      #[inline]
      pub fn get_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_id(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(8), value, false).unwrap()
      }
      #[inline]
      pub fn init_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(8).init_text(size)
      }
      #[inline]
      pub fn has_id(&self) -> bool {
        !self.builder.is_pointer_field_null(8)
      }
      #[inline]
      pub fn get_manufacturer(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_manufacturer(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false).unwrap()
      }
      #[inline]
      pub fn init_manufacturer(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(9).init_text(size)
      }
      #[inline]
      pub fn has_manufacturer(&self) -> bool {
        !self.builder.is_pointer_field_null(9)
      }
      #[inline]
      pub fn get_model(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(10), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_model(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(10), value, false).unwrap()
      }
      #[inline]
      pub fn init_model(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(10).init_text(size)
      }
      #[inline]
      pub fn has_model(&self) -> bool {
        !self.builder.is_pointer_field_null(10)
      }
      #[inline]
      pub fn get_product(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(11), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_product(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(11), value, false).unwrap()
      }
      #[inline]
      pub fn init_product(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(11).init_text(size)
      }
      #[inline]
      pub fn has_product(&self) -> bool {
        !self.builder.is_pointer_field_null(11)
      }
      #[inline]
      pub fn get_radio_version(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(12), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_radio_version(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(12), value, false).unwrap()
      }
      #[inline]
      pub fn init_radio_version(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(12).init_text(size)
      }
      #[inline]
      pub fn has_radio_version(&self) -> bool {
        !self.builder.is_pointer_field_null(12)
      }
      #[inline]
      pub fn get_serial(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(13), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_serial(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(13), value, false).unwrap()
      }
      #[inline]
      pub fn init_serial(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(13).init_text(size)
      }
      #[inline]
      pub fn has_serial(&self) -> bool {
        !self.builder.is_pointer_field_null(13)
      }
      #[inline]
      pub fn get_supported_abis(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(14), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_supported_abis(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text_list::Owned>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(14), value, false)
      }
      #[inline]
      pub fn init_supported_abis(self, size: u32) -> ::capnp::text_list::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(14), size)
      }
      #[inline]
      pub fn has_supported_abis(&self) -> bool {
        !self.builder.is_pointer_field_null(14)
      }
      #[inline]
      pub fn get_tags(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(15), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_tags(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(15), value, false).unwrap()
      }
      #[inline]
      pub fn init_tags(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(15).init_text(size)
      }
      #[inline]
      pub fn has_tags(&self) -> bool {
        !self.builder.is_pointer_field_null(15)
      }
      #[inline]
      pub fn get_time(self) -> i64 {
        self.builder.get_data_field::<i64>(0)
      }
      #[inline]
      pub fn set_time(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(0, value);
      }
      #[inline]
      pub fn get_type(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(16), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_type(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(16), value, false).unwrap()
      }
      #[inline]
      pub fn init_type(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(16).init_text(size)
      }
      #[inline]
      pub fn has_type(&self) -> bool {
        !self.builder.is_pointer_field_null(16)
      }
      #[inline]
      pub fn get_user(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(17), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_user(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(17), value, false).unwrap()
      }
      #[inline]
      pub fn init_user(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(17).init_text(size)
      }
      #[inline]
      pub fn has_user(&self) -> bool {
        !self.builder.is_pointer_field_null(17)
      }
      #[inline]
      pub fn get_version_codename(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(18), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_version_codename(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(18), value, false).unwrap()
      }
      #[inline]
      pub fn init_version_codename(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(18).init_text(size)
      }
      #[inline]
      pub fn has_version_codename(&self) -> bool {
        !self.builder.is_pointer_field_null(18)
      }
      #[inline]
      pub fn get_version_release(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(19), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_version_release(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(19), value, false).unwrap()
      }
      #[inline]
      pub fn init_version_release(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(19).init_text(size)
      }
      #[inline]
      pub fn has_version_release(&self) -> bool {
        !self.builder.is_pointer_field_null(19)
      }
      #[inline]
      pub fn get_version_sdk(self) -> i32 {
        self.builder.get_data_field::<i32>(2)
      }
      #[inline]
      pub fn set_version_sdk(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(2, value);
      }
      #[inline]
      pub fn get_version_security_patch(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(20), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_version_security_patch(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(20), value, false).unwrap()
      }
      #[inline]
      pub fn init_version_security_patch(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(20).init_text(size)
      }
      #[inline]
      pub fn has_version_security_patch(&self) -> bool {
        !self.builder.is_pointer_field_null(20)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 379] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(108, 66, 31, 194, 213, 25, 41, 254),
        ::capnp::word(19, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(92, 182, 63, 235, 202, 8, 16, 231),
        ::capnp::word(21, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 34, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 15, 5, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 73, 110, 105, 116, 68, 97),
        ::capnp::word(116, 97, 46, 65, 110, 100, 114, 111),
        ::capnp::word(105, 100, 66, 117, 105, 108, 100, 73),
        ::capnp::word(110, 102, 111, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(92, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 2, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(124, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 2, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 2, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(136, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(133, 2, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(128, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(140, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(137, 2, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(132, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 2, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(149, 2, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(148, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(160, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(157, 2, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 2, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 2, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(176, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(173, 2, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 2, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 2, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 2, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 2, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(192, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 2, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 2, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(17, 0, 0, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 2, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(18, 0, 0, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 2, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(19, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 2, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 2, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(21, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 2, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(248, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(22, 0, 0, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 3, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(98, 111, 97, 114, 100, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 111, 111, 116, 108, 111, 97, 100),
        ::capnp::word(101, 114, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 114, 97, 110, 100, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 118, 105, 99, 101, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 105, 115, 112, 108, 97, 121, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 105, 110, 103, 101, 114, 112, 114),
        ::capnp::word(105, 110, 116, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 114, 100, 119, 97, 114, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 111, 115, 116, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 100, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 97, 110, 117, 102, 97, 99, 116),
        ::capnp::word(117, 114, 101, 114, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 111, 100, 101, 108, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 114, 111, 100, 117, 99, 116, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 97, 100, 105, 111, 86, 101, 114),
        ::capnp::word(115, 105, 111, 110, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 101, 114, 105, 97, 108, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 117, 112, 112, 111, 114, 116, 101),
        ::capnp::word(100, 65, 98, 105, 115, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 97, 103, 115, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 105, 109, 101, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 115, 101, 114, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 101, 114, 115, 105, 111, 110, 67),
        ::capnp::word(111, 100, 101, 110, 97, 109, 101, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 101, 114, 115, 105, 111, 110, 82),
        ::capnp::word(101, 108, 101, 97, 115, 101, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 101, 114, 115, 105, 111, 110, 83),
        ::capnp::word(100, 107, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 101, 114, 115, 105, 111, 110, 83),
        ::capnp::word(101, 99, 117, 114, 105, 116, 121, 80),
        ::capnp::word(97, 116, 99, 104, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          6 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          7 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          8 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          9 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          10 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          11 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          12 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          13 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          14 => <::capnp::text_list::Owned as ::capnp::introspect::Introspect>::introspect(),
          15 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          16 => <i64 as ::capnp::introspect::Introspect>::introspect(),
          17 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          18 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          19 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          20 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          21 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          22 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22];
      pub const TYPE_ID: u64 = 0xfe29_19d5_c21f_426c;
    }
  }

  pub mod android_sensor {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_id(self) -> i32 {
        self.reader.get_data_field::<i32>(0)
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_vendor(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_vendor(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_version(self) -> i32 {
        self.reader.get_data_field::<i32>(1)
      }
      #[inline]
      pub fn get_handle(self) -> i32 {
        self.reader.get_data_field::<i32>(2)
      }
      #[inline]
      pub fn get_type(self) -> i32 {
        self.reader.get_data_field::<i32>(3)
      }
      #[inline]
      pub fn get_max_range(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_resolution(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_power(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_min_delay(self) -> i32 {
        self.reader.get_data_field::<i32>(7)
      }
      #[inline]
      pub fn get_fifo_reserved_event_count(self) -> u32 {
        self.reader.get_data_field::<u32>(8)
      }
      #[inline]
      pub fn get_fifo_max_event_count(self) -> u32 {
        self.reader.get_data_field::<u32>(9)
      }
      #[inline]
      pub fn get_string_type(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_string_type(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_max_delay(self) -> i32 {
        self.reader.get_data_field::<i32>(10)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 6, pointers: 3 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_id(self) -> i32 {
        self.builder.get_data_field::<i32>(0)
      }
      #[inline]
      pub fn set_id(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(0, value);
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_name(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
      }
      #[inline]
      pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_vendor(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_vendor(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
      }
      #[inline]
      pub fn init_vendor(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      #[inline]
      pub fn has_vendor(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_version(self) -> i32 {
        self.builder.get_data_field::<i32>(1)
      }
      #[inline]
      pub fn set_version(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(1, value);
      }
      #[inline]
      pub fn get_handle(self) -> i32 {
        self.builder.get_data_field::<i32>(2)
      }
      #[inline]
      pub fn set_handle(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(2, value);
      }
      #[inline]
      pub fn get_type(self) -> i32 {
        self.builder.get_data_field::<i32>(3)
      }
      #[inline]
      pub fn set_type(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(3, value);
      }
      #[inline]
      pub fn get_max_range(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_max_range(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_resolution(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_resolution(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_power(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_power(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_min_delay(self) -> i32 {
        self.builder.get_data_field::<i32>(7)
      }
      #[inline]
      pub fn set_min_delay(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(7, value);
      }
      #[inline]
      pub fn get_fifo_reserved_event_count(self) -> u32 {
        self.builder.get_data_field::<u32>(8)
      }
      #[inline]
      pub fn set_fifo_reserved_event_count(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(8, value);
      }
      #[inline]
      pub fn get_fifo_max_event_count(self) -> u32 {
        self.builder.get_data_field::<u32>(9)
      }
      #[inline]
      pub fn set_fifo_max_event_count(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(9, value);
      }
      #[inline]
      pub fn get_string_type(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_string_type(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
      }
      #[inline]
      pub fn init_string_type(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      #[inline]
      pub fn has_string_type(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_max_delay(self) -> i32 {
        self.builder.get_data_field::<i32>(10)
      }
      #[inline]
      pub fn set_max_delay(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(10, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 238] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(205, 219, 135, 168, 147, 59, 81, 155),
        ::capnp::word(19, 0, 0, 0, 1, 0, 6, 0),
        ::capnp::word(92, 182, 63, 235, 202, 8, 16, 231),
        ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 10, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 23, 3, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 73, 110, 105, 116, 68, 97),
        ::capnp::word(116, 97, 46, 65, 110, 100, 114, 111),
        ::capnp::word(105, 100, 83, 101, 110, 115, 111, 114),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(56, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 1, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(128, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(125, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(136, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(133, 1, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(128, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(140, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(137, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(132, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(136, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 1, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(144, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(156, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(153, 1, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 1, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(176, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(173, 1, 0, 0, 186, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 1, 0, 0, 146, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 1, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 1, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(105, 100, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 101, 110, 100, 111, 114, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 101, 114, 115, 105, 111, 110, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 110, 100, 108, 101, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 97, 120, 82, 97, 110, 103, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 101, 115, 111, 108, 117, 116, 105),
        ::capnp::word(111, 110, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 111, 119, 101, 114, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 105, 110, 68, 101, 108, 97, 121),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 105, 102, 111, 82, 101, 115, 101),
        ::capnp::word(114, 118, 101, 100, 69, 118, 101, 110),
        ::capnp::word(116, 67, 111, 117, 110, 116, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 105, 102, 111, 77, 97, 120, 69),
        ::capnp::word(118, 101, 110, 116, 67, 111, 117, 110),
        ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 114, 105, 110, 103, 84, 121),
        ::capnp::word(112, 101, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 97, 120, 68, 101, 108, 97, 121),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          3 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          9 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          10 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          11 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          12 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          13 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[11,10,4,0,13,6,9,1,8,7,12,5,2,3];
      pub const TYPE_ID: u64 = 0x9b51_3b93_a887_dbcd;
    }
  }

  pub mod chffr_android_extra {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_all_camera_characteristics(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Reader<'a,::capnp::text::Owned,::capnp::text::Owned>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_all_camera_characteristics(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 1 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_all_camera_characteristics(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::text::Owned>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_all_camera_characteristics(&mut self, value: crate::cereal::log_capnp::map::Reader<'_,::capnp::text::Owned,::capnp::text::Owned>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_all_camera_characteristics(self, ) -> crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::text::Owned> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
      }
      #[inline]
      pub fn has_all_camera_characteristics(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
      pub fn get_all_camera_characteristics(&self) -> crate::cereal::log_capnp::map::Pipeline<::capnp::text::Owned,::capnp::text::Owned> {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
      }
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 55] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(165, 21, 246, 164, 83, 93, 251, 156),
        ::capnp::word(19, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(92, 182, 63, 235, 202, 8, 16, 231),
        ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 63, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 73, 110, 105, 116, 68, 97),
        ::capnp::word(116, 97, 46, 67, 104, 102, 102, 114),
        ::capnp::word(65, 110, 100, 114, 111, 105, 100, 69),
        ::capnp::word(120, 116, 114, 97, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 0, 0, 0, 202, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(20, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(97, 108, 108, 67, 97, 109, 101, 114),
        ::capnp::word(97, 67, 104, 97, 114, 97, 99, 116),
        ::capnp::word(101, 114, 105, 115, 116, 105, 99, 115),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 31, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 39, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <crate::cereal::log_capnp::map::Owned<::capnp::text::Owned,::capnp::text::Owned> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0];
      pub const TYPE_ID: u64 = 0x9cfb_5d53_a4f6_15a5;
    }
  }

  pub mod ios_build_info {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_app_version(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_app_version(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_app_build(self) -> u32 {
        self.reader.get_data_field::<u32>(0)
      }
      #[inline]
      pub fn get_os_version(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_os_version(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_device_model(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_device_model(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 3 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_app_version(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_app_version(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
      }
      #[inline]
      pub fn init_app_version(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_app_version(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_app_build(self) -> u32 {
        self.builder.get_data_field::<u32>(0)
      }
      #[inline]
      pub fn set_app_build(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(0, value);
      }
      #[inline]
      pub fn get_os_version(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_os_version(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
      }
      #[inline]
      pub fn init_os_version(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      #[inline]
      pub fn has_os_version(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_device_model(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_device_model(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
      }
      #[inline]
      pub fn init_device_model(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      #[inline]
      pub fn has_device_model(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 82] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(128, 85, 159, 35, 40, 59, 126, 217),
        ::capnp::word(19, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(92, 182, 63, 235, 202, 8, 16, 231),
        ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 231, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 73, 110, 105, 116, 68, 97),
        ::capnp::word(116, 97, 46, 73, 111, 115, 66, 117),
        ::capnp::word(105, 108, 100, 73, 110, 102, 111, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(113, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(124, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(97, 112, 112, 86, 101, 114, 115, 105),
        ::capnp::word(111, 110, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 112, 112, 66, 117, 105, 108, 100),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 115, 86, 101, 114, 115, 105, 111),
        ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 118, 105, 99, 101, 77, 111),
        ::capnp::word(100, 101, 108, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,0,3,2];
      pub const TYPE_ID: u64 = 0xd97e_3b28_239f_5580;
    }
  }
}

pub mod frame_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_encode_id(self) -> u32 {
      self.reader.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_frame_length_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.reader.get_data_field::<i32>(4)
    }
    #[inline]
    pub fn get_integ_lines(self) -> i32 {
      self.reader.get_data_field::<i32>(5)
    }
    #[inline]
    pub fn get_global_gain_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.reader.get_data_field::<i32>(6)
    }
    #[inline]
    pub fn get_image(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_image(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_frame_type(self) -> ::core::result::Result<crate::cereal::log_capnp::frame_data::FrameType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(14))
    }
    #[inline]
    pub fn get_timestamp_sof(self) -> u64 {
      self.reader.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn get_android_capture_result_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::frame_data::android_capture_result::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_android_capture_result_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_transform(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_transform(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_lens_pos_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.reader.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn get_lens_sag_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn get_lens_err_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_lens_true_pos_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_gain(self) -> f32 {
      self.reader.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn get_focus_val_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_focus_val_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_focus_conf_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,u8>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_focus_conf_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_sharpness_score_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,u16>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_sharpness_score_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_recover_state_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.reader.get_data_field::<i32>(15)
    }
    #[inline]
    pub fn get_high_conversion_gain(self) -> bool {
      self.reader.get_bool_field(240)
    }
    #[inline]
    pub fn get_measured_grey_fraction(self) -> f32 {
      self.reader.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn get_target_grey_fraction(self) -> f32 {
      self.reader.get_data_field::<f32>(17)
    }
    #[inline]
    pub fn get_processing_time(self) -> f32 {
      self.reader.get_data_field::<f32>(18)
    }
    #[inline]
    pub fn get_temperatures_c(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_temperatures_c(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_frame_id_sensor(self) -> u32 {
      self.reader.get_data_field::<u32>(19)
    }
    #[inline]
    pub fn get_sensor(self) -> ::core::result::Result<crate::cereal::log_capnp::frame_data::ImageSensor,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(40))
    }
    #[inline]
    pub fn get_exposure_val_percent(self) -> f32 {
      self.reader.get_data_field::<f32>(21)
    }
    #[inline]
    pub fn get_request_id(self) -> u32 {
      self.reader.get_data_field::<u32>(22)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 12, pointers: 7 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_encode_id(self) -> u32 {
      self.builder.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn set_encode_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_timestamp_eof(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_frame_length_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.builder.get_data_field::<i32>(4)
    }
    #[inline]
    pub fn set_frame_length_d_e_p_r_e_c_a_t_e_d(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(4, value);
    }
    #[inline]
    pub fn get_integ_lines(self) -> i32 {
      self.builder.get_data_field::<i32>(5)
    }
    #[inline]
    pub fn set_integ_lines(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(5, value);
    }
    #[inline]
    pub fn get_global_gain_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.builder.get_data_field::<i32>(6)
    }
    #[inline]
    pub fn set_global_gain_d_e_p_r_e_c_a_t_e_d(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(6, value);
    }
    #[inline]
    pub fn get_image(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_image(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_image(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_image(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_frame_type(self) -> ::core::result::Result<crate::cereal::log_capnp::frame_data::FrameType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(14))
    }
    #[inline]
    pub fn set_frame_type(&mut self, value: crate::cereal::log_capnp::frame_data::FrameType)  {
      self.builder.set_data_field::<u16>(14, value as u16);
    }
    #[inline]
    pub fn get_timestamp_sof(self) -> u64 {
      self.builder.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn set_timestamp_sof(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(4, value);
    }
    #[inline]
    pub fn get_android_capture_result_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::frame_data::android_capture_result::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_android_capture_result_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::frame_data::android_capture_result::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_android_capture_result_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::frame_data::android_capture_result::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_android_capture_result_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_transform(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_transform(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_transform(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_transform(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_lens_pos_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.builder.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn set_lens_pos_d_e_p_r_e_c_a_t_e_d(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(10, value);
    }
    #[inline]
    pub fn get_lens_sag_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn set_lens_sag_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(11, value);
    }
    #[inline]
    pub fn get_lens_err_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_lens_err_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_lens_true_pos_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_lens_true_pos_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_gain(self) -> f32 {
      self.builder.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn set_gain(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(14, value);
    }
    #[inline]
    pub fn get_focus_val_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_focus_val_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<i16>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_focus_val_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_focus_val_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_focus_conf_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,u8>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_focus_conf_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<u8>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_focus_conf_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,u8> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_focus_conf_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_sharpness_score_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,u16>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_sharpness_score_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<u16>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_sharpness_score_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,u16> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_sharpness_score_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_recover_state_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.builder.get_data_field::<i32>(15)
    }
    #[inline]
    pub fn set_recover_state_d_e_p_r_e_c_a_t_e_d(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(15, value);
    }
    #[inline]
    pub fn get_high_conversion_gain(self) -> bool {
      self.builder.get_bool_field(240)
    }
    #[inline]
    pub fn set_high_conversion_gain(&mut self, value: bool)  {
      self.builder.set_bool_field(240, value);
    }
    #[inline]
    pub fn get_measured_grey_fraction(self) -> f32 {
      self.builder.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn set_measured_grey_fraction(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(16, value);
    }
    #[inline]
    pub fn get_target_grey_fraction(self) -> f32 {
      self.builder.get_data_field::<f32>(17)
    }
    #[inline]
    pub fn set_target_grey_fraction(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(17, value);
    }
    #[inline]
    pub fn get_processing_time(self) -> f32 {
      self.builder.get_data_field::<f32>(18)
    }
    #[inline]
    pub fn set_processing_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(18, value);
    }
    #[inline]
    pub fn get_temperatures_c(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_temperatures_c(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_temperatures_c(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    #[inline]
    pub fn has_temperatures_c(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_frame_id_sensor(self) -> u32 {
      self.builder.get_data_field::<u32>(19)
    }
    #[inline]
    pub fn set_frame_id_sensor(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(19, value);
    }
    #[inline]
    pub fn get_sensor(self) -> ::core::result::Result<crate::cereal::log_capnp::frame_data::ImageSensor,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(40))
    }
    #[inline]
    pub fn set_sensor(&mut self, value: crate::cereal::log_capnp::frame_data::ImageSensor)  {
      self.builder.set_data_field::<u16>(40, value as u16);
    }
    #[inline]
    pub fn get_exposure_val_percent(self) -> f32 {
      self.builder.get_data_field::<f32>(21)
    }
    #[inline]
    pub fn set_exposure_val_percent(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(21, value);
    }
    #[inline]
    pub fn get_request_id(self) -> u32 {
      self.builder.get_data_field::<u32>(22)
    }
    #[inline]
    pub fn set_request_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(22, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_android_capture_result_d_e_p_r_e_c_a_t_e_d(&self) -> crate::cereal::log_capnp::frame_data::android_capture_result::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 527] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(51, 10, 174, 149, 246, 69, 2, 234),
      ::capnp::word(10, 0, 0, 0, 1, 0, 12, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(7, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 55, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 0, 0, 0, 95, 6, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 70, 114, 97, 109, 101, 68),
      ::capnp::word(97, 116, 97, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(121, 40, 16, 30, 240, 105, 177, 221),
      ::capnp::word(17, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(156, 214, 93, 112, 231, 177, 16, 216),
      ::capnp::word(17, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(72, 32, 29, 196, 186, 239, 195, 188),
      ::capnp::word(17, 0, 0, 0, 170, 0, 0, 0),
      ::capnp::word(70, 114, 97, 109, 101, 84, 121, 112),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 109, 97, 103, 101, 83, 101, 110),
      ::capnp::word(115, 111, 114, 0, 0, 0, 0, 0),
      ::capnp::word(65, 110, 100, 114, 111, 105, 100, 67),
      ::capnp::word(97, 112, 116, 117, 114, 101, 82, 101),
      ::capnp::word(115, 117, 108, 116, 0, 0, 0, 0),
      ::capnp::word(116, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 3, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 3, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 3, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 3, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 3, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 3, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 3, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 3, 0, 0, 250, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 3, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 3, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 3, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 3, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 3, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 3, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 3, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 3, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(27, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 3, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 4, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 240, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 4, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 4, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 4, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 4, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 4, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 4, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 40, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 4, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 4, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 4, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 99, 111, 100, 101, 73, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
      ::capnp::word(112, 69, 111, 102, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 97, 109, 101, 76, 101, 110),
      ::capnp::word(103, 116, 104, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 110, 116, 101, 103, 76, 105, 110),
      ::capnp::word(101, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 108, 111, 98, 97, 108, 71, 97),
      ::capnp::word(105, 110, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 109, 97, 103, 101, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 97, 109, 101, 84, 121, 112),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 40, 16, 30, 240, 105, 177, 221),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
      ::capnp::word(112, 83, 111, 102, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 100, 114, 111, 105, 100, 67),
      ::capnp::word(97, 112, 116, 117, 114, 101, 82, 101),
      ::capnp::word(115, 117, 108, 116, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 32, 29, 196, 186, 239, 195, 188),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 114, 97, 110, 115, 102, 111, 114),
      ::capnp::word(109, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 110, 115, 80, 111, 115, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 110, 115, 83, 97, 103, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 110, 115, 69, 114, 114, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 110, 115, 84, 114, 117, 101),
      ::capnp::word(80, 111, 115, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 97, 105, 110, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 111, 99, 117, 115, 86, 97, 108),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 111, 99, 117, 115, 67, 111, 110),
      ::capnp::word(102, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 104, 97, 114, 112, 110, 101, 115),
      ::capnp::word(115, 83, 99, 111, 114, 101, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 101, 99, 111, 118, 101, 114, 83),
      ::capnp::word(116, 97, 116, 101, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 105, 103, 104, 67, 111, 110, 118),
      ::capnp::word(101, 114, 115, 105, 111, 110, 71, 97),
      ::capnp::word(105, 110, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 101, 97, 115, 117, 114, 101, 100),
      ::capnp::word(71, 114, 101, 121, 70, 114, 97, 99),
      ::capnp::word(116, 105, 111, 110, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 97, 114, 103, 101, 116, 71, 114),
      ::capnp::word(101, 121, 70, 114, 97, 99, 116, 105),
      ::capnp::word(111, 110, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 111, 99, 101, 115, 115, 105),
      ::capnp::word(110, 103, 84, 105, 109, 101, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 101, 109, 112, 101, 114, 97, 116),
      ::capnp::word(117, 114, 101, 115, 67, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 83),
      ::capnp::word(101, 110, 115, 111, 114, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 110, 115, 111, 114, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 214, 93, 112, 231, 177, 16, 216),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 120, 112, 111, 115, 117, 114, 101),
      ::capnp::word(86, 97, 108, 80, 101, 114, 99, 101),
      ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 101, 113, 117, 101, 115, 116, 73),
      ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        3 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        7 => <crate::cereal::log_capnp::frame_data::FrameType as ::capnp::introspect::Introspect>::introspect(),
        8 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        9 => <crate::cereal::log_capnp::frame_data::android_capture_result::Owned as ::capnp::introspect::Introspect>::introspect(),
        10 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        11 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        12 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        14 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        16 => <::capnp::primitive_list::Owned<i16> as ::capnp::introspect::Introspect>::introspect(),
        17 => <::capnp::primitive_list::Owned<u8> as ::capnp::introspect::Introspect>::introspect(),
        18 => <::capnp::primitive_list::Owned<u16> as ::capnp::introspect::Introspect>::introspect(),
        19 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        20 => <bool as ::capnp::introspect::Introspect>::introspect(),
        21 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        22 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        23 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        24 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        25 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        26 => <crate::cereal::log_capnp::frame_data::ImageSensor as ::capnp::introspect::Introspect>::introspect(),
        27 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        28 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[9,1,27,17,16,0,25,3,7,15,5,20,6,4,13,11,12,14,21,23,19,28,26,18,22,24,2,8,10];
    pub const TYPE_ID: u64 = 0xea02_45f6_95ae_0a33;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum FrameType {
    Unknown = 0,
    Neo = 1,
    ChffrAndroid = 2,
    Front = 3,
  }

  impl ::capnp::introspect::Introspect for FrameType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &frame_type::ENCODED_NODE, annotation_types: frame_type::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<FrameType> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: FrameType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &frame_type::ENCODED_NODE, annotation_types: frame_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for FrameType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <FrameType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Unknown),
        1 => ::core::result::Result::Ok(Self::Neo),
        2 => ::core::result::Result::Ok(Self::ChffrAndroid),
        3 => ::core::result::Result::Ok(Self::Front),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<FrameType> for u16 {
    #[inline]
    fn from(x: FrameType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for FrameType {
    const TYPE_ID: u64 = 0xddb1_69f0_1e10_2879u64;
  }
  mod frame_type {
  pub static ENCODED_NODE: [::capnp::Word; 35] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(121, 40, 16, 30, 240, 105, 177, 221),
    ::capnp::word(20, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(51, 10, 174, 149, 246, 69, 2, 234),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 70, 114, 97, 109, 101, 68),
    ::capnp::word(97, 116, 97, 46, 70, 114, 97, 109),
    ::capnp::word(101, 84, 121, 112, 101, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
    ::capnp::word(110, 101, 111, 0, 0, 0, 0, 0),
    ::capnp::word(99, 104, 102, 102, 114, 65, 110, 100),
    ::capnp::word(114, 111, 105, 100, 0, 0, 0, 0),
    ::capnp::word(102, 114, 111, 110, 116, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum ImageSensor {
    Unknown = 0,
    Ar0231 = 1,
    Ox03c10 = 2,
    Os04c10 = 3,
  }

  impl ::capnp::introspect::Introspect for ImageSensor {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &image_sensor::ENCODED_NODE, annotation_types: image_sensor::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<ImageSensor> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: ImageSensor) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &image_sensor::ENCODED_NODE, annotation_types: image_sensor::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for ImageSensor {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <ImageSensor as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Unknown),
        1 => ::core::result::Result::Ok(Self::Ar0231),
        2 => ::core::result::Result::Ok(Self::Ox03c10),
        3 => ::core::result::Result::Ok(Self::Os04c10),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<ImageSensor> for u16 {
    #[inline]
    fn from(x: ImageSensor) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for ImageSensor {
    const TYPE_ID: u64 = 0xd810_b1e7_705d_d69cu64;
  }
  mod image_sensor {
  pub static ENCODED_NODE: [::capnp::Word; 34] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(156, 214, 93, 112, 231, 177, 16, 216),
    ::capnp::word(20, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(51, 10, 174, 149, 246, 69, 2, 234),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 70, 114, 97, 109, 101, 68),
    ::capnp::word(97, 116, 97, 46, 73, 109, 97, 103),
    ::capnp::word(101, 83, 101, 110, 115, 111, 114, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
    ::capnp::word(97, 114, 48, 50, 51, 49, 0, 0),
    ::capnp::word(111, 120, 48, 51, 99, 49, 48, 0),
    ::capnp::word(111, 115, 48, 52, 99, 49, 48, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod android_capture_result {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_sensitivity(self) -> i32 {
        self.reader.get_data_field::<i32>(0)
      }
      #[inline]
      pub fn get_frame_duration(self) -> i64 {
        self.reader.get_data_field::<i64>(1)
      }
      #[inline]
      pub fn get_exposure_time(self) -> i64 {
        self.reader.get_data_field::<i64>(2)
      }
      #[inline]
      pub fn get_rolling_shutter_skew(self) -> u64 {
        self.reader.get_data_field::<u64>(3)
      }
      #[inline]
      pub fn get_color_correction_transform(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_color_correction_transform(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_color_correction_gains(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_color_correction_gains(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_display_rotation(self) -> i8 {
        self.reader.get_data_field::<i8>(4)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 4, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_sensitivity(self) -> i32 {
        self.builder.get_data_field::<i32>(0)
      }
      #[inline]
      pub fn set_sensitivity(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(0, value);
      }
      #[inline]
      pub fn get_frame_duration(self) -> i64 {
        self.builder.get_data_field::<i64>(1)
      }
      #[inline]
      pub fn set_frame_duration(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(1, value);
      }
      #[inline]
      pub fn get_exposure_time(self) -> i64 {
        self.builder.get_data_field::<i64>(2)
      }
      #[inline]
      pub fn set_exposure_time(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(2, value);
      }
      #[inline]
      pub fn get_rolling_shutter_skew(self) -> u64 {
        self.builder.get_data_field::<u64>(3)
      }
      #[inline]
      pub fn set_rolling_shutter_skew(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(3, value);
      }
      #[inline]
      pub fn get_color_correction_transform(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_color_correction_transform(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<i32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_color_correction_transform(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_color_correction_transform(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_color_correction_gains(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_color_correction_gains(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_color_correction_gains(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_color_correction_gains(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_display_rotation(self) -> i8 {
        self.builder.get_data_field::<i8>(4)
      }
      #[inline]
      pub fn set_display_rotation(&mut self, value: i8)  {
        self.builder.set_data_field::<i8>(4, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 144] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(72, 32, 29, 196, 186, 239, 195, 188),
        ::capnp::word(20, 0, 0, 0, 1, 0, 4, 0),
        ::capnp::word(51, 10, 174, 149, 246, 69, 2, 234),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 74, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 143, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 70, 114, 97, 109, 101, 68),
        ::capnp::word(97, 116, 97, 46, 65, 110, 100, 114),
        ::capnp::word(111, 105, 100, 67, 97, 112, 116, 117),
        ::capnp::word(114, 101, 82, 101, 115, 117, 108, 116),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 0, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 0, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 0, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 0, 0, 0, 202, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 0, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(24, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(20, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(32, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 101, 110, 115, 105, 116, 105, 118),
        ::capnp::word(105, 116, 121, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 97, 109, 101, 68, 117, 114),
        ::capnp::word(97, 116, 105, 111, 110, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 120, 112, 111, 115, 117, 114, 101),
        ::capnp::word(84, 105, 109, 101, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 111, 108, 108, 105, 110, 103, 83),
        ::capnp::word(104, 117, 116, 116, 101, 114, 83, 107),
        ::capnp::word(101, 119, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 111, 108, 111, 114, 67, 111, 114),
        ::capnp::word(114, 101, 99, 116, 105, 111, 110, 84),
        ::capnp::word(114, 97, 110, 115, 102, 111, 114, 109),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 111, 108, 111, 114, 67, 111, 114),
        ::capnp::word(114, 101, 99, 116, 105, 111, 110, 71),
        ::capnp::word(97, 105, 110, 115, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 105, 115, 112, 108, 97, 121, 82),
        ::capnp::word(111, 116, 97, 116, 105, 111, 110, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <i64 as ::capnp::introspect::Introspect>::introspect(),
          2 => <i64 as ::capnp::introspect::Introspect>::introspect(),
          3 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::primitive_list::Owned<i32> as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          6 => <i8 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[5,4,6,2,1,3,0];
      pub const TYPE_ID: u64 = 0xbcc3_efba_c41d_2048;
    }
  }
}

pub mod thumbnail {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_thumbnail(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_thumbnail(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_timestamp_eof(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_thumbnail(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_thumbnail(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_thumbnail(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_thumbnail(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 64] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(211, 247, 10, 18, 100, 206, 95, 182),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 175, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 84, 104, 117, 109, 98, 110),
      ::capnp::word(97, 105, 108, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
      ::capnp::word(112, 69, 111, 102, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 104, 117, 109, 98, 110, 97, 105),
      ::capnp::word(108, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0,2,1];
    pub const TYPE_ID: u64 = 0xb65f_ce64_120a_f7d3;
  }
}

pub mod g_p_s_n_m_e_a_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.reader.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn get_local_wall_time(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_nmea(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_nmea(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.builder.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn set_timestamp(&mut self, value: i64)  {
      self.builder.set_data_field::<i64>(0, value);
    }
    #[inline]
    pub fn get_local_wall_time(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_local_wall_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_nmea(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_nmea(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
    }
    #[inline]
    pub fn init_nmea(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_nmea(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 64] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(136, 74, 186, 19, 120, 29, 41, 157),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 178, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 175, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 71, 80, 83, 78, 77, 69),
      ::capnp::word(65, 68, 97, 116, 97, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
      ::capnp::word(112, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 99, 97, 108, 87, 97, 108),
      ::capnp::word(108, 84, 105, 109, 101, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 109, 101, 97, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <i64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,2,0];
    pub const TYPE_ID: u64 = 0x9d29_1d78_13ba_4a88;
  }
}

pub mod sensor_event_data {
  pub use self::Which::{Acceleration,Magnetic,Orientation,Gyro,Pressure,MagneticUncalibrated,GyroUncalibrated,Proximity,Light,Temperature};

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_version(self) -> i32 {
      self.reader.get_data_field::<i32>(0)
    }
    #[inline]
    pub fn get_sensor(self) -> i32 {
      self.reader.get_data_field::<i32>(1)
    }
    #[inline]
    pub fn get_type(self) -> i32 {
      self.reader.get_data_field::<i32>(2)
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.reader.get_data_field::<i64>(2)
    }
    #[inline]
    pub fn has_acceleration(&self) -> bool {
      if self.reader.get_data_field::<u16>(6) != 0 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_magnetic(&self) -> bool {
      if self.reader.get_data_field::<u16>(6) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_orientation(&self) -> bool {
      if self.reader.get_data_field::<u16>(6) != 2 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gyro(&self) -> bool {
      if self.reader.get_data_field::<u16>(6) != 3 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::sensor_event_data::SensorSource,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(7))
    }
    #[inline]
    pub fn has_pressure(&self) -> bool {
      if self.reader.get_data_field::<u16>(6) != 4 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_uncalibrated_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(192)
    }
    #[inline]
    pub fn has_magnetic_uncalibrated(&self) -> bool {
      if self.reader.get_data_field::<u16>(6) != 5 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gyro_uncalibrated(&self) -> bool {
      if self.reader.get_data_field::<u16>(6) != 6 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(6) {
        0 => {
          ::core::result::Result::Ok(Acceleration(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(Magnetic(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(Orientation(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(Gyro(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(Pressure(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(MagneticUncalibrated(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        6 => {
          ::core::result::Result::Ok(GyroUncalibrated(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        7 => {
          ::core::result::Result::Ok(Proximity(
            self.reader.get_data_field::<f32>(7)
          ))
        }
        8 => {
          ::core::result::Result::Ok(Light(
            self.reader.get_data_field::<f32>(7)
          ))
        }
        9 => {
          ::core::result::Result::Ok(Temperature(
            self.reader.get_data_field::<f32>(7)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 4, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_version(self) -> i32 {
      self.builder.get_data_field::<i32>(0)
    }
    #[inline]
    pub fn set_version(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(0, value);
    }
    #[inline]
    pub fn get_sensor(self) -> i32 {
      self.builder.get_data_field::<i32>(1)
    }
    #[inline]
    pub fn set_sensor(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(1, value);
    }
    #[inline]
    pub fn get_type(self) -> i32 {
      self.builder.get_data_field::<i32>(2)
    }
    #[inline]
    pub fn set_type(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(2, value);
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.builder.get_data_field::<i64>(2)
    }
    #[inline]
    pub fn set_timestamp(&mut self, value: i64)  {
      self.builder.set_data_field::<i64>(2, value);
    }
    #[inline]
    pub fn set_acceleration(&mut self, value: crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(6, 0);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_acceleration(self, ) -> crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a> {
      self.builder.set_data_field::<u16>(6, 0);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_acceleration(&self) -> bool {
      if self.builder.get_data_field::<u16>(6) != 0 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_magnetic(&mut self, value: crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(6, 1);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_magnetic(self, ) -> crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a> {
      self.builder.set_data_field::<u16>(6, 1);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_magnetic(&self) -> bool {
      if self.builder.get_data_field::<u16>(6) != 1 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_orientation(&mut self, value: crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(6, 2);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_orientation(self, ) -> crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a> {
      self.builder.set_data_field::<u16>(6, 2);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_orientation(&self) -> bool {
      if self.builder.get_data_field::<u16>(6) != 2 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gyro(&mut self, value: crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(6, 3);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gyro(self, ) -> crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a> {
      self.builder.set_data_field::<u16>(6, 3);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gyro(&self) -> bool {
      if self.builder.get_data_field::<u16>(6) != 3 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::sensor_event_data::SensorSource,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(7))
    }
    #[inline]
    pub fn set_source(&mut self, value: crate::cereal::log_capnp::sensor_event_data::SensorSource)  {
      self.builder.set_data_field::<u16>(7, value as u16);
    }
    #[inline]
    pub fn set_pressure(&mut self, value: crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(6, 4);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_pressure(self, ) -> crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a> {
      self.builder.set_data_field::<u16>(6, 4);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_pressure(&self) -> bool {
      if self.builder.get_data_field::<u16>(6) != 4 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_uncalibrated_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(192)
    }
    #[inline]
    pub fn set_uncalibrated_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(192, value);
    }
    #[inline]
    pub fn set_magnetic_uncalibrated(&mut self, value: crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(6, 5);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_magnetic_uncalibrated(self, ) -> crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a> {
      self.builder.set_data_field::<u16>(6, 5);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_magnetic_uncalibrated(&self) -> bool {
      if self.builder.get_data_field::<u16>(6) != 5 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gyro_uncalibrated(&mut self, value: crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(6, 6);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gyro_uncalibrated(self, ) -> crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a> {
      self.builder.set_data_field::<u16>(6, 6);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gyro_uncalibrated(&self) -> bool {
      if self.builder.get_data_field::<u16>(6) != 6 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_proximity(&mut self, value: f32)  {
      self.builder.set_data_field::<u16>(6, 7);
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn set_light(&mut self, value: f32)  {
      self.builder.set_data_field::<u16>(6, 8);
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn set_temperature(&mut self, value: f32)  {
      self.builder.set_data_field::<u16>(6, 9);
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(6) {
        0 => {
          ::core::result::Result::Ok(Acceleration(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(Magnetic(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(Orientation(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(Gyro(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(Pressure(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(MagneticUncalibrated(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        6 => {
          ::core::result::Result::Ok(GyroUncalibrated(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        7 => {
          ::core::result::Result::Ok(Proximity(
            self.builder.get_data_field::<f32>(7)
          ))
        }
        8 => {
          ::core::result::Result::Ok(Light(
            self.builder.get_data_field::<f32>(7)
          ))
        }
        9 => {
          ::core::result::Result::Ok(Temperature(
            self.builder.get_data_field::<f32>(7)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 279] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(10, 0, 0, 0, 1, 0, 4, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 10, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 210, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 39, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 0, 0, 0, 135, 3, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 83, 101, 110, 115, 111, 114),
      ::capnp::word(69, 118, 101, 110, 116, 68, 97, 116),
      ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(252, 36, 252, 43, 189, 41, 52, 164),
      ::capnp::word(9, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(13, 141, 244, 247, 232, 60, 155, 228),
      ::capnp::word(9, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(83, 101, 110, 115, 111, 114, 86, 101),
      ::capnp::word(99, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(83, 101, 110, 115, 111, 114, 83, 111),
      ::capnp::word(117, 114, 99, 101, 0, 0, 0, 0),
      ::capnp::word(64, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 1, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 255, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 254, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 253, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 1, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 252, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 1, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 251, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 192, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 1, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 250, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 1, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 249, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 2, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 248, 255, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 247, 255, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 2, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 246, 255, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 2, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(118, 101, 114, 115, 105, 111, 110, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 110, 115, 111, 114, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
      ::capnp::word(112, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 101, 108, 101, 114, 97),
      ::capnp::word(116, 105, 111, 110, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 36, 252, 43, 189, 41, 52, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 103, 110, 101, 116, 105, 99),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 36, 252, 43, 189, 41, 52, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 105, 101, 110, 116, 97, 116),
      ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 36, 252, 43, 189, 41, 52, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 121, 114, 111, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 36, 252, 43, 189, 41, 52, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 117, 114, 99, 101, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 141, 244, 247, 232, 60, 155, 228),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 101, 115, 115, 117, 114, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 36, 252, 43, 189, 41, 52, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 110, 99, 97, 108, 105, 98, 114),
      ::capnp::word(97, 116, 101, 100, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 103, 110, 101, 116, 105, 99),
      ::capnp::word(85, 110, 99, 97, 108, 105, 98, 114),
      ::capnp::word(97, 116, 101, 100, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 36, 252, 43, 189, 41, 52, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 121, 114, 111, 85, 110, 99, 97),
      ::capnp::word(108, 105, 98, 114, 97, 116, 101, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 36, 252, 43, 189, 41, 52, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 111, 120, 105, 109, 105, 116),
      ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 103, 104, 116, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 101, 109, 112, 101, 114, 97, 116),
      ::capnp::word(117, 114, 101, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <i64 as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::sensor_event_data::sensor_vec::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <crate::cereal::log_capnp::sensor_event_data::sensor_vec::Owned as ::capnp::introspect::Introspect>::introspect(),
        6 => <crate::cereal::log_capnp::sensor_event_data::sensor_vec::Owned as ::capnp::introspect::Introspect>::introspect(),
        7 => <crate::cereal::log_capnp::sensor_event_data::sensor_vec::Owned as ::capnp::introspect::Introspect>::introspect(),
        8 => <crate::cereal::log_capnp::sensor_event_data::SensorSource as ::capnp::introspect::Introspect>::introspect(),
        9 => <crate::cereal::log_capnp::sensor_event_data::sensor_vec::Owned as ::capnp::introspect::Introspect>::introspect(),
        10 => <bool as ::capnp::introspect::Introspect>::introspect(),
        11 => <crate::cereal::log_capnp::sensor_event_data::sensor_vec::Owned as ::capnp::introspect::Introspect>::introspect(),
        12 => <crate::cereal::log_capnp::sensor_event_data::sensor_vec::Owned as ::capnp::introspect::Introspect>::introspect(),
        13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        14 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,8,10];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[4,5,6,7,9,11,12,13,14,15];
    pub static MEMBERS_BY_NAME : &[u16] = &[4,7,12,14,5,11,6,9,13,1,8,15,3,2,10,0];
    pub const TYPE_ID: u64 = 0xa2b2_9a69_d445_29a1;
  }
  pub enum Which<A0,A1,A2,A3,A4,A5,A6> {
    Acceleration(A0),
    Magnetic(A1),
    Orientation(A2),
    Gyro(A3),
    Pressure(A4),
    MagneticUncalibrated(A5),
    GyroUncalibrated(A6),
    Proximity(f32),
    Light(f32),
    Temperature(f32),
  }
  pub type WhichReader<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Reader<'a>>>;
  pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::sensor_vec::Builder<'a>>>;

  pub mod sensor_vec {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_v(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_status(self) -> i8 {
        self.reader.get_data_field::<i8>(0)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 1 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_v(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_status(self) -> i8 {
        self.builder.get_data_field::<i8>(0)
      }
      #[inline]
      pub fn set_status(&mut self, value: i8)  {
        self.builder.set_data_field::<i8>(0, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 53] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(252, 36, 252, 43, 189, 41, 52, 164),
        ::capnp::word(26, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
        ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 34, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 83, 101, 110, 115, 111, 114),
        ::capnp::word(69, 118, 101, 110, 116, 68, 97, 116),
        ::capnp::word(97, 46, 83, 101, 110, 115, 111, 114),
        ::capnp::word(86, 101, 99, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(118, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 97, 116, 117, 115, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <i8 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,0];
      pub const TYPE_ID: u64 = 0xa434_29bd_2bfc_24fc;
    }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum SensorSource {
    Android = 0,
    IOS = 1,
    Fiber = 2,
    Velodyne = 3,
    Bno055 = 4,
    Lsm6ds3 = 5,
    Bmp280 = 6,
    Mmc3416x = 7,
    Bmx055 = 8,
    Rpr0521 = 9,
    Lsm6ds3trc = 10,
    Mmc5603nj = 11,
  }

  impl ::capnp::introspect::Introspect for SensorSource {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &sensor_source::ENCODED_NODE, annotation_types: sensor_source::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<SensorSource> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: SensorSource) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &sensor_source::ENCODED_NODE, annotation_types: sensor_source::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for SensorSource {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <SensorSource as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Android),
        1 => ::core::result::Result::Ok(Self::IOS),
        2 => ::core::result::Result::Ok(Self::Fiber),
        3 => ::core::result::Result::Ok(Self::Velodyne),
        4 => ::core::result::Result::Ok(Self::Bno055),
        5 => ::core::result::Result::Ok(Self::Lsm6ds3),
        6 => ::core::result::Result::Ok(Self::Bmp280),
        7 => ::core::result::Result::Ok(Self::Mmc3416x),
        8 => ::core::result::Result::Ok(Self::Bmx055),
        9 => ::core::result::Result::Ok(Self::Rpr0521),
        10 => ::core::result::Result::Ok(Self::Lsm6ds3trc),
        11 => ::core::result::Result::Ok(Self::Mmc5603nj),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<SensorSource> for u16 {
    #[inline]
    fn from(x: SensorSource) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for SensorSource {
    const TYPE_ID: u64 = 0xe49b_3ce8_f7f4_8d0du64;
  }
  mod sensor_source {
  pub static ENCODED_NODE: [::capnp::Word; 71] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(13, 141, 244, 247, 232, 60, 155, 228),
    ::capnp::word(26, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 58, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 39, 1, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 83, 101, 110, 115, 111, 114),
    ::capnp::word(69, 118, 101, 110, 116, 68, 97, 116),
    ::capnp::word(97, 46, 83, 101, 110, 115, 111, 114),
    ::capnp::word(83, 111, 117, 114, 99, 101, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(48, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(137, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(129, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(121, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(113, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 110, 100, 114, 111, 105, 100, 0),
    ::capnp::word(105, 79, 83, 0, 0, 0, 0, 0),
    ::capnp::word(102, 105, 98, 101, 114, 0, 0, 0),
    ::capnp::word(118, 101, 108, 111, 100, 121, 110, 101),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 110, 111, 48, 53, 53, 0, 0),
    ::capnp::word(108, 115, 109, 54, 100, 115, 51, 0),
    ::capnp::word(98, 109, 112, 50, 56, 48, 0, 0),
    ::capnp::word(109, 109, 99, 51, 52, 49, 54, 120),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 109, 120, 48, 53, 53, 0, 0),
    ::capnp::word(114, 112, 114, 48, 53, 50, 49, 0),
    ::capnp::word(108, 115, 109, 54, 100, 115, 51, 116),
    ::capnp::word(114, 99, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 109, 99, 53, 54, 48, 51, 110),
    ::capnp::word(106, 0, 0, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}

pub mod gps_location_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_flags(self) -> u16 {
      self.reader.get_data_field::<u16>(0)
    }
    #[inline]
    pub fn get_latitude(self) -> f64 {
      self.reader.get_data_field::<f64>(1)
    }
    #[inline]
    pub fn get_longitude(self) -> f64 {
      self.reader.get_data_field::<f64>(2)
    }
    #[inline]
    pub fn get_altitude(self) -> f64 {
      self.reader.get_data_field::<f64>(3)
    }
    #[inline]
    pub fn get_speed(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_bearing_deg(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn get_horizontal_accuracy(self) -> f32 {
      self.reader.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn get_unix_timestamp_millis(self) -> i64 {
      self.reader.get_data_field::<i64>(5)
    }
    #[inline]
    pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::gps_location_data::SensorSource,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn get_v_n_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_v_n_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_vertical_accuracy(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_bearing_accuracy_deg(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_speed_accuracy(self) -> f32 {
      self.reader.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn get_has_fix(self) -> bool {
      self.reader.get_bool_field(480)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 8, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_flags(self) -> u16 {
      self.builder.get_data_field::<u16>(0)
    }
    #[inline]
    pub fn set_flags(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(0, value);
    }
    #[inline]
    pub fn get_latitude(self) -> f64 {
      self.builder.get_data_field::<f64>(1)
    }
    #[inline]
    pub fn set_latitude(&mut self, value: f64)  {
      self.builder.set_data_field::<f64>(1, value);
    }
    #[inline]
    pub fn get_longitude(self) -> f64 {
      self.builder.get_data_field::<f64>(2)
    }
    #[inline]
    pub fn set_longitude(&mut self, value: f64)  {
      self.builder.set_data_field::<f64>(2, value);
    }
    #[inline]
    pub fn get_altitude(self) -> f64 {
      self.builder.get_data_field::<f64>(3)
    }
    #[inline]
    pub fn set_altitude(&mut self, value: f64)  {
      self.builder.set_data_field::<f64>(3, value);
    }
    #[inline]
    pub fn get_speed(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_speed(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_bearing_deg(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_bearing_deg(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
    #[inline]
    pub fn get_horizontal_accuracy(self) -> f32 {
      self.builder.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn set_horizontal_accuracy(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(9, value);
    }
    #[inline]
    pub fn get_unix_timestamp_millis(self) -> i64 {
      self.builder.get_data_field::<i64>(5)
    }
    #[inline]
    pub fn set_unix_timestamp_millis(&mut self, value: i64)  {
      self.builder.set_data_field::<i64>(5, value);
    }
    #[inline]
    pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::gps_location_data::SensorSource,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn set_source(&mut self, value: crate::cereal::log_capnp::gps_location_data::SensorSource)  {
      self.builder.set_data_field::<u16>(1, value as u16);
    }
    #[inline]
    pub fn get_v_n_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_v_n_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_v_n_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_v_n_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_vertical_accuracy(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_vertical_accuracy(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_bearing_accuracy_deg(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_bearing_accuracy_deg(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_speed_accuracy(self) -> f32 {
      self.builder.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn set_speed_accuracy(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(14, value);
    }
    #[inline]
    pub fn get_has_fix(self) -> bool {
      self.builder.get_bool_field(480)
    }
    #[inline]
    pub fn set_has_fix(&mut self, value: bool)  {
      self.builder.set_bool_field(480, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 249] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(14, 213, 173, 89, 72, 82, 70, 233),
      ::capnp::word(10, 0, 0, 0, 1, 0, 8, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 210, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 0, 0, 0, 23, 3, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 71, 112, 115, 76, 111, 99),
      ::capnp::word(97, 116, 105, 111, 110, 68, 97, 116),
      ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(99, 72, 115, 92, 242, 121, 255, 211),
      ::capnp::word(1, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(83, 101, 110, 115, 111, 114, 83, 111),
      ::capnp::word(117, 114, 99, 101, 0, 0, 0, 0),
      ::capnp::word(56, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 1, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 1, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 1, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 1, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 1, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 1, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 1, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 224, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 1, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(102, 108, 97, 103, 115, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 105, 116, 117, 100, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 116, 105, 116, 117, 100, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 101, 97, 114, 105, 110, 103, 68),
      ::capnp::word(101, 103, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 111, 114, 105, 122, 111, 110, 116),
      ::capnp::word(97, 108, 65, 99, 99, 117, 114, 97),
      ::capnp::word(99, 121, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 110, 105, 120, 84, 105, 109, 101),
      ::capnp::word(115, 116, 97, 109, 112, 77, 105, 108),
      ::capnp::word(108, 105, 115, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 117, 114, 99, 101, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 72, 115, 92, 242, 121, 255, 211),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 78, 69, 68, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 101, 114, 116, 105, 99, 97, 108),
      ::capnp::word(65, 99, 99, 117, 114, 97, 99, 121),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 101, 97, 114, 105, 110, 103, 65),
      ::capnp::word(99, 99, 117, 114, 97, 99, 121, 68),
      ::capnp::word(101, 103, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 65, 99, 99),
      ::capnp::word(117, 114, 97, 99, 121, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 97, 115, 70, 105, 120, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        1 => <f64 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f64 as ::capnp::introspect::Introspect>::introspect(),
        3 => <f64 as ::capnp::introspect::Introspect>::introspect(),
        4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <i64 as ::capnp::introspect::Introspect>::introspect(),
        8 => <crate::cereal::log_capnp::gps_location_data::SensorSource as ::capnp::introspect::Introspect>::introspect(),
        9 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        11 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        12 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        13 => <bool as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[3,11,5,0,13,6,1,2,8,4,12,7,9,10];
    pub const TYPE_ID: u64 = 0xe946_5248_59ad_d50e;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum SensorSource {
    Android = 0,
    IOS = 1,
    Car = 2,
    Velodyne = 3,
    Fusion = 4,
    External = 5,
    Ublox = 6,
    Trimble = 7,
    Qcomdiag = 8,
    Unicore = 9,
  }

  impl ::capnp::introspect::Introspect for SensorSource {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &sensor_source::ENCODED_NODE, annotation_types: sensor_source::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<SensorSource> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: SensorSource) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &sensor_source::ENCODED_NODE, annotation_types: sensor_source::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for SensorSource {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <SensorSource as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Android),
        1 => ::core::result::Result::Ok(Self::IOS),
        2 => ::core::result::Result::Ok(Self::Car),
        3 => ::core::result::Result::Ok(Self::Velodyne),
        4 => ::core::result::Result::Ok(Self::Fusion),
        5 => ::core::result::Result::Ok(Self::External),
        6 => ::core::result::Result::Ok(Self::Ublox),
        7 => ::core::result::Result::Ok(Self::Trimble),
        8 => ::core::result::Result::Ok(Self::Qcomdiag),
        9 => ::core::result::Result::Ok(Self::Unicore),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<SensorSource> for u16 {
    #[inline]
    fn from(x: SensorSource) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for SensorSource {
    const TYPE_ID: u64 = 0xd3ff_79f2_5c73_4863u64;
  }
  mod sensor_source {
  pub static ENCODED_NODE: [::capnp::Word; 62] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(99, 72, 115, 92, 242, 121, 255, 211),
    ::capnp::word(26, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(14, 213, 173, 89, 72, 82, 70, 233),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 58, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 247, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 71, 112, 115, 76, 111, 99),
    ::capnp::word(97, 116, 105, 111, 110, 68, 97, 116),
    ::capnp::word(97, 46, 83, 101, 110, 115, 111, 114),
    ::capnp::word(83, 111, 117, 114, 99, 101, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(40, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(113, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 110, 100, 114, 111, 105, 100, 0),
    ::capnp::word(105, 79, 83, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 0, 0, 0, 0, 0),
    ::capnp::word(118, 101, 108, 111, 100, 121, 110, 101),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 117, 115, 105, 111, 110, 0, 0),
    ::capnp::word(101, 120, 116, 101, 114, 110, 97, 108),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 98, 108, 111, 120, 0, 0, 0),
    ::capnp::word(116, 114, 105, 109, 98, 108, 101, 0),
    ::capnp::word(113, 99, 111, 109, 100, 105, 97, 103),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 105, 99, 111, 114, 101, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}

#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Desire {
  None = 0,
  TurnLeft = 1,
  TurnRight = 2,
  LaneChangeLeft = 3,
  LaneChangeRight = 4,
  KeepLeft = 5,
  KeepRight = 6,
}

impl ::capnp::introspect::Introspect for Desire {
  fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &desire::ENCODED_NODE, annotation_types: desire::get_annotation_types }).into() }
}
impl <'a> ::core::convert::From<Desire> for ::capnp::dynamic_value::Reader<'a> {
  fn from(e: Desire) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &desire::ENCODED_NODE, annotation_types: desire::get_annotation_types }.into()).into() }
}
impl ::core::convert::TryFrom<u16> for Desire {
  type Error = ::capnp::NotInSchema;
  fn try_from(value: u16) -> ::core::result::Result<Self, <Desire as ::core::convert::TryFrom<u16>>::Error> {
    match value {
      0 => ::core::result::Result::Ok(Self::None),
      1 => ::core::result::Result::Ok(Self::TurnLeft),
      2 => ::core::result::Result::Ok(Self::TurnRight),
      3 => ::core::result::Result::Ok(Self::LaneChangeLeft),
      4 => ::core::result::Result::Ok(Self::LaneChangeRight),
      5 => ::core::result::Result::Ok(Self::KeepLeft),
      6 => ::core::result::Result::Ok(Self::KeepRight),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl From<Desire> for u16 {
  #[inline]
  fn from(x: Desire) -> u16 { x as u16 }
}
impl ::capnp::traits::HasTypeId for Desire {
  const TYPE_ID: u64 = 0xae67_4a34_ba42_1466u64;
}
mod desire {
pub static ENCODED_NODE: [::capnp::Word; 51] = [
  ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
  ::capnp::word(102, 20, 66, 186, 52, 74, 103, 174),
  ::capnp::word(10, 0, 0, 0, 2, 0, 0, 0),
  ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 0, 0, 0, 138, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(25, 0, 0, 0, 175, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
  ::capnp::word(112, 58, 68, 101, 115, 105, 114, 101),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
  ::capnp::word(28, 0, 0, 0, 1, 0, 2, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(77, 0, 0, 0, 42, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(69, 0, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(65, 0, 0, 0, 82, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(61, 0, 0, 0, 122, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(57, 0, 0, 0, 130, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(53, 0, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(49, 0, 0, 0, 82, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
  ::capnp::word(116, 117, 114, 110, 76, 101, 102, 116),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(116, 117, 114, 110, 82, 105, 103, 104),
  ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
  ::capnp::word(103, 101, 76, 101, 102, 116, 0, 0),
  ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
  ::capnp::word(103, 101, 82, 105, 103, 104, 116, 0),
  ::capnp::word(107, 101, 101, 112, 76, 101, 102, 116),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(107, 101, 101, 112, 82, 105, 103, 104),
  ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
];
pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
  panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
}
}

#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum LaneChangeState {
  Off = 0,
  PreLaneChange = 1,
  LaneChangeStarting = 2,
  LaneChangeFinishing = 3,
}

impl ::capnp::introspect::Introspect for LaneChangeState {
  fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &lane_change_state::ENCODED_NODE, annotation_types: lane_change_state::get_annotation_types }).into() }
}
impl <'a> ::core::convert::From<LaneChangeState> for ::capnp::dynamic_value::Reader<'a> {
  fn from(e: LaneChangeState) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &lane_change_state::ENCODED_NODE, annotation_types: lane_change_state::get_annotation_types }.into()).into() }
}
impl ::core::convert::TryFrom<u16> for LaneChangeState {
  type Error = ::capnp::NotInSchema;
  fn try_from(value: u16) -> ::core::result::Result<Self, <LaneChangeState as ::core::convert::TryFrom<u16>>::Error> {
    match value {
      0 => ::core::result::Result::Ok(Self::Off),
      1 => ::core::result::Result::Ok(Self::PreLaneChange),
      2 => ::core::result::Result::Ok(Self::LaneChangeStarting),
      3 => ::core::result::Result::Ok(Self::LaneChangeFinishing),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl From<LaneChangeState> for u16 {
  #[inline]
  fn from(x: LaneChangeState) -> u16 { x as u16 }
}
impl ::capnp::traits::HasTypeId for LaneChangeState {
  const TYPE_ID: u64 = 0xcd37_924b_f7b2_d3d2u64;
}
mod lane_change_state {
pub static ENCODED_NODE: [::capnp::Word; 39] = [
  ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
  ::capnp::word(210, 211, 178, 247, 75, 146, 55, 205),
  ::capnp::word(10, 0, 0, 0, 2, 0, 0, 0),
  ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 0, 0, 0, 210, 0, 0, 0),
  ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 103, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
  ::capnp::word(112, 58, 76, 97, 110, 101, 67, 104),
  ::capnp::word(97, 110, 103, 101, 83, 116, 97, 116),
  ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
  ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(33, 0, 0, 0, 114, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 154, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 162, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(111, 102, 102, 0, 0, 0, 0, 0),
  ::capnp::word(112, 114, 101, 76, 97, 110, 101, 67),
  ::capnp::word(104, 97, 110, 103, 101, 0, 0, 0),
  ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
  ::capnp::word(103, 101, 83, 116, 97, 114, 116, 105),
  ::capnp::word(110, 103, 0, 0, 0, 0, 0, 0),
  ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
  ::capnp::word(103, 101, 70, 105, 110, 105, 115, 104),
  ::capnp::word(105, 110, 103, 0, 0, 0, 0, 0),
];
pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
  panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
}
}

#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum LaneChangeDirection {
  None = 0,
  Left = 1,
  Right = 2,
}

impl ::capnp::introspect::Introspect for LaneChangeDirection {
  fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &lane_change_direction::ENCODED_NODE, annotation_types: lane_change_direction::get_annotation_types }).into() }
}
impl <'a> ::core::convert::From<LaneChangeDirection> for ::capnp::dynamic_value::Reader<'a> {
  fn from(e: LaneChangeDirection) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &lane_change_direction::ENCODED_NODE, annotation_types: lane_change_direction::get_annotation_types }.into()).into() }
}
impl ::core::convert::TryFrom<u16> for LaneChangeDirection {
  type Error = ::capnp::NotInSchema;
  fn try_from(value: u16) -> ::core::result::Result<Self, <LaneChangeDirection as ::core::convert::TryFrom<u16>>::Error> {
    match value {
      0 => ::core::result::Result::Ok(Self::None),
      1 => ::core::result::Result::Ok(Self::Left),
      2 => ::core::result::Result::Ok(Self::Right),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl From<LaneChangeDirection> for u16 {
  #[inline]
  fn from(x: LaneChangeDirection) -> u16 { x as u16 }
}
impl ::capnp::traits::HasTypeId for LaneChangeDirection {
  const TYPE_ID: u64 = 0x9d0b_c0c1_fe67_1176u64;
}
mod lane_change_direction {
pub static ENCODED_NODE: [::capnp::Word; 30] = [
  ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
  ::capnp::word(118, 17, 103, 254, 193, 192, 11, 157),
  ::capnp::word(10, 0, 0, 0, 2, 0, 0, 0),
  ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
  ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 79, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
  ::capnp::word(112, 58, 76, 97, 110, 101, 67, 104),
  ::capnp::word(97, 110, 103, 101, 68, 105, 114, 101),
  ::capnp::word(99, 116, 105, 111, 110, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
  ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 42, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 0, 0, 0, 42, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(13, 0, 0, 0, 50, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
  ::capnp::word(108, 101, 102, 116, 0, 0, 0, 0),
  ::capnp::word(114, 105, 103, 104, 116, 0, 0, 0),
];
pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
  panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
}
}

pub mod can_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_address(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_bus_time(self) -> u16 {
      self.reader.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn get_dat(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_dat(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_src(self) -> u8 {
      self.reader.get_data_field::<u8>(6)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_address(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_address(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_bus_time(self) -> u16 {
      self.builder.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn set_bus_time(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(2, value);
    }
    #[inline]
    pub fn get_dat(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_dat(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_dat(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_dat(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_src(self) -> u8 {
      self.builder.get_data_field::<u8>(6)
    }
    #[inline]
    pub fn set_src(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(6, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 77] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(89, 124, 76, 150, 154, 0, 133, 135),
      ::capnp::word(10, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 231, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 110, 68, 97, 116),
      ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(112, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(97, 100, 100, 114, 101, 115, 115, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 117, 115, 84, 105, 109, 101, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 97, 116, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 114, 99, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        3 => <u8 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0,1,2,3];
    pub const TYPE_ID: u64 = 0x8785_009a_964c_7c59;
  }
}

pub mod device_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_cpu0_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.reader.get_data_field::<u16>(0)
    }
    #[inline]
    pub fn get_cpu1_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.reader.get_data_field::<u16>(1)
    }
    #[inline]
    pub fn get_cpu2_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.reader.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn get_cpu3_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.reader.get_data_field::<u16>(3)
    }
    #[inline]
    pub fn get_mem_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.reader.get_data_field::<u16>(4)
    }
    #[inline]
    pub fn get_gpu_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.reader.get_data_field::<u16>(5)
    }
    #[inline]
    pub fn get_bat_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
      self.reader.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn get_free_space_percent(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_battery_percent_d_e_p_r_e_c_a_t_e_d(self) -> i16 {
      self.reader.get_data_field::<i16>(10)
    }
    #[inline]
    pub fn get_battery_status_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_battery_status_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_fan_speed_percent_desired(self) -> u16 {
      self.reader.get_data_field::<u16>(11)
    }
    #[inline]
    pub fn get_started(self) -> bool {
      self.reader.get_bool_field(192)
    }
    #[inline]
    pub fn get_usb_online_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(193)
    }
    #[inline]
    pub fn get_started_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn get_thermal_status(self) -> ::core::result::Result<crate::cereal::log_capnp::device_state::ThermalStatus,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(13))
    }
    #[inline]
    pub fn get_battery_current_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.reader.get_data_field::<i32>(7)
    }
    #[inline]
    pub fn get_battery_voltage_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.reader.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn get_charging_error_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(194)
    }
    #[inline]
    pub fn get_charging_disabled_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(195)
    }
    #[inline]
    pub fn get_memory_usage_percent(self) -> i8 {
      self.reader.get_data_field::<i8>(25)
    }
    #[inline]
    pub fn get_cpu_usage_percent_d_e_p_r_e_c_a_t_e_d(self) -> i8 {
      self.reader.get_data_field::<i8>(44)
    }
    #[inline]
    pub fn get_pa0_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.reader.get_data_field::<u16>(23)
    }
    #[inline]
    pub fn get_network_type(self) -> ::core::result::Result<crate::cereal::log_capnp::device_state::NetworkType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(24))
    }
    #[inline]
    pub fn get_offroad_power_usage_uwh(self) -> u32 {
      self.reader.get_data_field::<u32>(13)
    }
    #[inline]
    pub fn get_network_strength(self) -> ::core::result::Result<crate::cereal::log_capnp::device_state::NetworkStrength,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(25))
    }
    #[inline]
    pub fn get_car_battery_capacity_uwh(self) -> u32 {
      self.reader.get_data_field::<u32>(14)
    }
    #[inline]
    pub fn get_cpu_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_cpu_temp_c(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_gpu_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_gpu_temp_c(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_memory_temp_c(self) -> f32 {
      self.reader.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn get_battery_temp_c_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn get_ambient_temp_c_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(17)
    }
    #[inline]
    pub fn get_network_info(self) -> ::capnp::Result<crate::cereal::log_capnp::device_state::network_info::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_network_info(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_last_athena_ping_time(self) -> u64 {
      self.reader.get_data_field::<u64>(9)
    }
    #[inline]
    pub fn get_gpu_usage_percent(self) -> i8 {
      self.reader.get_data_field::<i8>(45)
    }
    #[inline]
    pub fn get_cpu_usage_percent(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i8>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_cpu_usage_percent(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_nvme_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_nvme_temp_c(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_modem_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_modem_temp_c(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_screen_brightness_percent(self) -> i8 {
      self.reader.get_data_field::<i8>(80)
    }
    #[inline]
    pub fn get_thermal_zones(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::device_state::thermal_zone::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_thermal_zones(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_pmic_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_pmic_temp_c(&self) -> bool {
      !self.reader.get_pointer_field(8).is_null()
    }
    #[inline]
    pub fn get_power_draw_w(self) -> f32 {
      self.reader.get_data_field::<f32>(21)
    }
    #[inline]
    pub fn get_network_metered(self) -> bool {
      self.reader.get_bool_field(196)
    }
    #[inline]
    pub fn get_som_power_draw_w(self) -> f32 {
      self.reader.get_data_field::<f32>(22)
    }
    #[inline]
    pub fn get_network_stats(self) -> ::capnp::Result<crate::cereal::log_capnp::device_state::network_stats::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_network_stats(&self) -> bool {
      !self.reader.get_pointer_field(9).is_null()
    }
    #[inline]
    pub fn get_max_temp_c(self) -> f32 {
      self.reader.get_data_field::<f32>(23)
    }
    #[inline]
    pub fn get_device_type(self) -> ::core::result::Result<crate::cereal::log_capnp::init_data::DeviceType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(41))
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 12, pointers: 10 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_cpu0_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.builder.get_data_field::<u16>(0)
    }
    #[inline]
    pub fn set_cpu0_d_e_p_r_e_c_a_t_e_d(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(0, value);
    }
    #[inline]
    pub fn get_cpu1_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.builder.get_data_field::<u16>(1)
    }
    #[inline]
    pub fn set_cpu1_d_e_p_r_e_c_a_t_e_d(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(1, value);
    }
    #[inline]
    pub fn get_cpu2_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.builder.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn set_cpu2_d_e_p_r_e_c_a_t_e_d(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(2, value);
    }
    #[inline]
    pub fn get_cpu3_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.builder.get_data_field::<u16>(3)
    }
    #[inline]
    pub fn set_cpu3_d_e_p_r_e_c_a_t_e_d(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(3, value);
    }
    #[inline]
    pub fn get_mem_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.builder.get_data_field::<u16>(4)
    }
    #[inline]
    pub fn set_mem_d_e_p_r_e_c_a_t_e_d(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(4, value);
    }
    #[inline]
    pub fn get_gpu_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.builder.get_data_field::<u16>(5)
    }
    #[inline]
    pub fn set_gpu_d_e_p_r_e_c_a_t_e_d(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(5, value);
    }
    #[inline]
    pub fn get_bat_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
      self.builder.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn set_bat_d_e_p_r_e_c_a_t_e_d(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(3, value);
    }
    #[inline]
    pub fn get_free_space_percent(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_free_space_percent(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_battery_percent_d_e_p_r_e_c_a_t_e_d(self) -> i16 {
      self.builder.get_data_field::<i16>(10)
    }
    #[inline]
    pub fn set_battery_percent_d_e_p_r_e_c_a_t_e_d(&mut self, value: i16)  {
      self.builder.set_data_field::<i16>(10, value);
    }
    #[inline]
    pub fn get_battery_status_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_battery_status_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
    }
    #[inline]
    pub fn init_battery_status_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_battery_status_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_fan_speed_percent_desired(self) -> u16 {
      self.builder.get_data_field::<u16>(11)
    }
    #[inline]
    pub fn set_fan_speed_percent_desired(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(11, value);
    }
    #[inline]
    pub fn get_started(self) -> bool {
      self.builder.get_bool_field(192)
    }
    #[inline]
    pub fn set_started(&mut self, value: bool)  {
      self.builder.set_bool_field(192, value);
    }
    #[inline]
    pub fn get_usb_online_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(193)
    }
    #[inline]
    pub fn set_usb_online_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(193, value);
    }
    #[inline]
    pub fn get_started_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn set_started_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(4, value);
    }
    #[inline]
    pub fn get_thermal_status(self) -> ::core::result::Result<crate::cereal::log_capnp::device_state::ThermalStatus,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(13))
    }
    #[inline]
    pub fn set_thermal_status(&mut self, value: crate::cereal::log_capnp::device_state::ThermalStatus)  {
      self.builder.set_data_field::<u16>(13, value as u16);
    }
    #[inline]
    pub fn get_battery_current_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.builder.get_data_field::<i32>(7)
    }
    #[inline]
    pub fn set_battery_current_d_e_p_r_e_c_a_t_e_d(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(7, value);
    }
    #[inline]
    pub fn get_battery_voltage_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.builder.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn set_battery_voltage_d_e_p_r_e_c_a_t_e_d(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(10, value);
    }
    #[inline]
    pub fn get_charging_error_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(194)
    }
    #[inline]
    pub fn set_charging_error_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(194, value);
    }
    #[inline]
    pub fn get_charging_disabled_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(195)
    }
    #[inline]
    pub fn set_charging_disabled_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(195, value);
    }
    #[inline]
    pub fn get_memory_usage_percent(self) -> i8 {
      self.builder.get_data_field::<i8>(25)
    }
    #[inline]
    pub fn set_memory_usage_percent(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(25, value);
    }
    #[inline]
    pub fn get_cpu_usage_percent_d_e_p_r_e_c_a_t_e_d(self) -> i8 {
      self.builder.get_data_field::<i8>(44)
    }
    #[inline]
    pub fn set_cpu_usage_percent_d_e_p_r_e_c_a_t_e_d(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(44, value);
    }
    #[inline]
    pub fn get_pa0_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.builder.get_data_field::<u16>(23)
    }
    #[inline]
    pub fn set_pa0_d_e_p_r_e_c_a_t_e_d(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(23, value);
    }
    #[inline]
    pub fn get_network_type(self) -> ::core::result::Result<crate::cereal::log_capnp::device_state::NetworkType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(24))
    }
    #[inline]
    pub fn set_network_type(&mut self, value: crate::cereal::log_capnp::device_state::NetworkType)  {
      self.builder.set_data_field::<u16>(24, value as u16);
    }
    #[inline]
    pub fn get_offroad_power_usage_uwh(self) -> u32 {
      self.builder.get_data_field::<u32>(13)
    }
    #[inline]
    pub fn set_offroad_power_usage_uwh(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(13, value);
    }
    #[inline]
    pub fn get_network_strength(self) -> ::core::result::Result<crate::cereal::log_capnp::device_state::NetworkStrength,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(25))
    }
    #[inline]
    pub fn set_network_strength(&mut self, value: crate::cereal::log_capnp::device_state::NetworkStrength)  {
      self.builder.set_data_field::<u16>(25, value as u16);
    }
    #[inline]
    pub fn get_car_battery_capacity_uwh(self) -> u32 {
      self.builder.get_data_field::<u32>(14)
    }
    #[inline]
    pub fn set_car_battery_capacity_uwh(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(14, value);
    }
    #[inline]
    pub fn get_cpu_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_cpu_temp_c(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_cpu_temp_c(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_cpu_temp_c(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_gpu_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_gpu_temp_c(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_gpu_temp_c(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_gpu_temp_c(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_memory_temp_c(self) -> f32 {
      self.builder.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn set_memory_temp_c(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(15, value);
    }
    #[inline]
    pub fn get_battery_temp_c_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn set_battery_temp_c_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(16, value);
    }
    #[inline]
    pub fn get_ambient_temp_c_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(17)
    }
    #[inline]
    pub fn set_ambient_temp_c_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(17, value);
    }
    #[inline]
    pub fn get_network_info(self) -> ::capnp::Result<crate::cereal::log_capnp::device_state::network_info::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_network_info(&mut self, value: crate::cereal::log_capnp::device_state::network_info::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_network_info(self, ) -> crate::cereal::log_capnp::device_state::network_info::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    #[inline]
    pub fn has_network_info(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_last_athena_ping_time(self) -> u64 {
      self.builder.get_data_field::<u64>(9)
    }
    #[inline]
    pub fn set_last_athena_ping_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(9, value);
    }
    #[inline]
    pub fn get_gpu_usage_percent(self) -> i8 {
      self.builder.get_data_field::<i8>(45)
    }
    #[inline]
    pub fn set_gpu_usage_percent(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(45, value);
    }
    #[inline]
    pub fn get_cpu_usage_percent(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i8>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_cpu_usage_percent(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<i8>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_cpu_usage_percent(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i8> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_cpu_usage_percent(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_nvme_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_nvme_temp_c(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_nvme_temp_c(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_nvme_temp_c(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_modem_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_modem_temp_c(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_modem_temp_c(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    #[inline]
    pub fn has_modem_temp_c(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_screen_brightness_percent(self) -> i8 {
      self.builder.get_data_field::<i8>(80)
    }
    #[inline]
    pub fn set_screen_brightness_percent(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(80, value);
    }
    #[inline]
    pub fn get_thermal_zones(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::device_state::thermal_zone::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_thermal_zones(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::device_state::thermal_zone::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_thermal_zones(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::device_state::thermal_zone::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
    }
    #[inline]
    pub fn has_thermal_zones(&self) -> bool {
      !self.builder.is_pointer_field_null(7)
    }
    #[inline]
    pub fn get_pmic_temp_c(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_pmic_temp_c(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(8), value, false)
    }
    #[inline]
    pub fn init_pmic_temp_c(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(8), size)
    }
    #[inline]
    pub fn has_pmic_temp_c(&self) -> bool {
      !self.builder.is_pointer_field_null(8)
    }
    #[inline]
    pub fn get_power_draw_w(self) -> f32 {
      self.builder.get_data_field::<f32>(21)
    }
    #[inline]
    pub fn set_power_draw_w(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(21, value);
    }
    #[inline]
    pub fn get_network_metered(self) -> bool {
      self.builder.get_bool_field(196)
    }
    #[inline]
    pub fn set_network_metered(&mut self, value: bool)  {
      self.builder.set_bool_field(196, value);
    }
    #[inline]
    pub fn get_som_power_draw_w(self) -> f32 {
      self.builder.get_data_field::<f32>(22)
    }
    #[inline]
    pub fn set_som_power_draw_w(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(22, value);
    }
    #[inline]
    pub fn get_network_stats(self) -> ::capnp::Result<crate::cereal::log_capnp::device_state::network_stats::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_network_stats(&mut self, value: crate::cereal::log_capnp::device_state::network_stats::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false)
    }
    #[inline]
    pub fn init_network_stats(self, ) -> crate::cereal::log_capnp::device_state::network_stats::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(9), 0)
    }
    #[inline]
    pub fn has_network_stats(&self) -> bool {
      !self.builder.is_pointer_field_null(9)
    }
    #[inline]
    pub fn get_max_temp_c(self) -> f32 {
      self.builder.get_data_field::<f32>(23)
    }
    #[inline]
    pub fn set_max_temp_c(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(23, value);
    }
    #[inline]
    pub fn get_device_type(self) -> ::core::result::Result<crate::cereal::log_capnp::init_data::DeviceType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(41))
    }
    #[inline]
    pub fn set_device_type(&mut self, value: crate::cereal::log_capnp::init_data::DeviceType)  {
      self.builder.set_data_field::<u16>(41, value as u16);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_network_info(&self) -> crate::cereal::log_capnp::device_state::network_info::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
    pub fn get_network_stats(&self) -> crate::cereal::log_capnp::device_state::network_stats::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(9))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 826] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(235, 146, 164, 42, 175, 181, 216, 164),
      ::capnp::word(10, 0, 0, 0, 1, 0, 12, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(10, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 178, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 103, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 0, 0, 0, 23, 10, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 68, 101, 118, 105, 99, 101),
      ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
      ::capnp::word(24, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(111, 246, 61, 133, 41, 0, 121, 208),
      ::capnp::word(41, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(126, 247, 84, 194, 16, 113, 15, 175),
      ::capnp::word(41, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(157, 4, 209, 88, 201, 156, 199, 187),
      ::capnp::word(41, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(19, 62, 32, 19, 138, 140, 48, 221),
      ::capnp::word(41, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(252, 74, 192, 130, 45, 83, 87, 157),
      ::capnp::word(41, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(160, 142, 137, 39, 234, 100, 140, 185),
      ::capnp::word(41, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(84, 104, 101, 114, 109, 97, 108, 90),
      ::capnp::word(111, 110, 101, 0, 0, 0, 0, 0),
      ::capnp::word(84, 104, 101, 114, 109, 97, 108, 83),
      ::capnp::word(116, 97, 116, 117, 115, 0, 0, 0),
      ::capnp::word(78, 101, 116, 119, 111, 114, 107, 84),
      ::capnp::word(121, 112, 101, 0, 0, 0, 0, 0),
      ::capnp::word(78, 101, 116, 119, 111, 114, 107, 83),
      ::capnp::word(116, 114, 101, 110, 103, 116, 104, 0),
      ::capnp::word(78, 101, 116, 119, 111, 114, 107, 73),
      ::capnp::word(110, 102, 111, 0, 0, 0, 0, 0),
      ::capnp::word(78, 101, 116, 119, 111, 114, 107, 83),
      ::capnp::word(116, 97, 116, 115, 0, 0, 0, 0),
      ::capnp::word(184, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(28, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 4, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(29, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 5, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(30, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 5, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(31, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 5, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(32, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 5, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(33, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 5, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(34, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 5, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 5, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(40, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 5, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(37, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 5, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 5, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 192, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 5, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(44, 0, 0, 0, 193, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 5, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 5, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 5, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 5, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(38, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 5, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(42, 0, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 5, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(43, 0, 0, 0, 195, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 5, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 5, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(36, 0, 0, 0, 44, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 5, 0, 0, 210, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(35, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 5, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 5, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 5, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 5, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 6, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 6, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 6, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 6, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(39, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 6, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(45, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 6, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 6, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 6, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 45, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 6, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(124, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 6, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 35, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 6, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 36, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 6, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(27, 0, 0, 0, 80, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 37, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 6, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 38, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 6, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 39, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 6, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 40, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 6, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 196, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 41, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 7, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 7, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 43, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 7, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 44, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 7, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 41, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 45, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 7, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(99, 112, 117, 48, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 112, 117, 49, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 112, 117, 50, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 112, 117, 51, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 101, 109, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 117, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 97, 116, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 101, 101, 83, 112, 97, 99),
      ::capnp::word(101, 80, 101, 114, 99, 101, 110, 116),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 97, 116, 116, 101, 114, 121, 80),
      ::capnp::word(101, 114, 99, 101, 110, 116, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 97, 116, 116, 101, 114, 121, 83),
      ::capnp::word(116, 97, 116, 117, 115, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 110, 83, 112, 101, 101, 100),
      ::capnp::word(80, 101, 114, 99, 101, 110, 116, 68),
      ::capnp::word(101, 115, 105, 114, 101, 100, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 114, 116, 101, 100, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 115, 98, 79, 110, 108, 105, 110),
      ::capnp::word(101, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 114, 116, 101, 100, 77),
      ::capnp::word(111, 110, 111, 84, 105, 109, 101, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 104, 101, 114, 109, 97, 108, 83),
      ::capnp::word(116, 97, 116, 117, 115, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(126, 247, 84, 194, 16, 113, 15, 175),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 97, 116, 116, 101, 114, 121, 67),
      ::capnp::word(117, 114, 114, 101, 110, 116, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 97, 116, 116, 101, 114, 121, 86),
      ::capnp::word(111, 108, 116, 97, 103, 101, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 104, 97, 114, 103, 105, 110, 103),
      ::capnp::word(69, 114, 114, 111, 114, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 104, 97, 114, 103, 105, 110, 103),
      ::capnp::word(68, 105, 115, 97, 98, 108, 101, 100),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 101, 109, 111, 114, 121, 85, 115),
      ::capnp::word(97, 103, 101, 80, 101, 114, 99, 101),
      ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 112, 117, 85, 115, 97, 103, 101),
      ::capnp::word(80, 101, 114, 99, 101, 110, 116, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 48, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 101, 116, 119, 111, 114, 107, 84),
      ::capnp::word(121, 112, 101, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 4, 209, 88, 201, 156, 199, 187),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 102, 102, 114, 111, 97, 100, 80),
      ::capnp::word(111, 119, 101, 114, 85, 115, 97, 103),
      ::capnp::word(101, 85, 119, 104, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 101, 116, 119, 111, 114, 107, 83),
      ::capnp::word(116, 114, 101, 110, 103, 116, 104, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(19, 62, 32, 19, 138, 140, 48, 221),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 66, 97, 116, 116, 101),
      ::capnp::word(114, 121, 67, 97, 112, 97, 99, 105),
      ::capnp::word(116, 121, 85, 119, 104, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 112, 117, 84, 101, 109, 112, 67),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 117, 84, 101, 109, 112, 67),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 101, 109, 111, 114, 121, 84, 101),
      ::capnp::word(109, 112, 67, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 97, 116, 116, 101, 114, 121, 84),
      ::capnp::word(101, 109, 112, 67, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 109, 98, 105, 101, 110, 116, 84),
      ::capnp::word(101, 109, 112, 67, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 101, 116, 119, 111, 114, 107, 73),
      ::capnp::word(110, 102, 111, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 74, 192, 130, 45, 83, 87, 157),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 115, 116, 65, 116, 104, 101),
      ::capnp::word(110, 97, 80, 105, 110, 103, 84, 105),
      ::capnp::word(109, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 117, 85, 115, 97, 103, 101),
      ::capnp::word(80, 101, 114, 99, 101, 110, 116, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 112, 117, 85, 115, 97, 103, 101),
      ::capnp::word(80, 101, 114, 99, 101, 110, 116, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 118, 109, 101, 84, 101, 109, 112),
      ::capnp::word(67, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 109, 84, 101, 109),
      ::capnp::word(112, 67, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 99, 114, 101, 101, 110, 66, 114),
      ::capnp::word(105, 103, 104, 116, 110, 101, 115, 115),
      ::capnp::word(80, 101, 114, 99, 101, 110, 116, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 104, 101, 114, 109, 97, 108, 90),
      ::capnp::word(111, 110, 101, 115, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 246, 61, 133, 41, 0, 121, 208),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 109, 105, 99, 84, 101, 109, 112),
      ::capnp::word(67, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 119, 101, 114, 68, 114, 97),
      ::capnp::word(119, 87, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 101, 116, 119, 111, 114, 107, 77),
      ::capnp::word(101, 116, 101, 114, 101, 100, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 109, 80, 111, 119, 101, 114),
      ::capnp::word(68, 114, 97, 119, 87, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 101, 116, 119, 111, 114, 107, 83),
      ::capnp::word(116, 97, 116, 115, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 142, 137, 39, 234, 100, 140, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 120, 84, 101, 109, 112, 67),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 118, 105, 99, 101, 84, 121),
      ::capnp::word(112, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 102, 168, 235, 56, 114, 93, 157),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        2 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        3 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        4 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        5 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        6 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <i16 as ::capnp::introspect::Introspect>::introspect(),
        9 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        10 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        11 => <bool as ::capnp::introspect::Introspect>::introspect(),
        12 => <bool as ::capnp::introspect::Introspect>::introspect(),
        13 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        14 => <crate::cereal::log_capnp::device_state::ThermalStatus as ::capnp::introspect::Introspect>::introspect(),
        15 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        16 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        17 => <bool as ::capnp::introspect::Introspect>::introspect(),
        18 => <bool as ::capnp::introspect::Introspect>::introspect(),
        19 => <i8 as ::capnp::introspect::Introspect>::introspect(),
        20 => <i8 as ::capnp::introspect::Introspect>::introspect(),
        21 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        22 => <crate::cereal::log_capnp::device_state::NetworkType as ::capnp::introspect::Introspect>::introspect(),
        23 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        24 => <crate::cereal::log_capnp::device_state::NetworkStrength as ::capnp::introspect::Introspect>::introspect(),
        25 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        26 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        27 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        28 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        29 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        30 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        31 => <crate::cereal::log_capnp::device_state::network_info::Owned as ::capnp::introspect::Introspect>::introspect(),
        32 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        33 => <i8 as ::capnp::introspect::Introspect>::introspect(),
        34 => <::capnp::primitive_list::Owned<i8> as ::capnp::introspect::Introspect>::introspect(),
        35 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        36 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        37 => <i8 as ::capnp::introspect::Introspect>::introspect(),
        38 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::device_state::thermal_zone::Owned> as ::capnp::introspect::Introspect>::introspect(),
        39 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        40 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        41 => <bool as ::capnp::introspect::Introspect>::introspect(),
        42 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        43 => <crate::cereal::log_capnp::device_state::network_stats::Owned as ::capnp::introspect::Introspect>::introspect(),
        44 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        45 => <crate::cereal::log_capnp::init_data::DeviceType as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[30,6,15,8,9,29,16,25,18,17,0,1,2,3,26,34,20,45,10,7,5,27,33,32,44,4,28,19,36,31,41,43,24,22,35,23,21,39,40,37,42,11,13,14,38,12];
    pub const TYPE_ID: u64 = 0xa4d8_b5af_2aa4_92eb;
  }

  pub mod thermal_zone {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_temp(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 1 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_name(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
      }
      #[inline]
      pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_temp(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_temp(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 49] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(111, 246, 61, 133, 41, 0, 121, 208),
        ::capnp::word(22, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(235, 146, 164, 42, 175, 181, 216, 164),
        ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 68, 101, 118, 105, 99, 101),
        ::capnp::word(83, 116, 97, 116, 101, 46, 84, 104),
        ::capnp::word(101, 114, 109, 97, 108, 90, 111, 110),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 101, 109, 112, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
      pub const TYPE_ID: u64 = 0xd079_0029_853d_f66f;
    }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum ThermalStatus {
    Green = 0,
    Yellow = 1,
    Red = 2,
    Danger = 3,
  }

  impl ::capnp::introspect::Introspect for ThermalStatus {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &thermal_status::ENCODED_NODE, annotation_types: thermal_status::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<ThermalStatus> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: ThermalStatus) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &thermal_status::ENCODED_NODE, annotation_types: thermal_status::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for ThermalStatus {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <ThermalStatus as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Green),
        1 => ::core::result::Result::Ok(Self::Yellow),
        2 => ::core::result::Result::Ok(Self::Red),
        3 => ::core::result::Result::Ok(Self::Danger),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<ThermalStatus> for u16 {
    #[inline]
    fn from(x: ThermalStatus) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for ThermalStatus {
    const TYPE_ID: u64 = 0xaf0f_7110_c254_f77eu64;
  }
  mod thermal_status {
  pub static ENCODED_NODE: [::capnp::Word; 35] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(126, 247, 84, 194, 16, 113, 15, 175),
    ::capnp::word(22, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(235, 146, 164, 42, 175, 181, 216, 164),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 34, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 68, 101, 118, 105, 99, 101),
    ::capnp::word(83, 116, 97, 116, 101, 46, 84, 104),
    ::capnp::word(101, 114, 109, 97, 108, 83, 116, 97),
    ::capnp::word(116, 117, 115, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 114, 101, 101, 110, 0, 0, 0),
    ::capnp::word(121, 101, 108, 108, 111, 119, 0, 0),
    ::capnp::word(114, 101, 100, 0, 0, 0, 0, 0),
    ::capnp::word(100, 97, 110, 103, 101, 114, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum NetworkType {
    None = 0,
    Wifi = 1,
    Cell2G = 2,
    Cell3G = 3,
    Cell4G = 4,
    Cell5G = 5,
    Ethernet = 6,
  }

  impl ::capnp::introspect::Introspect for NetworkType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &network_type::ENCODED_NODE, annotation_types: network_type::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<NetworkType> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: NetworkType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &network_type::ENCODED_NODE, annotation_types: network_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for NetworkType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <NetworkType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::None),
        1 => ::core::result::Result::Ok(Self::Wifi),
        2 => ::core::result::Result::Ok(Self::Cell2G),
        3 => ::core::result::Result::Ok(Self::Cell3G),
        4 => ::core::result::Result::Ok(Self::Cell4G),
        5 => ::core::result::Result::Ok(Self::Cell5G),
        6 => ::core::result::Result::Ok(Self::Ethernet),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<NetworkType> for u16 {
    #[inline]
    fn from(x: NetworkType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for NetworkType {
    const TYPE_ID: u64 = 0xbbc7_9cc9_58d1_049du64;
  }
  mod network_type {
  pub static ENCODED_NODE: [::capnp::Word; 48] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(157, 4, 209, 88, 201, 156, 199, 187),
    ::capnp::word(22, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(235, 146, 164, 42, 175, 181, 216, 164),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 175, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 68, 101, 118, 105, 99, 101),
    ::capnp::word(83, 116, 97, 116, 101, 46, 78, 101),
    ::capnp::word(116, 119, 111, 114, 107, 84, 121, 112),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(28, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
    ::capnp::word(119, 105, 102, 105, 0, 0, 0, 0),
    ::capnp::word(99, 101, 108, 108, 50, 71, 0, 0),
    ::capnp::word(99, 101, 108, 108, 51, 71, 0, 0),
    ::capnp::word(99, 101, 108, 108, 52, 71, 0, 0),
    ::capnp::word(99, 101, 108, 108, 53, 71, 0, 0),
    ::capnp::word(101, 116, 104, 101, 114, 110, 101, 116),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum NetworkStrength {
    Unknown = 0,
    Poor = 1,
    Moderate = 2,
    Good = 3,
    Great = 4,
  }

  impl ::capnp::introspect::Introspect for NetworkStrength {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &network_strength::ENCODED_NODE, annotation_types: network_strength::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<NetworkStrength> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: NetworkStrength) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &network_strength::ENCODED_NODE, annotation_types: network_strength::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for NetworkStrength {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <NetworkStrength as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Unknown),
        1 => ::core::result::Result::Ok(Self::Poor),
        2 => ::core::result::Result::Ok(Self::Moderate),
        3 => ::core::result::Result::Ok(Self::Good),
        4 => ::core::result::Result::Ok(Self::Great),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<NetworkStrength> for u16 {
    #[inline]
    fn from(x: NetworkStrength) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for NetworkStrength {
    const TYPE_ID: u64 = 0xdd30_8c8a_1320_3e13u64;
  }
  mod network_strength {
  pub static ENCODED_NODE: [::capnp::Word; 40] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(19, 62, 32, 19, 138, 140, 48, 221),
    ::capnp::word(22, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(235, 146, 164, 42, 175, 181, 216, 164),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 50, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 127, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 68, 101, 118, 105, 99, 101),
    ::capnp::word(83, 116, 97, 116, 101, 46, 78, 101),
    ::capnp::word(116, 119, 111, 114, 107, 83, 116, 114),
    ::capnp::word(101, 110, 103, 116, 104, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
    ::capnp::word(112, 111, 111, 114, 0, 0, 0, 0),
    ::capnp::word(109, 111, 100, 101, 114, 97, 116, 101),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 111, 111, 100, 0, 0, 0, 0),
    ::capnp::word(103, 114, 101, 97, 116, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod network_info {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_technology(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_technology(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_operator(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_operator(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_band(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_band(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_channel(self) -> u16 {
        self.reader.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn get_extra(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_extra(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_state(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_state(&self) -> bool {
        !self.reader.get_pointer_field(4).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 5 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_technology(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_technology(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
      }
      #[inline]
      pub fn init_technology(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_technology(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_operator(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_operator(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
      }
      #[inline]
      pub fn init_operator(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      #[inline]
      pub fn has_operator(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_band(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_band(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
      }
      #[inline]
      pub fn init_band(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      #[inline]
      pub fn has_band(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_channel(self) -> u16 {
        self.builder.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn set_channel(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(0, value);
      }
      #[inline]
      pub fn get_extra(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_extra(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false).unwrap()
      }
      #[inline]
      pub fn init_extra(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(3).init_text(size)
      }
      #[inline]
      pub fn has_extra(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_state(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_state(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false).unwrap()
      }
      #[inline]
      pub fn init_state(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(4).init_text(size)
      }
      #[inline]
      pub fn has_state(&self) -> bool {
        !self.builder.is_pointer_field_null(4)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 111] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(252, 74, 192, 130, 45, 83, 87, 157),
        ::capnp::word(22, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(235, 146, 164, 42, 175, 181, 216, 164),
        ::capnp::word(5, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 87, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 68, 101, 118, 105, 99, 101),
        ::capnp::word(83, 116, 97, 116, 101, 46, 78, 101),
        ::capnp::word(116, 119, 111, 114, 107, 73, 110, 102),
        ::capnp::word(111, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(24, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(153, 0, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(176, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(173, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(116, 101, 99, 104, 110, 111, 108, 111),
        ::capnp::word(103, 121, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 112, 101, 114, 97, 116, 111, 114),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 97, 110, 100, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 104, 97, 110, 110, 101, 108, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 120, 116, 114, 97, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 97, 116, 101, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          3 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[2,3,4,1,5,0];
      pub const TYPE_ID: u64 = 0x9d57_532d_82c0_4afc;
    }
  }

  pub mod network_stats {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_wwan_tx(self) -> i64 {
        self.reader.get_data_field::<i64>(0)
      }
      #[inline]
      pub fn get_wwan_rx(self) -> i64 {
        self.reader.get_data_field::<i64>(1)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_wwan_tx(self) -> i64 {
        self.builder.get_data_field::<i64>(0)
      }
      #[inline]
      pub fn set_wwan_tx(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(0, value);
      }
      #[inline]
      pub fn get_wwan_rx(self) -> i64 {
        self.builder.get_data_field::<i64>(1)
      }
      #[inline]
      pub fn set_wwan_rx(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(1, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 49] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(160, 142, 137, 39, 234, 100, 140, 185),
        ::capnp::word(22, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(235, 146, 164, 42, 175, 181, 216, 164),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 26, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 68, 101, 118, 105, 99, 101),
        ::capnp::word(83, 116, 97, 116, 101, 46, 78, 101),
        ::capnp::word(116, 119, 111, 114, 107, 83, 116, 97),
        ::capnp::word(116, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(119, 119, 97, 110, 84, 120, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(119, 119, 97, 110, 82, 120, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <i64 as ::capnp::introspect::Introspect>::introspect(),
          1 => <i64 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,0];
      pub const TYPE_ID: u64 = 0xb98c_64ea_2789_8ea0;
    }
  }
}

pub mod panda_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_voltage(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_current(self) -> u32 {
      self.reader.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn get_ignition_line(self) -> bool {
      self.reader.get_bool_field(64)
    }
    #[inline]
    pub fn get_controls_allowed(self) -> bool {
      self.reader.get_bool_field(65)
    }
    #[inline]
    pub fn get_gas_interceptor_detected_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(66)
    }
    #[inline]
    pub fn get_started_signal_detected_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(67)
    }
    #[inline]
    pub fn get_has_gps_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(68)
    }
    #[inline]
    pub fn get_rx_buffer_overflow(self) -> u32 {
      self.reader.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn get_tx_buffer_overflow(self) -> u32 {
      self.reader.get_data_field::<u32>(4)
    }
    #[inline]
    pub fn get_gmlan_send_errs_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
      self.reader.get_data_field::<u32>(5)
    }
    #[inline]
    pub fn get_panda_type(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::PandaType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(5))
    }
    #[inline]
    pub fn get_fan_speed_rpm_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.reader.get_data_field::<u16>(12)
    }
    #[inline]
    pub fn get_usb_power_mode_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::log_capnp::peripheral_state::UsbPowerModeDEPRECATED,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(13))
    }
    #[inline]
    pub fn get_ignition_can(self) -> bool {
      self.reader.get_bool_field(69)
    }
    #[inline]
    pub fn get_safety_model(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SafetyModel,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(14))
    }
    #[inline]
    pub fn get_fault_status(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::FaultStatus,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(15))
    }
    #[inline]
    pub fn get_power_save_enabled(self) -> bool {
      self.reader.get_bool_field(70)
    }
    #[inline]
    pub fn get_uptime(self) -> u32 {
      self.reader.get_data_field::<u32>(8)
    }
    #[inline]
    pub fn get_faults(self) -> ::capnp::Result<::capnp::enum_list::Reader<'a,crate::cereal::log_capnp::panda_state::FaultType>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_faults(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_safety_rx_invalid(self) -> u32 {
      self.reader.get_data_field::<u32>(9)
    }
    #[inline]
    pub fn get_safety_param_d_e_p_r_e_c_a_t_e_d(self) -> i16 {
      self.reader.get_data_field::<i16>(20)
    }
    #[inline]
    pub fn get_harness_status(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::HarnessStatus,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(21))
    }
    #[inline]
    pub fn get_heartbeat_lost(self) -> bool {
      self.reader.get_bool_field(71)
    }
    #[inline]
    pub fn get_alternative_experience(self) -> i16 {
      self.reader.get_data_field::<i16>(22)
    }
    #[inline]
    pub fn get_safety_tx_blocked(self) -> u32 {
      self.reader.get_data_field::<u32>(12)
    }
    #[inline]
    pub fn get_interrupt_load(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_safety_param2_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
      self.reader.get_data_field::<u32>(14)
    }
    #[inline]
    pub fn get_safety_param(self) -> u16 {
      self.reader.get_data_field::<u16>(23)
    }
    #[inline]
    pub fn get_fan_power(self) -> u8 {
      self.reader.get_data_field::<u8>(9)
    }
    #[inline]
    pub fn get_can_state0(self) -> ::capnp::Result<crate::cereal::log_capnp::panda_state::panda_can_state::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_can_state0(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_can_state1(self) -> ::capnp::Result<crate::cereal::log_capnp::panda_state::panda_can_state::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_can_state1(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_can_state2(self) -> ::capnp::Result<crate::cereal::log_capnp::panda_state::panda_can_state::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_can_state2(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_safety_rx_checks_invalid(self) -> bool {
      self.reader.get_bool_field(480)
    }
    #[inline]
    pub fn get_spi_checksum_error_count(self) -> u16 {
      self.reader.get_data_field::<u16>(31)
    }
    #[inline]
    pub fn get_fan_stall_count(self) -> u8 {
      self.reader.get_data_field::<u8>(61)
    }
    #[inline]
    pub fn get_sbu1_voltage(self) -> f32 {
      self.reader.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn get_sbu2_voltage(self) -> f32 {
      self.reader.get_data_field::<f32>(17)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 9, pointers: 4 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_voltage(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_voltage(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_current(self) -> u32 {
      self.builder.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn set_current(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn get_ignition_line(self) -> bool {
      self.builder.get_bool_field(64)
    }
    #[inline]
    pub fn set_ignition_line(&mut self, value: bool)  {
      self.builder.set_bool_field(64, value);
    }
    #[inline]
    pub fn get_controls_allowed(self) -> bool {
      self.builder.get_bool_field(65)
    }
    #[inline]
    pub fn set_controls_allowed(&mut self, value: bool)  {
      self.builder.set_bool_field(65, value);
    }
    #[inline]
    pub fn get_gas_interceptor_detected_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(66)
    }
    #[inline]
    pub fn set_gas_interceptor_detected_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(66, value);
    }
    #[inline]
    pub fn get_started_signal_detected_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(67)
    }
    #[inline]
    pub fn set_started_signal_detected_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(67, value);
    }
    #[inline]
    pub fn get_has_gps_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(68)
    }
    #[inline]
    pub fn set_has_gps_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(68, value);
    }
    #[inline]
    pub fn get_rx_buffer_overflow(self) -> u32 {
      self.builder.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn set_rx_buffer_overflow(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(3, value);
    }
    #[inline]
    pub fn get_tx_buffer_overflow(self) -> u32 {
      self.builder.get_data_field::<u32>(4)
    }
    #[inline]
    pub fn set_tx_buffer_overflow(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(4, value);
    }
    #[inline]
    pub fn get_gmlan_send_errs_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
      self.builder.get_data_field::<u32>(5)
    }
    #[inline]
    pub fn set_gmlan_send_errs_d_e_p_r_e_c_a_t_e_d(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(5, value);
    }
    #[inline]
    pub fn get_panda_type(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::PandaType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(5))
    }
    #[inline]
    pub fn set_panda_type(&mut self, value: crate::cereal::log_capnp::panda_state::PandaType)  {
      self.builder.set_data_field::<u16>(5, value as u16);
    }
    #[inline]
    pub fn get_fan_speed_rpm_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
      self.builder.get_data_field::<u16>(12)
    }
    #[inline]
    pub fn set_fan_speed_rpm_d_e_p_r_e_c_a_t_e_d(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(12, value);
    }
    #[inline]
    pub fn get_usb_power_mode_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::log_capnp::peripheral_state::UsbPowerModeDEPRECATED,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(13))
    }
    #[inline]
    pub fn set_usb_power_mode_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::peripheral_state::UsbPowerModeDEPRECATED)  {
      self.builder.set_data_field::<u16>(13, value as u16);
    }
    #[inline]
    pub fn get_ignition_can(self) -> bool {
      self.builder.get_bool_field(69)
    }
    #[inline]
    pub fn set_ignition_can(&mut self, value: bool)  {
      self.builder.set_bool_field(69, value);
    }
    #[inline]
    pub fn get_safety_model(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SafetyModel,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(14))
    }
    #[inline]
    pub fn set_safety_model(&mut self, value: crate::cereal::car_capnp::car_params::SafetyModel)  {
      self.builder.set_data_field::<u16>(14, value as u16);
    }
    #[inline]
    pub fn get_fault_status(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::FaultStatus,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(15))
    }
    #[inline]
    pub fn set_fault_status(&mut self, value: crate::cereal::log_capnp::panda_state::FaultStatus)  {
      self.builder.set_data_field::<u16>(15, value as u16);
    }
    #[inline]
    pub fn get_power_save_enabled(self) -> bool {
      self.builder.get_bool_field(70)
    }
    #[inline]
    pub fn set_power_save_enabled(&mut self, value: bool)  {
      self.builder.set_bool_field(70, value);
    }
    #[inline]
    pub fn get_uptime(self) -> u32 {
      self.builder.get_data_field::<u32>(8)
    }
    #[inline]
    pub fn set_uptime(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(8, value);
    }
    #[inline]
    pub fn get_faults(self) -> ::capnp::Result<::capnp::enum_list::Builder<'a,crate::cereal::log_capnp::panda_state::FaultType>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_faults(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::enum_list::Owned<crate::cereal::log_capnp::panda_state::FaultType>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_faults(self, size: u32) -> ::capnp::enum_list::Builder<'a,crate::cereal::log_capnp::panda_state::FaultType> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_faults(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_safety_rx_invalid(self) -> u32 {
      self.builder.get_data_field::<u32>(9)
    }
    #[inline]
    pub fn set_safety_rx_invalid(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(9, value);
    }
    #[inline]
    pub fn get_safety_param_d_e_p_r_e_c_a_t_e_d(self) -> i16 {
      self.builder.get_data_field::<i16>(20)
    }
    #[inline]
    pub fn set_safety_param_d_e_p_r_e_c_a_t_e_d(&mut self, value: i16)  {
      self.builder.set_data_field::<i16>(20, value);
    }
    #[inline]
    pub fn get_harness_status(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::HarnessStatus,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(21))
    }
    #[inline]
    pub fn set_harness_status(&mut self, value: crate::cereal::log_capnp::panda_state::HarnessStatus)  {
      self.builder.set_data_field::<u16>(21, value as u16);
    }
    #[inline]
    pub fn get_heartbeat_lost(self) -> bool {
      self.builder.get_bool_field(71)
    }
    #[inline]
    pub fn set_heartbeat_lost(&mut self, value: bool)  {
      self.builder.set_bool_field(71, value);
    }
    #[inline]
    pub fn get_alternative_experience(self) -> i16 {
      self.builder.get_data_field::<i16>(22)
    }
    #[inline]
    pub fn set_alternative_experience(&mut self, value: i16)  {
      self.builder.set_data_field::<i16>(22, value);
    }
    #[inline]
    pub fn get_safety_tx_blocked(self) -> u32 {
      self.builder.get_data_field::<u32>(12)
    }
    #[inline]
    pub fn set_safety_tx_blocked(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(12, value);
    }
    #[inline]
    pub fn get_interrupt_load(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_interrupt_load(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_safety_param2_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
      self.builder.get_data_field::<u32>(14)
    }
    #[inline]
    pub fn set_safety_param2_d_e_p_r_e_c_a_t_e_d(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(14, value);
    }
    #[inline]
    pub fn get_safety_param(self) -> u16 {
      self.builder.get_data_field::<u16>(23)
    }
    #[inline]
    pub fn set_safety_param(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(23, value);
    }
    #[inline]
    pub fn get_fan_power(self) -> u8 {
      self.builder.get_data_field::<u8>(9)
    }
    #[inline]
    pub fn set_fan_power(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(9, value);
    }
    #[inline]
    pub fn get_can_state0(self) -> ::capnp::Result<crate::cereal::log_capnp::panda_state::panda_can_state::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_can_state0(&mut self, value: crate::cereal::log_capnp::panda_state::panda_can_state::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_can_state0(self, ) -> crate::cereal::log_capnp::panda_state::panda_can_state::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_can_state0(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_can_state1(self) -> ::capnp::Result<crate::cereal::log_capnp::panda_state::panda_can_state::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_can_state1(&mut self, value: crate::cereal::log_capnp::panda_state::panda_can_state::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_can_state1(self, ) -> crate::cereal::log_capnp::panda_state::panda_can_state::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    #[inline]
    pub fn has_can_state1(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_can_state2(self) -> ::capnp::Result<crate::cereal::log_capnp::panda_state::panda_can_state::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_can_state2(&mut self, value: crate::cereal::log_capnp::panda_state::panda_can_state::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_can_state2(self, ) -> crate::cereal::log_capnp::panda_state::panda_can_state::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    #[inline]
    pub fn has_can_state2(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_safety_rx_checks_invalid(self) -> bool {
      self.builder.get_bool_field(480)
    }
    #[inline]
    pub fn set_safety_rx_checks_invalid(&mut self, value: bool)  {
      self.builder.set_bool_field(480, value);
    }
    #[inline]
    pub fn get_spi_checksum_error_count(self) -> u16 {
      self.builder.get_data_field::<u16>(31)
    }
    #[inline]
    pub fn set_spi_checksum_error_count(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(31, value);
    }
    #[inline]
    pub fn get_fan_stall_count(self) -> u8 {
      self.builder.get_data_field::<u8>(61)
    }
    #[inline]
    pub fn set_fan_stall_count(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(61, value);
    }
    #[inline]
    pub fn get_sbu1_voltage(self) -> f32 {
      self.builder.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn set_sbu1_voltage(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(16, value);
    }
    #[inline]
    pub fn get_sbu2_voltage(self) -> f32 {
      self.builder.get_data_field::<f32>(17)
    }
    #[inline]
    pub fn set_sbu2_voltage(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(17, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_can_state0(&self) -> crate::cereal::log_capnp::panda_state::panda_can_state::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_can_state1(&self) -> crate::cereal::log_capnp::panda_state::panda_can_state::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
    pub fn get_can_state2(&self) -> crate::cereal::log_capnp::panda_state::panda_can_state::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 646] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(30, 89, 228, 117, 37, 158, 100, 167),
      ::capnp::word(10, 0, 0, 0, 1, 0, 9, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(4, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 170, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 87, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 0, 0, 0, 31, 8, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 80, 97, 110, 100, 97, 83),
      ::capnp::word(116, 97, 116, 101, 0, 0, 0, 0),
      ::capnp::word(20, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(187, 173, 201, 10, 139, 11, 253, 242),
      ::capnp::word(33, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(152, 151, 36, 105, 127, 192, 85, 205),
      ::capnp::word(33, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(81, 55, 91, 62, 249, 173, 88, 138),
      ::capnp::word(33, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(191, 129, 192, 232, 209, 62, 154, 246),
      ::capnp::word(33, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(92, 212, 12, 235, 45, 151, 210, 248),
      ::capnp::word(33, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(70, 97, 117, 108, 116, 83, 116, 97),
      ::capnp::word(116, 117, 115, 0, 0, 0, 0, 0),
      ::capnp::word(70, 97, 117, 108, 116, 84, 121, 112),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 97, 110, 100, 97, 84, 121, 112),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 97, 114, 110, 101, 115, 115, 83),
      ::capnp::word(116, 97, 116, 117, 115, 0, 0, 0),
      ::capnp::word(80, 97, 110, 100, 97, 67, 97, 110),
      ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
      ::capnp::word(148, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(27, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 3, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 4, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 64, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 4, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 65, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 4, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(29, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 4, 0, 0, 10, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(30, 0, 0, 0, 67, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 4, 0, 0, 2, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(31, 0, 0, 0, 68, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 4, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 4, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 4, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(32, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 4, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 4, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(33, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 4, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(34, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 4, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 69, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 4, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 4, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 4, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 70, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 4, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 4, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 4, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 4, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(35, 0, 0, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 4, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 4, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 71, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 4, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 4, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 4, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 4, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(36, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 5, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 5, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 5, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 5, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 5, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 5, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 224, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 5, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 5, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 61, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 5, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 35, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 5, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 36, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 5, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(118, 111, 108, 116, 97, 103, 101, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 114, 101, 110, 116, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 103, 110, 105, 116, 105, 111, 110),
      ::capnp::word(76, 105, 110, 101, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 110, 116, 114, 111, 108, 115),
      ::capnp::word(65, 108, 108, 111, 119, 101, 100, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 97, 115, 73, 110, 116, 101, 114),
      ::capnp::word(99, 101, 112, 116, 111, 114, 68, 101),
      ::capnp::word(116, 101, 99, 116, 101, 100, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 114, 116, 101, 100, 83),
      ::capnp::word(105, 103, 110, 97, 108, 68, 101, 116),
      ::capnp::word(101, 99, 116, 101, 100, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 97, 115, 71, 112, 115, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 120, 66, 117, 102, 102, 101, 114),
      ::capnp::word(79, 118, 101, 114, 102, 108, 111, 119),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 120, 66, 117, 102, 102, 101, 114),
      ::capnp::word(79, 118, 101, 114, 102, 108, 111, 119),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 109, 108, 97, 110, 83, 101, 110),
      ::capnp::word(100, 69, 114, 114, 115, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 110, 100, 97, 84, 121, 112),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 55, 91, 62, 249, 173, 88, 138),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 110, 83, 112, 101, 101, 100),
      ::capnp::word(82, 112, 109, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 115, 98, 80, 111, 119, 101, 114),
      ::capnp::word(77, 111, 100, 101, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 152, 44, 179, 131, 53, 136, 168),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 103, 110, 105, 116, 105, 111, 110),
      ::capnp::word(67, 97, 110, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 77, 111),
      ::capnp::word(100, 101, 108, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 244, 218, 30, 91, 30, 85, 149),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 117, 108, 116, 83, 116, 97),
      ::capnp::word(116, 117, 115, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(187, 173, 201, 10, 139, 11, 253, 242),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 119, 101, 114, 83, 97, 118),
      ::capnp::word(101, 69, 110, 97, 98, 108, 101, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 112, 116, 105, 109, 101, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 117, 108, 116, 115, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 151, 36, 105, 127, 192, 85, 205),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 82, 120),
      ::capnp::word(73, 110, 118, 97, 108, 105, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 80, 97),
      ::capnp::word(114, 97, 109, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 97, 114, 110, 101, 115, 115, 83),
      ::capnp::word(116, 97, 116, 117, 115, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(191, 129, 192, 232, 209, 62, 154, 246),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 101, 97, 114, 116, 98, 101, 97),
      ::capnp::word(116, 76, 111, 115, 116, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 116, 101, 114, 110, 97, 116),
      ::capnp::word(105, 118, 101, 69, 120, 112, 101, 114),
      ::capnp::word(105, 101, 110, 99, 101, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 84, 120),
      ::capnp::word(66, 108, 111, 99, 107, 101, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
      ::capnp::word(116, 76, 111, 97, 100, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 80, 97),
      ::capnp::word(114, 97, 109, 50, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 80, 97),
      ::capnp::word(114, 97, 109, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 110, 80, 111, 119, 101, 114),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 83, 116, 97, 116, 101),
      ::capnp::word(48, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 212, 12, 235, 45, 151, 210, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 83, 116, 97, 116, 101),
      ::capnp::word(49, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 212, 12, 235, 45, 151, 210, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 83, 116, 97, 116, 101),
      ::capnp::word(50, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 212, 12, 235, 45, 151, 210, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 82, 120),
      ::capnp::word(67, 104, 101, 99, 107, 115, 73, 110),
      ::capnp::word(118, 97, 108, 105, 100, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 105, 67, 104, 101, 99, 107),
      ::capnp::word(115, 117, 109, 69, 114, 114, 111, 114),
      ::capnp::word(67, 111, 117, 110, 116, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 110, 83, 116, 97, 108, 108),
      ::capnp::word(67, 111, 117, 110, 116, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 98, 117, 49, 86, 111, 108, 116),
      ::capnp::word(97, 103, 101, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 98, 117, 50, 86, 111, 108, 116),
      ::capnp::word(97, 103, 101, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <bool as ::capnp::introspect::Introspect>::introspect(),
        3 => <bool as ::capnp::introspect::Introspect>::introspect(),
        4 => <bool as ::capnp::introspect::Introspect>::introspect(),
        5 => <bool as ::capnp::introspect::Introspect>::introspect(),
        6 => <bool as ::capnp::introspect::Introspect>::introspect(),
        7 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        10 => <crate::cereal::log_capnp::panda_state::PandaType as ::capnp::introspect::Introspect>::introspect(),
        11 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        12 => <crate::cereal::log_capnp::peripheral_state::UsbPowerModeDEPRECATED as ::capnp::introspect::Introspect>::introspect(),
        13 => <bool as ::capnp::introspect::Introspect>::introspect(),
        14 => <crate::cereal::car_capnp::car_params::SafetyModel as ::capnp::introspect::Introspect>::introspect(),
        15 => <crate::cereal::log_capnp::panda_state::FaultStatus as ::capnp::introspect::Introspect>::introspect(),
        16 => <bool as ::capnp::introspect::Introspect>::introspect(),
        17 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        18 => <::capnp::enum_list::Owned<crate::cereal::log_capnp::panda_state::FaultType> as ::capnp::introspect::Introspect>::introspect(),
        19 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        20 => <i16 as ::capnp::introspect::Introspect>::introspect(),
        21 => <crate::cereal::log_capnp::panda_state::HarnessStatus as ::capnp::introspect::Introspect>::introspect(),
        22 => <bool as ::capnp::introspect::Introspect>::introspect(),
        23 => <i16 as ::capnp::introspect::Introspect>::introspect(),
        24 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        25 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        26 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        27 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        28 => <u8 as ::capnp::introspect::Introspect>::introspect(),
        29 => <crate::cereal::log_capnp::panda_state::panda_can_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        30 => <crate::cereal::log_capnp::panda_state::panda_can_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        31 => <crate::cereal::log_capnp::panda_state::panda_can_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        32 => <bool as ::capnp::introspect::Introspect>::introspect(),
        33 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        34 => <u8 as ::capnp::introspect::Introspect>::introspect(),
        35 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        36 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[23,29,30,31,3,1,28,11,34,15,18,4,9,21,6,22,13,2,25,10,16,7,14,27,26,20,32,19,24,35,36,33,5,8,17,12,0];
    pub const TYPE_ID: u64 = 0xa764_9e25_75e4_591e;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum FaultStatus {
    None = 0,
    FaultTemp = 1,
    FaultPerm = 2,
  }

  impl ::capnp::introspect::Introspect for FaultStatus {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &fault_status::ENCODED_NODE, annotation_types: fault_status::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<FaultStatus> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: FaultStatus) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &fault_status::ENCODED_NODE, annotation_types: fault_status::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for FaultStatus {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <FaultStatus as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::None),
        1 => ::core::result::Result::Ok(Self::FaultTemp),
        2 => ::core::result::Result::Ok(Self::FaultPerm),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<FaultStatus> for u16 {
    #[inline]
    fn from(x: FaultStatus) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for FaultStatus {
    const TYPE_ID: u64 = 0xf2fd_0b8b_0ac9_adbbu64;
  }
  mod fault_status {
  pub static ENCODED_NODE: [::capnp::Word; 33] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(187, 173, 201, 10, 139, 11, 253, 242),
    ::capnp::word(21, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(30, 89, 228, 117, 37, 158, 100, 167),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 10, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 79, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 80, 97, 110, 100, 97, 83),
    ::capnp::word(116, 97, 116, 101, 46, 70, 97, 117),
    ::capnp::word(108, 116, 83, 116, 97, 116, 117, 115),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
    ::capnp::word(102, 97, 117, 108, 116, 84, 101, 109),
    ::capnp::word(112, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 97, 117, 108, 116, 80, 101, 114),
    ::capnp::word(109, 0, 0, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum FaultType {
    RelayMalfunction = 0,
    UnusedInterruptHandled = 1,
    InterruptRateCan1 = 2,
    InterruptRateCan2 = 3,
    InterruptRateCan3 = 4,
    InterruptRateTach = 5,
    InterruptRateGmlanDEPRECATED = 6,
    InterruptRateInterrupts = 7,
    InterruptRateSpiDma = 8,
    InterruptRateSpiCs = 9,
    InterruptRateUart1 = 10,
    InterruptRateUart2 = 11,
    InterruptRateUart3 = 12,
    InterruptRateUart5 = 13,
    InterruptRateUartDma = 14,
    InterruptRateUsb = 15,
    InterruptRateTim1 = 16,
    InterruptRateTim3 = 17,
    RegisterDivergent = 18,
    InterruptRateKlineInit = 19,
    InterruptRateClockSource = 20,
    InterruptRateTick = 21,
    InterruptRateExti = 22,
    InterruptRateSpi = 23,
    InterruptRateUart7 = 24,
    SirenMalfunction = 25,
    HeartbeatLoopWatchdog = 26,
  }

  impl ::capnp::introspect::Introspect for FaultType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &fault_type::ENCODED_NODE, annotation_types: fault_type::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<FaultType> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: FaultType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &fault_type::ENCODED_NODE, annotation_types: fault_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for FaultType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <FaultType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::RelayMalfunction),
        1 => ::core::result::Result::Ok(Self::UnusedInterruptHandled),
        2 => ::core::result::Result::Ok(Self::InterruptRateCan1),
        3 => ::core::result::Result::Ok(Self::InterruptRateCan2),
        4 => ::core::result::Result::Ok(Self::InterruptRateCan3),
        5 => ::core::result::Result::Ok(Self::InterruptRateTach),
        6 => ::core::result::Result::Ok(Self::InterruptRateGmlanDEPRECATED),
        7 => ::core::result::Result::Ok(Self::InterruptRateInterrupts),
        8 => ::core::result::Result::Ok(Self::InterruptRateSpiDma),
        9 => ::core::result::Result::Ok(Self::InterruptRateSpiCs),
        10 => ::core::result::Result::Ok(Self::InterruptRateUart1),
        11 => ::core::result::Result::Ok(Self::InterruptRateUart2),
        12 => ::core::result::Result::Ok(Self::InterruptRateUart3),
        13 => ::core::result::Result::Ok(Self::InterruptRateUart5),
        14 => ::core::result::Result::Ok(Self::InterruptRateUartDma),
        15 => ::core::result::Result::Ok(Self::InterruptRateUsb),
        16 => ::core::result::Result::Ok(Self::InterruptRateTim1),
        17 => ::core::result::Result::Ok(Self::InterruptRateTim3),
        18 => ::core::result::Result::Ok(Self::RegisterDivergent),
        19 => ::core::result::Result::Ok(Self::InterruptRateKlineInit),
        20 => ::core::result::Result::Ok(Self::InterruptRateClockSource),
        21 => ::core::result::Result::Ok(Self::InterruptRateTick),
        22 => ::core::result::Result::Ok(Self::InterruptRateExti),
        23 => ::core::result::Result::Ok(Self::InterruptRateSpi),
        24 => ::core::result::Result::Ok(Self::InterruptRateUart7),
        25 => ::core::result::Result::Ok(Self::SirenMalfunction),
        26 => ::core::result::Result::Ok(Self::HeartbeatLoopWatchdog),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<FaultType> for u16 {
    #[inline]
    fn from(x: FaultType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for FaultType {
    const TYPE_ID: u64 = 0xcd55_c07f_6924_9798u64;
  }
  mod fault_type {
  pub static ENCODED_NODE: [::capnp::Word; 182] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(152, 151, 36, 105, 127, 192, 85, 205),
    ::capnp::word(21, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(30, 89, 228, 117, 37, 158, 100, 167),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 143, 2, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 80, 97, 110, 100, 97, 83),
    ::capnp::word(116, 97, 116, 101, 46, 70, 97, 117),
    ::capnp::word(108, 116, 84, 121, 112, 101, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(108, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 1, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 1, 0, 0, 186, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 1, 0, 0, 234, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 194, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 162, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 170, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(19, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 186, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(20, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 202, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(22, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(23, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 1, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(24, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 1, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 1, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(26, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 1, 0, 0, 178, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 101, 108, 97, 121, 77, 97, 108),
    ::capnp::word(102, 117, 110, 99, 116, 105, 111, 110),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 117, 115, 101, 100, 73, 110),
    ::capnp::word(116, 101, 114, 114, 117, 112, 116, 72),
    ::capnp::word(97, 110, 100, 108, 101, 100, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 67, 97, 110),
    ::capnp::word(49, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 67, 97, 110),
    ::capnp::word(50, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 67, 97, 110),
    ::capnp::word(51, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 84, 97, 99),
    ::capnp::word(104, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 71, 109, 108),
    ::capnp::word(97, 110, 68, 69, 80, 82, 69, 67),
    ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 73, 110, 116),
    ::capnp::word(101, 114, 114, 117, 112, 116, 115, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 83, 112, 105),
    ::capnp::word(68, 109, 97, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 83, 112, 105),
    ::capnp::word(67, 115, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 85, 97, 114),
    ::capnp::word(116, 49, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 85, 97, 114),
    ::capnp::word(116, 50, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 85, 97, 114),
    ::capnp::word(116, 51, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 85, 97, 114),
    ::capnp::word(116, 53, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 85, 97, 114),
    ::capnp::word(116, 68, 109, 97, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 85, 115, 98),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 84, 105, 109),
    ::capnp::word(49, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 84, 105, 109),
    ::capnp::word(51, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 101, 103, 105, 115, 116, 101, 114),
    ::capnp::word(68, 105, 118, 101, 114, 103, 101, 110),
    ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 75, 108, 105),
    ::capnp::word(110, 101, 73, 110, 105, 116, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 67, 108, 111),
    ::capnp::word(99, 107, 83, 111, 117, 114, 99, 101),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 84, 105, 99),
    ::capnp::word(107, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 69, 120, 116),
    ::capnp::word(105, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 83, 112, 105),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 114, 117, 112),
    ::capnp::word(116, 82, 97, 116, 101, 85, 97, 114),
    ::capnp::word(116, 55, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 105, 114, 101, 110, 77, 97, 108),
    ::capnp::word(102, 117, 110, 99, 116, 105, 111, 110),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(104, 101, 97, 114, 116, 98, 101, 97),
    ::capnp::word(116, 76, 111, 111, 112, 87, 97, 116),
    ::capnp::word(99, 104, 100, 111, 103, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum PandaType {
    Unknown = 0,
    WhitePanda = 1,
    GreyPanda = 2,
    BlackPanda = 3,
    Pedal = 4,
    Uno = 5,
    Dos = 6,
    RedPanda = 7,
    RedPandaV2 = 8,
    Tres = 9,
    Cuatro = 10,
  }

  impl ::capnp::introspect::Introspect for PandaType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &panda_type::ENCODED_NODE, annotation_types: panda_type::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<PandaType> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: PandaType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &panda_type::ENCODED_NODE, annotation_types: panda_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for PandaType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <PandaType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Unknown),
        1 => ::core::result::Result::Ok(Self::WhitePanda),
        2 => ::core::result::Result::Ok(Self::GreyPanda),
        3 => ::core::result::Result::Ok(Self::BlackPanda),
        4 => ::core::result::Result::Ok(Self::Pedal),
        5 => ::core::result::Result::Ok(Self::Uno),
        6 => ::core::result::Result::Ok(Self::Dos),
        7 => ::core::result::Result::Ok(Self::RedPanda),
        8 => ::core::result::Result::Ok(Self::RedPandaV2),
        9 => ::core::result::Result::Ok(Self::Tres),
        10 => ::core::result::Result::Ok(Self::Cuatro),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<PandaType> for u16 {
    #[inline]
    fn from(x: PandaType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for PandaType {
    const TYPE_ID: u64 = 0x8a58_adf9_3e5b_3751u64;
  }
  mod panda_type {
  pub static ENCODED_NODE: [::capnp::Word; 67] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(81, 55, 91, 62, 249, 173, 88, 138),
    ::capnp::word(21, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(30, 89, 228, 117, 37, 158, 100, 167),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 15, 1, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 80, 97, 110, 100, 97, 83),
    ::capnp::word(116, 97, 116, 101, 46, 80, 97, 110),
    ::capnp::word(100, 97, 84, 121, 112, 101, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(44, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(125, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(113, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
    ::capnp::word(119, 104, 105, 116, 101, 80, 97, 110),
    ::capnp::word(100, 97, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 114, 101, 121, 80, 97, 110, 100),
    ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 108, 97, 99, 107, 80, 97, 110),
    ::capnp::word(100, 97, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 101, 100, 97, 108, 0, 0, 0),
    ::capnp::word(117, 110, 111, 0, 0, 0, 0, 0),
    ::capnp::word(100, 111, 115, 0, 0, 0, 0, 0),
    ::capnp::word(114, 101, 100, 80, 97, 110, 100, 97),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 101, 100, 80, 97, 110, 100, 97),
    ::capnp::word(86, 50, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 114, 101, 115, 0, 0, 0, 0),
    ::capnp::word(99, 117, 97, 116, 114, 111, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum HarnessStatus {
    NotConnected = 0,
    Normal = 1,
    Flipped = 2,
  }

  impl ::capnp::introspect::Introspect for HarnessStatus {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &harness_status::ENCODED_NODE, annotation_types: harness_status::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<HarnessStatus> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: HarnessStatus) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &harness_status::ENCODED_NODE, annotation_types: harness_status::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for HarnessStatus {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <HarnessStatus as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::NotConnected),
        1 => ::core::result::Result::Ok(Self::Normal),
        2 => ::core::result::Result::Ok(Self::Flipped),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<HarnessStatus> for u16 {
    #[inline]
    fn from(x: HarnessStatus) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for HarnessStatus {
    const TYPE_ID: u64 = 0xf69a_3ed1_e8c0_81bfu64;
  }
  mod harness_status {
  pub static ENCODED_NODE: [::capnp::Word; 32] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(191, 129, 192, 232, 209, 62, 154, 246),
    ::capnp::word(21, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(30, 89, 228, 117, 37, 158, 100, 167),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 26, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 79, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 80, 97, 110, 100, 97, 83),
    ::capnp::word(116, 97, 116, 101, 46, 72, 97, 114),
    ::capnp::word(110, 101, 115, 115, 83, 116, 97, 116),
    ::capnp::word(117, 115, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 116, 67, 111, 110, 110, 101),
    ::capnp::word(99, 116, 101, 100, 0, 0, 0, 0),
    ::capnp::word(110, 111, 114, 109, 97, 108, 0, 0),
    ::capnp::word(102, 108, 105, 112, 112, 101, 100, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod panda_can_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_bus_off(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_bus_off_cnt(self) -> u32 {
        self.reader.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn get_error_warning(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_error_passive(self) -> bool {
        self.reader.get_bool_field(2)
      }
      #[inline]
      pub fn get_last_error(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
      }
      #[inline]
      pub fn get_last_stored_error(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(4))
      }
      #[inline]
      pub fn get_last_data_error(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(5))
      }
      #[inline]
      pub fn get_last_data_stored_error(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(6))
      }
      #[inline]
      pub fn get_receive_error_cnt(self) -> u8 {
        self.reader.get_data_field::<u8>(1)
      }
      #[inline]
      pub fn get_transmit_error_cnt(self) -> u8 {
        self.reader.get_data_field::<u8>(14)
      }
      #[inline]
      pub fn get_total_error_cnt(self) -> u32 {
        self.reader.get_data_field::<u32>(4)
      }
      #[inline]
      pub fn get_total_tx_lost_cnt(self) -> u32 {
        self.reader.get_data_field::<u32>(5)
      }
      #[inline]
      pub fn get_total_rx_lost_cnt(self) -> u32 {
        self.reader.get_data_field::<u32>(6)
      }
      #[inline]
      pub fn get_total_tx_cnt(self) -> u32 {
        self.reader.get_data_field::<u32>(7)
      }
      #[inline]
      pub fn get_total_rx_cnt(self) -> u32 {
        self.reader.get_data_field::<u32>(8)
      }
      #[inline]
      pub fn get_total_fwd_cnt(self) -> u32 {
        self.reader.get_data_field::<u32>(9)
      }
      #[inline]
      pub fn get_can_speed(self) -> u16 {
        self.reader.get_data_field::<u16>(20)
      }
      #[inline]
      pub fn get_can_data_speed(self) -> u16 {
        self.reader.get_data_field::<u16>(21)
      }
      #[inline]
      pub fn get_canfd_enabled(self) -> bool {
        self.reader.get_bool_field(3)
      }
      #[inline]
      pub fn get_brs_enabled(self) -> bool {
        self.reader.get_bool_field(4)
      }
      #[inline]
      pub fn get_canfd_non_iso(self) -> bool {
        self.reader.get_bool_field(5)
      }
      #[inline]
      pub fn get_irq0_call_rate(self) -> u32 {
        self.reader.get_data_field::<u32>(11)
      }
      #[inline]
      pub fn get_irq1_call_rate(self) -> u32 {
        self.reader.get_data_field::<u32>(12)
      }
      #[inline]
      pub fn get_irq2_call_rate(self) -> u32 {
        self.reader.get_data_field::<u32>(13)
      }
      #[inline]
      pub fn get_can_core_reset_cnt(self) -> u32 {
        self.reader.get_data_field::<u32>(14)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 8, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_bus_off(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_bus_off(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_bus_off_cnt(self) -> u32 {
        self.builder.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn set_bus_off_cnt(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(1, value);
      }
      #[inline]
      pub fn get_error_warning(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_error_warning(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_error_passive(self) -> bool {
        self.builder.get_bool_field(2)
      }
      #[inline]
      pub fn set_error_passive(&mut self, value: bool)  {
        self.builder.set_bool_field(2, value);
      }
      #[inline]
      pub fn get_last_error(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
      }
      #[inline]
      pub fn set_last_error(&mut self, value: crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode)  {
        self.builder.set_data_field::<u16>(1, value as u16);
      }
      #[inline]
      pub fn get_last_stored_error(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(4))
      }
      #[inline]
      pub fn set_last_stored_error(&mut self, value: crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode)  {
        self.builder.set_data_field::<u16>(4, value as u16);
      }
      #[inline]
      pub fn get_last_data_error(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(5))
      }
      #[inline]
      pub fn set_last_data_error(&mut self, value: crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode)  {
        self.builder.set_data_field::<u16>(5, value as u16);
      }
      #[inline]
      pub fn get_last_data_stored_error(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(6))
      }
      #[inline]
      pub fn set_last_data_stored_error(&mut self, value: crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode)  {
        self.builder.set_data_field::<u16>(6, value as u16);
      }
      #[inline]
      pub fn get_receive_error_cnt(self) -> u8 {
        self.builder.get_data_field::<u8>(1)
      }
      #[inline]
      pub fn set_receive_error_cnt(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(1, value);
      }
      #[inline]
      pub fn get_transmit_error_cnt(self) -> u8 {
        self.builder.get_data_field::<u8>(14)
      }
      #[inline]
      pub fn set_transmit_error_cnt(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(14, value);
      }
      #[inline]
      pub fn get_total_error_cnt(self) -> u32 {
        self.builder.get_data_field::<u32>(4)
      }
      #[inline]
      pub fn set_total_error_cnt(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(4, value);
      }
      #[inline]
      pub fn get_total_tx_lost_cnt(self) -> u32 {
        self.builder.get_data_field::<u32>(5)
      }
      #[inline]
      pub fn set_total_tx_lost_cnt(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(5, value);
      }
      #[inline]
      pub fn get_total_rx_lost_cnt(self) -> u32 {
        self.builder.get_data_field::<u32>(6)
      }
      #[inline]
      pub fn set_total_rx_lost_cnt(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(6, value);
      }
      #[inline]
      pub fn get_total_tx_cnt(self) -> u32 {
        self.builder.get_data_field::<u32>(7)
      }
      #[inline]
      pub fn set_total_tx_cnt(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(7, value);
      }
      #[inline]
      pub fn get_total_rx_cnt(self) -> u32 {
        self.builder.get_data_field::<u32>(8)
      }
      #[inline]
      pub fn set_total_rx_cnt(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(8, value);
      }
      #[inline]
      pub fn get_total_fwd_cnt(self) -> u32 {
        self.builder.get_data_field::<u32>(9)
      }
      #[inline]
      pub fn set_total_fwd_cnt(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(9, value);
      }
      #[inline]
      pub fn get_can_speed(self) -> u16 {
        self.builder.get_data_field::<u16>(20)
      }
      #[inline]
      pub fn set_can_speed(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(20, value);
      }
      #[inline]
      pub fn get_can_data_speed(self) -> u16 {
        self.builder.get_data_field::<u16>(21)
      }
      #[inline]
      pub fn set_can_data_speed(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(21, value);
      }
      #[inline]
      pub fn get_canfd_enabled(self) -> bool {
        self.builder.get_bool_field(3)
      }
      #[inline]
      pub fn set_canfd_enabled(&mut self, value: bool)  {
        self.builder.set_bool_field(3, value);
      }
      #[inline]
      pub fn get_brs_enabled(self) -> bool {
        self.builder.get_bool_field(4)
      }
      #[inline]
      pub fn set_brs_enabled(&mut self, value: bool)  {
        self.builder.set_bool_field(4, value);
      }
      #[inline]
      pub fn get_canfd_non_iso(self) -> bool {
        self.builder.get_bool_field(5)
      }
      #[inline]
      pub fn set_canfd_non_iso(&mut self, value: bool)  {
        self.builder.set_bool_field(5, value);
      }
      #[inline]
      pub fn get_irq0_call_rate(self) -> u32 {
        self.builder.get_data_field::<u32>(11)
      }
      #[inline]
      pub fn set_irq0_call_rate(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(11, value);
      }
      #[inline]
      pub fn get_irq1_call_rate(self) -> u32 {
        self.builder.get_data_field::<u32>(12)
      }
      #[inline]
      pub fn set_irq1_call_rate(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(12, value);
      }
      #[inline]
      pub fn get_irq2_call_rate(self) -> u32 {
        self.builder.get_data_field::<u32>(13)
      }
      #[inline]
      pub fn set_irq2_call_rate(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(13, value);
      }
      #[inline]
      pub fn get_can_core_reset_cnt(self) -> u32 {
        self.builder.get_data_field::<u32>(14)
      }
      #[inline]
      pub fn set_can_core_reset_cnt(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(14, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 424] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(92, 212, 12, 235, 45, 151, 210, 248),
        ::capnp::word(21, 0, 0, 0, 1, 0, 8, 0),
        ::capnp::word(30, 89, 228, 117, 37, 158, 100, 167),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 26, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(49, 0, 0, 0, 127, 5, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 80, 97, 110, 100, 97, 83),
        ::capnp::word(116, 97, 116, 101, 46, 80, 97, 110),
        ::capnp::word(100, 97, 67, 97, 110, 83, 116, 97),
        ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(255, 131, 50, 209, 180, 80, 219, 192),
        ::capnp::word(1, 0, 0, 0, 106, 0, 0, 0),
        ::capnp::word(76, 101, 99, 69, 114, 114, 111, 114),
        ::capnp::word(67, 111, 100, 101, 0, 0, 0, 0),
        ::capnp::word(100, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(173, 2, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 2, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 2, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 2, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(192, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(201, 2, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(200, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(212, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 2, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 2, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 2, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 2, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(236, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(248, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(245, 2, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(248, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 3, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 3, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(17, 3, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 3, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 3, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 3, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(49, 3, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(48, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(60, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(17, 0, 0, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(57, 3, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(18, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 3, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(76, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(19, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(73, 3, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(81, 3, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(80, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(21, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 3, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(88, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(100, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(22, 0, 0, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 3, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(23, 0, 0, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 3, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(24, 0, 0, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(113, 3, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(124, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(98, 117, 115, 79, 102, 102, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 117, 115, 79, 102, 102, 67, 110),
        ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 114, 114, 111, 114, 87, 97, 114),
        ::capnp::word(110, 105, 110, 103, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 114, 114, 111, 114, 80, 97, 115),
        ::capnp::word(115, 105, 118, 101, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 115, 116, 69, 114, 114, 111),
        ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(255, 131, 50, 209, 180, 80, 219, 192),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 115, 116, 83, 116, 111, 114),
        ::capnp::word(101, 100, 69, 114, 114, 111, 114, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(255, 131, 50, 209, 180, 80, 219, 192),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 115, 116, 68, 97, 116, 97),
        ::capnp::word(69, 114, 114, 111, 114, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(255, 131, 50, 209, 180, 80, 219, 192),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 115, 116, 68, 97, 116, 97),
        ::capnp::word(83, 116, 111, 114, 101, 100, 69, 114),
        ::capnp::word(114, 111, 114, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(255, 131, 50, 209, 180, 80, 219, 192),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 101, 99, 101, 105, 118, 101, 69),
        ::capnp::word(114, 114, 111, 114, 67, 110, 116, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 114, 97, 110, 115, 109, 105, 116),
        ::capnp::word(69, 114, 114, 111, 114, 67, 110, 116),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 116, 97, 108, 69, 114, 114),
        ::capnp::word(111, 114, 67, 110, 116, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 116, 97, 108, 84, 120, 76),
        ::capnp::word(111, 115, 116, 67, 110, 116, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 116, 97, 108, 82, 120, 76),
        ::capnp::word(111, 115, 116, 67, 110, 116, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 116, 97, 108, 84, 120, 67),
        ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 116, 97, 108, 82, 120, 67),
        ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 116, 97, 108, 70, 119, 100),
        ::capnp::word(67, 110, 116, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 110, 83, 112, 101, 101, 100),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 110, 68, 97, 116, 97, 83),
        ::capnp::word(112, 101, 101, 100, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 110, 102, 100, 69, 110, 97),
        ::capnp::word(98, 108, 101, 100, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 114, 115, 69, 110, 97, 98, 108),
        ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 110, 102, 100, 78, 111, 110),
        ::capnp::word(73, 115, 111, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 114, 113, 48, 67, 97, 108, 108),
        ::capnp::word(82, 97, 116, 101, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 114, 113, 49, 67, 97, 108, 108),
        ::capnp::word(82, 97, 116, 101, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 114, 113, 50, 67, 97, 108, 108),
        ::capnp::word(82, 97, 116, 101, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 110, 67, 111, 114, 101, 82),
        ::capnp::word(101, 115, 101, 116, 67, 110, 116, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <bool as ::capnp::introspect::Introspect>::introspect(),
          3 => <bool as ::capnp::introspect::Introspect>::introspect(),
          4 => <crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode as ::capnp::introspect::Introspect>::introspect(),
          5 => <crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode as ::capnp::introspect::Introspect>::introspect(),
          6 => <crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode as ::capnp::introspect::Introspect>::introspect(),
          7 => <crate::cereal::log_capnp::panda_state::panda_can_state::LecErrorCode as ::capnp::introspect::Introspect>::introspect(),
          8 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          9 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          10 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          11 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          12 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          13 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          14 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          15 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          16 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          17 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          18 => <bool as ::capnp::introspect::Introspect>::introspect(),
          19 => <bool as ::capnp::introspect::Introspect>::introspect(),
          20 => <bool as ::capnp::introspect::Introspect>::introspect(),
          21 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          22 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          23 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          24 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[19,0,1,24,17,16,18,20,3,2,21,22,23,6,7,4,5,8,10,15,14,12,13,11,9];
      pub const TYPE_ID: u64 = 0xf8d2_972d_eb0c_d45c;
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum LecErrorCode {
      NoError = 0,
      StuffError = 1,
      FormError = 2,
      AckError = 3,
      Bit1Error = 4,
      Bit0Error = 5,
      CrcError = 6,
      NoChange = 7,
    }

    impl ::capnp::introspect::Introspect for LecErrorCode {
      fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &lec_error_code::ENCODED_NODE, annotation_types: lec_error_code::get_annotation_types }).into() }
    }
    impl <'a> ::core::convert::From<LecErrorCode> for ::capnp::dynamic_value::Reader<'a> {
      fn from(e: LecErrorCode) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &lec_error_code::ENCODED_NODE, annotation_types: lec_error_code::get_annotation_types }.into()).into() }
    }
    impl ::core::convert::TryFrom<u16> for LecErrorCode {
      type Error = ::capnp::NotInSchema;
      fn try_from(value: u16) -> ::core::result::Result<Self, <LecErrorCode as ::core::convert::TryFrom<u16>>::Error> {
        match value {
          0 => ::core::result::Result::Ok(Self::NoError),
          1 => ::core::result::Result::Ok(Self::StuffError),
          2 => ::core::result::Result::Ok(Self::FormError),
          3 => ::core::result::Result::Ok(Self::AckError),
          4 => ::core::result::Result::Ok(Self::Bit1Error),
          5 => ::core::result::Result::Ok(Self::Bit0Error),
          6 => ::core::result::Result::Ok(Self::CrcError),
          7 => ::core::result::Result::Ok(Self::NoChange),
          n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
        }
      }
    }
    impl From<LecErrorCode> for u16 {
      #[inline]
      fn from(x: LecErrorCode) -> u16 { x as u16 }
    }
    impl ::capnp::traits::HasTypeId for LecErrorCode {
      const TYPE_ID: u64 = 0xc0db_50b4_d132_83ffu64;
    }
    mod lec_error_code {
    pub static ENCODED_NODE: [::capnp::Word; 59] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(255, 131, 50, 209, 180, 80, 219, 192),
      ::capnp::word(35, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(92, 212, 12, 235, 45, 151, 210, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 130, 1, 0, 0),
      ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 0, 0, 0, 199, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 80, 97, 110, 100, 97, 83),
      ::capnp::word(116, 97, 116, 101, 46, 80, 97, 110),
      ::capnp::word(100, 97, 67, 97, 110, 83, 116, 97),
      ::capnp::word(116, 101, 46, 76, 101, 99, 69, 114),
      ::capnp::word(114, 111, 114, 67, 111, 100, 101, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(32, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 111, 69, 114, 114, 111, 114, 0),
      ::capnp::word(115, 116, 117, 102, 102, 69, 114, 114),
      ::capnp::word(111, 114, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 111, 114, 109, 69, 114, 114, 111),
      ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 107, 69, 114, 114, 111, 114),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 105, 116, 49, 69, 114, 114, 111),
      ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 105, 116, 48, 69, 114, 114, 111),
      ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 114, 99, 69, 114, 114, 111, 114),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 111, 67, 104, 97, 110, 103, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    }
  }
}

pub mod peripheral_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_panda_type(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::PandaType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_voltage(self) -> u32 {
      self.reader.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn get_current(self) -> u32 {
      self.reader.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn get_fan_speed_rpm(self) -> u16 {
      self.reader.get_data_field::<u16>(1)
    }
    #[inline]
    pub fn get_usb_power_mode_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::log_capnp::peripheral_state::UsbPowerModeDEPRECATED,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(6))
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_panda_type(self) -> ::core::result::Result<crate::cereal::log_capnp::panda_state::PandaType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_panda_type(&mut self, value: crate::cereal::log_capnp::panda_state::PandaType)  {
      self.builder.set_data_field::<u16>(0, value as u16);
    }
    #[inline]
    pub fn get_voltage(self) -> u32 {
      self.builder.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn set_voltage(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn get_current(self) -> u32 {
      self.builder.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn set_current(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(2, value);
    }
    #[inline]
    pub fn get_fan_speed_rpm(self) -> u16 {
      self.builder.get_data_field::<u16>(1)
    }
    #[inline]
    pub fn set_fan_speed_rpm(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(1, value);
    }
    #[inline]
    pub fn get_usb_power_mode_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::log_capnp::peripheral_state::UsbPowerModeDEPRECATED,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(6))
    }
    #[inline]
    pub fn set_usb_power_mode_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::peripheral_state::UsbPowerModeDEPRECATED)  {
      self.builder.set_data_field::<u16>(6, value as u16);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 102] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(136, 122, 133, 52, 151, 244, 184, 206),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 210, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 0, 0, 0, 31, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 80, 101, 114, 105, 112, 104),
      ::capnp::word(101, 114, 97, 108, 83, 116, 97, 116),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(119, 152, 44, 179, 131, 53, 136, 168),
      ::capnp::word(1, 0, 0, 0, 186, 0, 0, 0),
      ::capnp::word(85, 115, 98, 80, 111, 119, 101, 114),
      ::capnp::word(77, 111, 100, 101, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(20, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 0, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(112, 97, 110, 100, 97, 84, 121, 112),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 55, 91, 62, 249, 173, 88, 138),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 111, 108, 116, 97, 103, 101, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 114, 101, 110, 116, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 110, 83, 112, 101, 101, 100),
      ::capnp::word(82, 112, 109, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 115, 98, 80, 111, 119, 101, 114),
      ::capnp::word(77, 111, 100, 101, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 152, 44, 179, 131, 53, 136, 168),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <crate::cereal::log_capnp::panda_state::PandaType as ::capnp::introspect::Introspect>::introspect(),
        1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::peripheral_state::UsbPowerModeDEPRECATED as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[2,3,0,4,1];
    pub const TYPE_ID: u64 = 0xceb8_f497_3485_7a88;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum UsbPowerModeDEPRECATED {
    None = 0,
    Client = 1,
    Cdp = 2,
    Dcp = 3,
  }

  impl ::capnp::introspect::Introspect for UsbPowerModeDEPRECATED {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &usb_power_mode_d_e_p_r_e_c_a_t_e_d::ENCODED_NODE, annotation_types: usb_power_mode_d_e_p_r_e_c_a_t_e_d::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<UsbPowerModeDEPRECATED> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: UsbPowerModeDEPRECATED) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &usb_power_mode_d_e_p_r_e_c_a_t_e_d::ENCODED_NODE, annotation_types: usb_power_mode_d_e_p_r_e_c_a_t_e_d::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for UsbPowerModeDEPRECATED {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <UsbPowerModeDEPRECATED as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::None),
        1 => ::core::result::Result::Ok(Self::Client),
        2 => ::core::result::Result::Ok(Self::Cdp),
        3 => ::core::result::Result::Ok(Self::Dcp),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<UsbPowerModeDEPRECATED> for u16 {
    #[inline]
    fn from(x: UsbPowerModeDEPRECATED) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for UsbPowerModeDEPRECATED {
    const TYPE_ID: u64 = 0xa888_3583_b32c_9877u64;
  }
  mod usb_power_mode_d_e_p_r_e_c_a_t_e_d {
  pub static ENCODED_NODE: [::capnp::Word; 37] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(119, 152, 44, 179, 131, 53, 136, 168),
    ::capnp::word(26, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(136, 122, 133, 52, 151, 244, 184, 206),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 138, 1, 0, 0),
    ::capnp::word(45, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 80, 101, 114, 105, 112, 104),
    ::capnp::word(101, 114, 97, 108, 83, 116, 97, 116),
    ::capnp::word(101, 46, 85, 115, 98, 80, 111, 119),
    ::capnp::word(101, 114, 77, 111, 100, 101, 68, 69),
    ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
    ::capnp::word(99, 108, 105, 101, 110, 116, 0, 0),
    ::capnp::word(99, 100, 112, 0, 0, 0, 0, 0),
    ::capnp::word(100, 99, 112, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}

pub mod radar_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_warp_matrix_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_warp_matrix_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_angle_offset_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn get_cal_status_d_e_p_r_e_c_a_t_e_d(self) -> i8 {
      self.reader.get_data_field::<i8>(4)
    }
    #[inline]
    pub fn get_lead_one(self) -> ::capnp::Result<crate::cereal::log_capnp::radar_state::lead_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_lead_one(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_lead_two(self) -> ::capnp::Result<crate::cereal::log_capnp::radar_state::lead_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_lead_two(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_cum_lag_ms(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_md_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn get_ft_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.reader.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn get_cal_cycle_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.reader.get_data_field::<i32>(3)
    }
    #[inline]
    pub fn get_cal_perc_d_e_p_r_e_c_a_t_e_d(self) -> i8 {
      self.reader.get_data_field::<i8>(5)
    }
    #[inline]
    pub fn get_can_mono_times_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,u64>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_can_mono_times_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_car_state_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn get_radar_errors(self) -> ::capnp::Result<::capnp::enum_list::Reader<'a,crate::cereal::car_capnp::radar_data::Error>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_radar_errors(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 5 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_warp_matrix_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_warp_matrix_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_warp_matrix_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_warp_matrix_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_angle_offset_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn set_angle_offset_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(0, value);
    }
    #[inline]
    pub fn get_cal_status_d_e_p_r_e_c_a_t_e_d(self) -> i8 {
      self.builder.get_data_field::<i8>(4)
    }
    #[inline]
    pub fn set_cal_status_d_e_p_r_e_c_a_t_e_d(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(4, value);
    }
    #[inline]
    pub fn get_lead_one(self) -> ::capnp::Result<crate::cereal::log_capnp::radar_state::lead_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_lead_one(&mut self, value: crate::cereal::log_capnp::radar_state::lead_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_lead_one(self, ) -> crate::cereal::log_capnp::radar_state::lead_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_lead_one(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_lead_two(self) -> ::capnp::Result<crate::cereal::log_capnp::radar_state::lead_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_lead_two(&mut self, value: crate::cereal::log_capnp::radar_state::lead_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_lead_two(self, ) -> crate::cereal::log_capnp::radar_state::lead_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    #[inline]
    pub fn has_lead_two(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_cum_lag_ms(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_cum_lag_ms(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_md_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn set_md_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(2, value);
    }
    #[inline]
    pub fn get_ft_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.builder.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn set_ft_mono_time_d_e_p_r_e_c_a_t_e_d(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(3, value);
    }
    #[inline]
    pub fn get_cal_cycle_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.builder.get_data_field::<i32>(3)
    }
    #[inline]
    pub fn set_cal_cycle_d_e_p_r_e_c_a_t_e_d(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(3, value);
    }
    #[inline]
    pub fn get_cal_perc_d_e_p_r_e_c_a_t_e_d(self) -> i8 {
      self.builder.get_data_field::<i8>(5)
    }
    #[inline]
    pub fn set_cal_perc_d_e_p_r_e_c_a_t_e_d(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(5, value);
    }
    #[inline]
    pub fn get_can_mono_times_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,u64>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_can_mono_times_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<u64>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_can_mono_times_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,u64> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_can_mono_times_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_car_state_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn set_car_state_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(4, value);
    }
    #[inline]
    pub fn get_radar_errors(self) -> ::capnp::Result<::capnp::enum_list::Builder<'a,crate::cereal::car_capnp::radar_data::Error>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_radar_errors(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::enum_list::Owned<crate::cereal::car_capnp::radar_data::Error>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_radar_errors(self, size: u32) -> ::capnp::enum_list::Builder<'a,crate::cereal::car_capnp::radar_data::Error> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_radar_errors(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_lead_one(&self) -> crate::cereal::log_capnp::radar_state::lead_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_lead_two(&self) -> crate::cereal::log_capnp::radar_state::lead_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 247] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(95, 208, 253, 214, 137, 83, 24, 154),
      ::capnp::word(10, 0, 0, 0, 1, 0, 5, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(5, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 170, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 223, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 82, 97, 100, 97, 114, 83),
      ::capnp::word(116, 97, 116, 101, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(133, 240, 12, 23, 217, 58, 111, 185),
      ::capnp::word(1, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(76, 101, 97, 100, 68, 97, 116, 97),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 1, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(124, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 1, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 1, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 1, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 1, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 1, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 1, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 1, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 1, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 1, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(119, 97, 114, 112, 77, 97, 116, 114),
      ::capnp::word(105, 120, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 108, 101, 79, 102, 102),
      ::capnp::word(115, 101, 116, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 83, 116, 97, 116, 117),
      ::capnp::word(115, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 97, 100, 79, 110, 101, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 240, 12, 23, 217, 58, 111, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 97, 100, 84, 119, 111, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 240, 12, 23, 217, 58, 111, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 109, 76, 97, 103, 77, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 100, 77, 111, 110, 111, 84, 105),
      ::capnp::word(109, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 116, 77, 111, 110, 111, 84, 105),
      ::capnp::word(109, 101, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 67, 121, 99, 108, 101),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 80, 101, 114, 99, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 77, 111, 110, 111, 84),
      ::capnp::word(105, 109, 101, 115, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 83, 116, 97, 116, 101),
      ::capnp::word(77, 111, 110, 111, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 100, 97, 114, 69, 114, 114),
      ::capnp::word(111, 114, 115, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 118, 186, 235, 121, 102, 168, 232),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <i8 as ::capnp::introspect::Introspect>::introspect(),
        3 => <crate::cereal::log_capnp::radar_state::lead_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::radar_state::lead_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        7 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        8 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <i8 as ::capnp::introspect::Introspect>::introspect(),
        10 => <::capnp::primitive_list::Owned<u64> as ::capnp::introspect::Introspect>::introspect(),
        11 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        12 => <::capnp::enum_list::Owned<crate::cereal::car_capnp::radar_data::Error> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,8,9,2,10,11,5,7,3,4,6,12,0];
    pub const TYPE_ID: u64 = 0x9a18_5389_d6fd_d05f;
  }

  pub mod lead_data {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_d_rel(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_y_rel(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_v_rel(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_a_rel(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_v_lead(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_a_lead_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_d_path(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_v_lat(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_v_lead_k(self) -> f32 {
        self.reader.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn get_a_lead_k(self) -> f32 {
        self.reader.get_data_field::<f32>(9)
      }
      #[inline]
      pub fn get_fcw(self) -> bool {
        self.reader.get_bool_field(320)
      }
      #[inline]
      pub fn get_status(self) -> bool {
        self.reader.get_bool_field(321)
      }
      #[inline]
      pub fn get_a_lead_tau(self) -> f32 {
        self.reader.get_data_field::<f32>(11)
      }
      #[inline]
      pub fn get_model_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(12)
      }
      #[inline]
      pub fn get_radar(self) -> bool {
        self.reader.get_bool_field(322)
      }
      #[inline]
      pub fn get_radar_track_id(self) -> i32 {
        self.reader.get_data_field_mask::<i32>(13, -1)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 7, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_d_rel(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_d_rel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_y_rel(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_y_rel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_v_rel(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_v_rel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_a_rel(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_a_rel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_v_lead(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_v_lead(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_a_lead_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_a_lead_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_d_path(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_d_path(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_v_lat(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_v_lat(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_v_lead_k(self) -> f32 {
        self.builder.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn set_v_lead_k(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(8, value);
      }
      #[inline]
      pub fn get_a_lead_k(self) -> f32 {
        self.builder.get_data_field::<f32>(9)
      }
      #[inline]
      pub fn set_a_lead_k(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(9, value);
      }
      #[inline]
      pub fn get_fcw(self) -> bool {
        self.builder.get_bool_field(320)
      }
      #[inline]
      pub fn set_fcw(&mut self, value: bool)  {
        self.builder.set_bool_field(320, value);
      }
      #[inline]
      pub fn get_status(self) -> bool {
        self.builder.get_bool_field(321)
      }
      #[inline]
      pub fn set_status(&mut self, value: bool)  {
        self.builder.set_bool_field(321, value);
      }
      #[inline]
      pub fn get_a_lead_tau(self) -> f32 {
        self.builder.get_data_field::<f32>(11)
      }
      #[inline]
      pub fn set_a_lead_tau(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(11, value);
      }
      #[inline]
      pub fn get_model_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(12)
      }
      #[inline]
      pub fn set_model_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(12, value);
      }
      #[inline]
      pub fn get_radar(self) -> bool {
        self.builder.get_bool_field(322)
      }
      #[inline]
      pub fn set_radar(&mut self, value: bool)  {
        self.builder.set_bool_field(322, value);
      }
      #[inline]
      pub fn get_radar_track_id(self) -> i32 {
        self.builder.get_data_field_mask::<i32>(13, -1)
      }
      #[inline]
      pub fn set_radar_track_id(&mut self, value: i32)  {
        self.builder.set_data_field_mask::<i32>(13, value, -1);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 262] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(133, 240, 12, 23, 217, 58, 111, 185),
        ::capnp::word(21, 0, 0, 0, 1, 0, 7, 0),
        ::capnp::word(95, 208, 253, 214, 137, 83, 24, 154),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 135, 3, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 82, 97, 100, 97, 114, 83),
        ::capnp::word(116, 97, 116, 101, 46, 76, 101, 97),
        ::capnp::word(100, 68, 97, 116, 97, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(64, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(200, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(212, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 64, 1, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 1, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 65, 1, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 1, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(236, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(248, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 66, 1, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(245, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 1, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(248, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(100, 82, 101, 108, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 82, 101, 108, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 82, 101, 108, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 82, 101, 108, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 76, 101, 97, 100, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 76, 101, 97, 100, 68, 69, 80),
        ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 80, 97, 116, 104, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 76, 97, 116, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 76, 101, 97, 100, 75, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 76, 101, 97, 100, 75, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 99, 119, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 97, 116, 117, 115, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 76, 101, 97, 100, 84, 97, 117),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 111, 100, 101, 108, 80, 114, 111),
        ::capnp::word(98, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 97, 100, 97, 114, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 97, 100, 97, 114, 84, 114, 97),
        ::capnp::word(99, 107, 73, 100, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 255, 255, 255, 255),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          10 => <bool as ::capnp::introspect::Introspect>::introspect(),
          11 => <bool as ::capnp::introspect::Introspect>::introspect(),
          12 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          14 => <bool as ::capnp::introspect::Introspect>::introspect(),
          15 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[5,9,12,3,6,0,10,13,14,15,11,7,4,8,2,1];
      pub const TYPE_ID: u64 = 0xb96f_3ad9_170c_f085;
    }
  }
}

pub mod live_calibration_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_warp_matrix_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_warp_matrix_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_cal_status_d_e_p_r_e_c_a_t_e_d(self) -> i8 {
      self.reader.get_data_field::<i8>(0)
    }
    #[inline]
    pub fn get_cal_cycle(self) -> i32 {
      self.reader.get_data_field::<i32>(1)
    }
    #[inline]
    pub fn get_cal_perc(self) -> i8 {
      self.reader.get_data_field::<i8>(1)
    }
    #[inline]
    pub fn get_extrinsic_matrix(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_extrinsic_matrix(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_warp_matrix2_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_warp_matrix2_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_warp_matrix_big_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_warp_matrix_big_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_rpy_calib(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_rpy_calib(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_rpy_calib_spread(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_rpy_calib_spread(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_valid_blocks(self) -> i32 {
      self.reader.get_data_field::<i32>(2)
    }
    #[inline]
    pub fn get_wide_from_device_euler(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_wide_from_device_euler(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_cal_status(self) -> ::core::result::Result<crate::cereal::log_capnp::live_calibration_data::Status,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn get_height(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_height(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 8 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_warp_matrix_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_warp_matrix_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_warp_matrix_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_warp_matrix_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_cal_status_d_e_p_r_e_c_a_t_e_d(self) -> i8 {
      self.builder.get_data_field::<i8>(0)
    }
    #[inline]
    pub fn set_cal_status_d_e_p_r_e_c_a_t_e_d(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(0, value);
    }
    #[inline]
    pub fn get_cal_cycle(self) -> i32 {
      self.builder.get_data_field::<i32>(1)
    }
    #[inline]
    pub fn set_cal_cycle(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(1, value);
    }
    #[inline]
    pub fn get_cal_perc(self) -> i8 {
      self.builder.get_data_field::<i8>(1)
    }
    #[inline]
    pub fn set_cal_perc(&mut self, value: i8)  {
      self.builder.set_data_field::<i8>(1, value);
    }
    #[inline]
    pub fn get_extrinsic_matrix(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_extrinsic_matrix(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_extrinsic_matrix(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_extrinsic_matrix(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_warp_matrix2_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_warp_matrix2_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_warp_matrix2_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_warp_matrix2_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_warp_matrix_big_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_warp_matrix_big_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_warp_matrix_big_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_warp_matrix_big_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_rpy_calib(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_rpy_calib(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_rpy_calib(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_rpy_calib(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_rpy_calib_spread(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_rpy_calib_spread(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_rpy_calib_spread(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_rpy_calib_spread(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_valid_blocks(self) -> i32 {
      self.builder.get_data_field::<i32>(2)
    }
    #[inline]
    pub fn set_valid_blocks(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(2, value);
    }
    #[inline]
    pub fn get_wide_from_device_euler(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_wide_from_device_euler(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_wide_from_device_euler(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    #[inline]
    pub fn has_wide_from_device_euler(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_cal_status(self) -> ::core::result::Result<crate::cereal::log_capnp::live_calibration_data::Status,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn set_cal_status(&mut self, value: crate::cereal::log_capnp::live_calibration_data::Status)  {
      self.builder.set_data_field::<u16>(1, value as u16);
    }
    #[inline]
    pub fn get_height(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_height(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_height(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
    }
    #[inline]
    pub fn has_height(&self) -> bool {
      !self.builder.is_pointer_field_null(7)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 264] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(188, 144, 131, 77, 117, 112, 223, 150),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(8, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 223, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 105, 118, 101, 67, 97),
      ::capnp::word(108, 105, 98, 114, 97, 116, 105, 111),
      ::capnp::word(110, 68, 97, 116, 97, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(77, 57, 173, 102, 148, 2, 170, 202),
      ::capnp::word(1, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(83, 116, 97, 116, 117, 115, 0, 0),
      ::capnp::word(52, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 1, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(124, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 1, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 1, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 1, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 1, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 1, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 2, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 2, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 2, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(119, 97, 114, 112, 77, 97, 116, 114),
      ::capnp::word(105, 120, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 83, 116, 97, 116, 117),
      ::capnp::word(115, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 67, 121, 99, 108, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 80, 101, 114, 99, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 120, 116, 114, 105, 110, 115, 105),
      ::capnp::word(99, 77, 97, 116, 114, 105, 120, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 97, 114, 112, 77, 97, 116, 114),
      ::capnp::word(105, 120, 50, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 97, 114, 112, 77, 97, 116, 114),
      ::capnp::word(105, 120, 66, 105, 103, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 112, 121, 67, 97, 108, 105, 98),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 112, 121, 67, 97, 108, 105, 98),
      ::capnp::word(83, 112, 114, 101, 97, 100, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 97, 108, 105, 100, 66, 108, 111),
      ::capnp::word(99, 107, 115, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 105, 100, 101, 70, 114, 111, 109),
      ::capnp::word(68, 101, 118, 105, 99, 101, 69, 117),
      ::capnp::word(108, 101, 114, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 83, 116, 97, 116, 117),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 57, 173, 102, 148, 2, 170, 202),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 101, 105, 103, 104, 116, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        1 => <i8 as ::capnp::introspect::Introspect>::introspect(),
        2 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <i8 as ::capnp::introspect::Introspect>::introspect(),
        4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        7 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        8 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        9 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        10 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        11 => <crate::cereal::log_capnp::live_calibration_data::Status as ::capnp::introspect::Introspect>::introspect(),
        12 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[2,3,11,1,4,12,7,8,9,5,6,0,10];
    pub const TYPE_ID: u64 = 0x96df_7075_4d83_90bc;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum Status {
    Uncalibrated = 0,
    Calibrated = 1,
    Invalid = 2,
    Recalibrating = 3,
  }

  impl ::capnp::introspect::Introspect for Status {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &status::ENCODED_NODE, annotation_types: status::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<Status> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: Status) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &status::ENCODED_NODE, annotation_types: status::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for Status {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <Status as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Uncalibrated),
        1 => ::core::result::Result::Ok(Self::Calibrated),
        2 => ::core::result::Result::Ok(Self::Invalid),
        3 => ::core::result::Result::Ok(Self::Recalibrating),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<Status> for u16 {
    #[inline]
    fn from(x: Status) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for Status {
    const TYPE_ID: u64 = 0xcaaa_0294_66ad_394du64;
  }
  mod status {
  pub static ENCODED_NODE: [::capnp::Word; 38] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(77, 57, 173, 102, 148, 2, 170, 202),
    ::capnp::word(30, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(188, 144, 131, 77, 117, 112, 223, 150),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 76, 105, 118, 101, 67, 97),
    ::capnp::word(108, 105, 98, 114, 97, 116, 105, 111),
    ::capnp::word(110, 68, 97, 116, 97, 46, 83, 116),
    ::capnp::word(97, 116, 117, 115, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 99, 97, 108, 105, 98, 114),
    ::capnp::word(97, 116, 101, 100, 0, 0, 0, 0),
    ::capnp::word(99, 97, 108, 105, 98, 114, 97, 116),
    ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 118, 97, 108, 105, 100, 0),
    ::capnp::word(114, 101, 99, 97, 108, 105, 98, 114),
    ::capnp::word(97, 116, 105, 110, 103, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}

pub mod live_tracks {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_track_id(self) -> i32 {
      self.reader.get_data_field::<i32>(0)
    }
    #[inline]
    pub fn get_d_rel(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_y_rel(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_v_rel(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_a_rel(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_time_stamp(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_status(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_current_time(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_stationary(self) -> bool {
      self.reader.get_bool_field(256)
    }
    #[inline]
    pub fn get_oncoming(self) -> bool {
      self.reader.get_bool_field(257)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_track_id(self) -> i32 {
      self.builder.get_data_field::<i32>(0)
    }
    #[inline]
    pub fn set_track_id(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(0, value);
    }
    #[inline]
    pub fn get_d_rel(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_d_rel(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_y_rel(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_y_rel(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_v_rel(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_v_rel(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_a_rel(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_a_rel(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_time_stamp(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_time_stamp(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_status(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_status(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_current_time(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_current_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_stationary(self) -> bool {
      self.builder.get_bool_field(256)
    }
    #[inline]
    pub fn set_stationary(&mut self, value: bool)  {
      self.builder.set_bool_field(256, value);
    }
    #[inline]
    pub fn get_oncoming(self) -> bool {
      self.builder.get_bool_field(257)
    }
    #[inline]
    pub fn set_oncoming(&mut self, value: bool)  {
      self.builder.set_bool_field(257, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 171] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(81, 194, 222, 50, 71, 100, 170, 143),
      ::capnp::word(10, 0, 0, 0, 1, 0, 5, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 170, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 55, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 105, 118, 101, 84, 114),
      ::capnp::word(97, 99, 107, 115, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(40, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 1, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 1, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 0, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 1, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 1, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(68, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(116, 114, 97, 99, 107, 73, 100, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 82, 101, 108, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 82, 101, 108, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 82, 101, 108, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 82, 101, 108, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 83, 116, 97, 109),
      ::capnp::word(112, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 116, 117, 115, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 114, 101, 110, 116, 84),
      ::capnp::word(105, 109, 101, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 116, 105, 111, 110, 97),
      ::capnp::word(114, 121, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 110, 99, 111, 109, 105, 110, 103),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <bool as ::capnp::introspect::Introspect>::introspect(),
        9 => <bool as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[4,7,1,9,8,6,5,0,3,2];
    pub const TYPE_ID: u64 = 0x8faa_6447_32de_c251;
  }
}

pub mod controls_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_v_ego_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn get_a_ego_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_v_pid(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_v_target_lead(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_up_accel_cmd(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_ui_accel_cmd(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_y_actual_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_y_des_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_up_steer_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn get_ui_steer_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn get_a_target_min_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn get_a_target_max_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn get_jerk_factor_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_angle_steers_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_hud_lead_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.reader.get_data_field::<i32>(14)
    }
    #[inline]
    pub fn get_cum_lag_ms(self) -> f32 {
      self.reader.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn get_can_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.reader.get_data_field::<u64>(8)
    }
    #[inline]
    pub fn get_radar_state_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.reader.get_data_field::<u64>(9)
    }
    #[inline]
    pub fn get_md_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.reader.get_data_field::<u64>(10)
    }
    #[inline]
    pub fn get_enabled(self) -> bool {
      self.reader.get_bool_field(704)
    }
    #[inline]
    pub fn get_steer_override_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(705)
    }
    #[inline]
    pub fn get_can_mono_times_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,u64>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_can_mono_times_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_v_cruise(self) -> f32 {
      self.reader.get_data_field::<f32>(23)
    }
    #[inline]
    pub fn get_rear_view_cam_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(706)
    }
    #[inline]
    pub fn get_alert_text1(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_alert_text1(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_alert_text2(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_alert_text2(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_awareness_status_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(24)
    }
    #[inline]
    pub fn get_angle_model_bias_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(25)
    }
    #[inline]
    pub fn get_longitudinal_plan_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(13)
    }
    #[inline]
    pub fn get_steering_angle_desired_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(28)
    }
    #[inline]
    pub fn get_long_control_state(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::actuators::LongControlState,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(45))
    }
    #[inline]
    pub fn get_state(self) -> ::core::result::Result<crate::cereal::log_capnp::controls_state::OpenpilotState,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(58))
    }
    #[inline]
    pub fn get_v_ego_raw_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(30)
    }
    #[inline]
    pub fn get_uf_accel_cmd(self) -> f32 {
      self.reader.get_data_field::<f32>(31)
    }
    #[inline]
    pub fn get_uf_steer_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(32)
    }
    #[inline]
    pub fn get_a_target(self) -> f32 {
      self.reader.get_data_field::<f32>(33)
    }
    #[inline]
    pub fn get_active(self) -> bool {
      self.reader.get_bool_field(707)
    }
    #[inline]
    pub fn get_curvature(self) -> f32 {
      self.reader.get_data_field::<f32>(34)
    }
    #[inline]
    pub fn get_alert_status(self) -> ::core::result::Result<crate::cereal::log_capnp::controls_state::AlertStatus,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(59))
    }
    #[inline]
    pub fn get_alert_size(self) -> ::core::result::Result<crate::cereal::log_capnp::controls_state::AlertSize,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(70))
    }
    #[inline]
    pub fn get_gps_planner_active_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(708)
    }
    #[inline]
    pub fn get_engageable(self) -> bool {
      self.reader.get_bool_field(709)
    }
    #[inline]
    pub fn get_alert_blinking_rate(self) -> f32 {
      self.reader.get_data_field::<f32>(36)
    }
    #[inline]
    pub fn get_driver_monitoring_on_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(710)
    }
    #[inline]
    pub fn get_alert_type(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_alert_type(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_alert_sound_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_alert_sound_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_v_curvature_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(37)
    }
    #[inline]
    pub fn get_decel_for_turn_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(711)
    }
    #[inline]
    pub fn get_start_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(19)
    }
    #[inline]
    pub fn get_map_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(712)
    }
    #[inline]
    pub fn get_lateral_plan_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(20)
    }
    #[inline]
    pub fn get_force_decel(self) -> bool {
      self.reader.get_bool_field(713)
    }
    #[inline]
    pub fn get_lateral_control_state(self) -> crate::cereal::log_capnp::controls_state::lateral_control_state::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_decel_for_model_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(714)
    }
    #[inline]
    pub fn get_alert_sound(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::h_u_d_control::AudibleAlert,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(84))
    }
    #[inline]
    pub fn get_can_error_counter(self) -> u32 {
      self.reader.get_data_field::<u32>(43)
    }
    #[inline]
    pub fn get_desired_curvature(self) -> f32 {
      self.reader.get_data_field::<f32>(44)
    }
    #[inline]
    pub fn get_desired_curvature_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(45)
    }
    #[inline]
    pub fn get_v_cruise_cluster(self) -> f32 {
      self.reader.get_data_field::<f32>(46)
    }
    #[inline]
    pub fn get_experimental_mode(self) -> bool {
      self.reader.get_bool_field(715)
    }
    #[inline]
    pub fn get_personality(self) -> ::core::result::Result<crate::cereal::log_capnp::LongitudinalPersonality,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(85))
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 24, pointers: 6 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_v_ego_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn set_v_ego_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(0, value);
    }
    #[inline]
    pub fn get_a_ego_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_a_ego_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_v_pid(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_v_pid(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_v_target_lead(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_v_target_lead(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_up_accel_cmd(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_up_accel_cmd(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_ui_accel_cmd(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_ui_accel_cmd(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_y_actual_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_y_actual_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_y_des_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_y_des_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_up_steer_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_up_steer_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
    #[inline]
    pub fn get_ui_steer_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn set_ui_steer_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(9, value);
    }
    #[inline]
    pub fn get_a_target_min_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn set_a_target_min_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(10, value);
    }
    #[inline]
    pub fn get_a_target_max_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn set_a_target_max_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(11, value);
    }
    #[inline]
    pub fn get_jerk_factor_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_jerk_factor_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_angle_steers_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_angle_steers_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_hud_lead_d_e_p_r_e_c_a_t_e_d(self) -> i32 {
      self.builder.get_data_field::<i32>(14)
    }
    #[inline]
    pub fn set_hud_lead_d_e_p_r_e_c_a_t_e_d(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(14, value);
    }
    #[inline]
    pub fn get_cum_lag_ms(self) -> f32 {
      self.builder.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn set_cum_lag_ms(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(15, value);
    }
    #[inline]
    pub fn get_can_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.builder.get_data_field::<u64>(8)
    }
    #[inline]
    pub fn set_can_mono_time_d_e_p_r_e_c_a_t_e_d(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(8, value);
    }
    #[inline]
    pub fn get_radar_state_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.builder.get_data_field::<u64>(9)
    }
    #[inline]
    pub fn set_radar_state_mono_time_d_e_p_r_e_c_a_t_e_d(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(9, value);
    }
    #[inline]
    pub fn get_md_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.builder.get_data_field::<u64>(10)
    }
    #[inline]
    pub fn set_md_mono_time_d_e_p_r_e_c_a_t_e_d(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(10, value);
    }
    #[inline]
    pub fn get_enabled(self) -> bool {
      self.builder.get_bool_field(704)
    }
    #[inline]
    pub fn set_enabled(&mut self, value: bool)  {
      self.builder.set_bool_field(704, value);
    }
    #[inline]
    pub fn get_steer_override_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(705)
    }
    #[inline]
    pub fn set_steer_override_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(705, value);
    }
    #[inline]
    pub fn get_can_mono_times_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,u64>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_can_mono_times_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<u64>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_can_mono_times_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,u64> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_can_mono_times_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_v_cruise(self) -> f32 {
      self.builder.get_data_field::<f32>(23)
    }
    #[inline]
    pub fn set_v_cruise(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(23, value);
    }
    #[inline]
    pub fn get_rear_view_cam_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(706)
    }
    #[inline]
    pub fn set_rear_view_cam_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(706, value);
    }
    #[inline]
    pub fn get_alert_text1(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_alert_text1(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
    }
    #[inline]
    pub fn init_alert_text1(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    #[inline]
    pub fn has_alert_text1(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_alert_text2(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_alert_text2(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
    }
    #[inline]
    pub fn init_alert_text2(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    #[inline]
    pub fn has_alert_text2(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_awareness_status_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(24)
    }
    #[inline]
    pub fn set_awareness_status_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(24, value);
    }
    #[inline]
    pub fn get_angle_model_bias_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(25)
    }
    #[inline]
    pub fn set_angle_model_bias_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(25, value);
    }
    #[inline]
    pub fn get_longitudinal_plan_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(13)
    }
    #[inline]
    pub fn set_longitudinal_plan_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(13, value);
    }
    #[inline]
    pub fn get_steering_angle_desired_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(28)
    }
    #[inline]
    pub fn set_steering_angle_desired_deg_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(28, value);
    }
    #[inline]
    pub fn get_long_control_state(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::actuators::LongControlState,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(45))
    }
    #[inline]
    pub fn set_long_control_state(&mut self, value: crate::cereal::car_capnp::car_control::actuators::LongControlState)  {
      self.builder.set_data_field::<u16>(45, value as u16);
    }
    #[inline]
    pub fn get_state(self) -> ::core::result::Result<crate::cereal::log_capnp::controls_state::OpenpilotState,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(58))
    }
    #[inline]
    pub fn set_state(&mut self, value: crate::cereal::log_capnp::controls_state::OpenpilotState)  {
      self.builder.set_data_field::<u16>(58, value as u16);
    }
    #[inline]
    pub fn get_v_ego_raw_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(30)
    }
    #[inline]
    pub fn set_v_ego_raw_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(30, value);
    }
    #[inline]
    pub fn get_uf_accel_cmd(self) -> f32 {
      self.builder.get_data_field::<f32>(31)
    }
    #[inline]
    pub fn set_uf_accel_cmd(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(31, value);
    }
    #[inline]
    pub fn get_uf_steer_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(32)
    }
    #[inline]
    pub fn set_uf_steer_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(32, value);
    }
    #[inline]
    pub fn get_a_target(self) -> f32 {
      self.builder.get_data_field::<f32>(33)
    }
    #[inline]
    pub fn set_a_target(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(33, value);
    }
    #[inline]
    pub fn get_active(self) -> bool {
      self.builder.get_bool_field(707)
    }
    #[inline]
    pub fn set_active(&mut self, value: bool)  {
      self.builder.set_bool_field(707, value);
    }
    #[inline]
    pub fn get_curvature(self) -> f32 {
      self.builder.get_data_field::<f32>(34)
    }
    #[inline]
    pub fn set_curvature(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(34, value);
    }
    #[inline]
    pub fn get_alert_status(self) -> ::core::result::Result<crate::cereal::log_capnp::controls_state::AlertStatus,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(59))
    }
    #[inline]
    pub fn set_alert_status(&mut self, value: crate::cereal::log_capnp::controls_state::AlertStatus)  {
      self.builder.set_data_field::<u16>(59, value as u16);
    }
    #[inline]
    pub fn get_alert_size(self) -> ::core::result::Result<crate::cereal::log_capnp::controls_state::AlertSize,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(70))
    }
    #[inline]
    pub fn set_alert_size(&mut self, value: crate::cereal::log_capnp::controls_state::AlertSize)  {
      self.builder.set_data_field::<u16>(70, value as u16);
    }
    #[inline]
    pub fn get_gps_planner_active_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(708)
    }
    #[inline]
    pub fn set_gps_planner_active_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(708, value);
    }
    #[inline]
    pub fn get_engageable(self) -> bool {
      self.builder.get_bool_field(709)
    }
    #[inline]
    pub fn set_engageable(&mut self, value: bool)  {
      self.builder.set_bool_field(709, value);
    }
    #[inline]
    pub fn get_alert_blinking_rate(self) -> f32 {
      self.builder.get_data_field::<f32>(36)
    }
    #[inline]
    pub fn set_alert_blinking_rate(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(36, value);
    }
    #[inline]
    pub fn get_driver_monitoring_on_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(710)
    }
    #[inline]
    pub fn set_driver_monitoring_on_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(710, value);
    }
    #[inline]
    pub fn get_alert_type(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_alert_type(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false).unwrap()
    }
    #[inline]
    pub fn init_alert_type(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(3).init_text(size)
    }
    #[inline]
    pub fn has_alert_type(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_alert_sound_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_alert_sound_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false).unwrap()
    }
    #[inline]
    pub fn init_alert_sound_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(4).init_text(size)
    }
    #[inline]
    pub fn has_alert_sound_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_v_curvature_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(37)
    }
    #[inline]
    pub fn set_v_curvature_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(37, value);
    }
    #[inline]
    pub fn get_decel_for_turn_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(711)
    }
    #[inline]
    pub fn set_decel_for_turn_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(711, value);
    }
    #[inline]
    pub fn get_start_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(19)
    }
    #[inline]
    pub fn set_start_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(19, value);
    }
    #[inline]
    pub fn get_map_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(712)
    }
    #[inline]
    pub fn set_map_valid_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(712, value);
    }
    #[inline]
    pub fn get_lateral_plan_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(20)
    }
    #[inline]
    pub fn set_lateral_plan_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(20, value);
    }
    #[inline]
    pub fn get_force_decel(self) -> bool {
      self.builder.get_bool_field(713)
    }
    #[inline]
    pub fn set_force_decel(&mut self, value: bool)  {
      self.builder.set_bool_field(713, value);
    }
    #[inline]
    pub fn get_lateral_control_state(self) -> crate::cereal::log_capnp::controls_state::lateral_control_state::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_lateral_control_state(mut self, ) -> crate::cereal::log_capnp::controls_state::lateral_control_state::Builder<'a> {
      self.builder.set_data_field::<u16>(71, 0);
      self.builder.reborrow().get_pointer_field(5).clear();
      self.builder.into()
    }
    #[inline]
    pub fn get_decel_for_model_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(714)
    }
    #[inline]
    pub fn set_decel_for_model_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(714, value);
    }
    #[inline]
    pub fn get_alert_sound(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::h_u_d_control::AudibleAlert,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(84))
    }
    #[inline]
    pub fn set_alert_sound(&mut self, value: crate::cereal::car_capnp::car_control::h_u_d_control::AudibleAlert)  {
      self.builder.set_data_field::<u16>(84, value as u16);
    }
    #[inline]
    pub fn get_can_error_counter(self) -> u32 {
      self.builder.get_data_field::<u32>(43)
    }
    #[inline]
    pub fn set_can_error_counter(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(43, value);
    }
    #[inline]
    pub fn get_desired_curvature(self) -> f32 {
      self.builder.get_data_field::<f32>(44)
    }
    #[inline]
    pub fn set_desired_curvature(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(44, value);
    }
    #[inline]
    pub fn get_desired_curvature_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(45)
    }
    #[inline]
    pub fn set_desired_curvature_rate_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(45, value);
    }
    #[inline]
    pub fn get_v_cruise_cluster(self) -> f32 {
      self.builder.get_data_field::<f32>(46)
    }
    #[inline]
    pub fn set_v_cruise_cluster(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(46, value);
    }
    #[inline]
    pub fn get_experimental_mode(self) -> bool {
      self.builder.get_bool_field(715)
    }
    #[inline]
    pub fn set_experimental_mode(&mut self, value: bool)  {
      self.builder.set_bool_field(715, value);
    }
    #[inline]
    pub fn get_personality(self) -> ::core::result::Result<crate::cereal::log_capnp::LongitudinalPersonality,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(85))
    }
    #[inline]
    pub fn set_personality(&mut self, value: crate::cereal::log_capnp::LongitudinalPersonality)  {
      self.builder.set_data_field::<u16>(85, value as u16);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_lateral_control_state(&self) -> crate::cereal::log_capnp::controls_state::lateral_control_state::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 1072] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
      ::capnp::word(10, 0, 0, 0, 1, 0, 24, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 194, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 167, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 0, 0, 0, 95, 13, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
      ::capnp::word(108, 115, 83, 116, 97, 116, 101, 0),
      ::capnp::word(40, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(97, 172, 209, 210, 150, 139, 229, 219),
      ::capnp::word(73, 0, 0, 0, 122, 0, 0, 0),
      ::capnp::word(98, 60, 25, 19, 209, 220, 208, 160),
      ::capnp::word(73, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(100, 95, 152, 110, 157, 185, 139, 233),
      ::capnp::word(73, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(94, 55, 50, 134, 52, 99, 148, 147),
      ::capnp::word(73, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(227, 117, 147, 224, 201, 93, 140, 242),
      ::capnp::word(77, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(164, 137, 246, 203, 80, 160, 116, 231),
      ::capnp::word(77, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(222, 42, 200, 144, 215, 226, 36, 144),
      ::capnp::word(81, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(241, 128, 153, 172, 136, 234, 228, 162),
      ::capnp::word(81, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(97, 124, 111, 192, 149, 128, 157, 173),
      ::capnp::word(85, 0, 0, 0, 178, 0, 0, 0),
      ::capnp::word(45, 155, 136, 242, 240, 70, 58, 166),
      ::capnp::word(89, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(79, 112, 101, 110, 112, 105, 108, 111),
      ::capnp::word(116, 83, 116, 97, 116, 101, 0, 0),
      ::capnp::word(65, 108, 101, 114, 116, 83, 116, 97),
      ::capnp::word(116, 117, 115, 0, 0, 0, 0, 0),
      ::capnp::word(65, 108, 101, 114, 116, 83, 105, 122),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 73),
      ::capnp::word(78, 68, 73, 83, 116, 97, 116, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 80),
      ::capnp::word(73, 68, 83, 116, 97, 116, 101, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 84),
      ::capnp::word(111, 114, 113, 117, 101, 83, 116, 97),
      ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 76),
      ::capnp::word(81, 82, 83, 116, 97, 116, 101, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 65),
      ::capnp::word(110, 103, 108, 101, 83, 116, 97, 116),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 67),
      ::capnp::word(117, 114, 118, 97, 116, 117, 114, 101),
      ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 68),
      ::capnp::word(101, 98, 117, 103, 83, 116, 97, 116),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(31, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 6, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(33, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 6, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 6, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 6, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 6, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 6, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(37, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 6, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(38, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 6, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(39, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 6, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(40, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 6, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(42, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 6, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(43, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 7, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(56, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 7, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(53, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 7, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(46, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 7, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 7, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(34, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 7, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(35, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 7, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(36, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 7, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 192, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 7, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(57, 0, 0, 0, 193, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 7, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(59, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 7, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 7, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(44, 0, 0, 0, 194, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 7, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(148, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(160, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 7, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 7, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(52, 0, 0, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 7, 0, 0, 210, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(48, 0, 0, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 7, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 7, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(58, 0, 0, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 7, 0, 0, 18, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 45, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 7, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 7, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(32, 0, 0, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 8, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 8, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(41, 0, 0, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 8, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 35, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 8, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 195, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 36, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 8, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 37, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 8, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 59, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 38, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 8, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 70, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 39, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 8, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(68, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(49, 0, 0, 0, 196, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 40, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 8, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(27, 0, 0, 0, 197, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 41, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 8, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 36, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 8, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(45, 0, 0, 0, 198, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 43, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 8, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 44, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 8, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(47, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 45, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 8, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(54, 0, 0, 0, 37, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 46, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 8, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(50, 0, 0, 0, 199, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 47, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 8, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 48, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 8, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(55, 0, 0, 0, 200, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 49, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 8, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 8, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 201, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 51, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 8, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(30, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 70, 68, 107, 77, 145, 91, 253),
      ::capnp::word(201, 8, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(51, 0, 0, 0, 202, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 54, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 8, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 84, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 56, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 8, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(29, 0, 0, 0, 43, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 57, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 8, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 44, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 61, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 8, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(60, 0, 0, 0, 45, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 62, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 8, 0, 0, 250, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 46, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 63, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 8, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 203, 2, 0, 0),
      ::capnp::word(0, 0, 1, 0, 64, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 8, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 85, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 9, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(118, 69, 103, 111, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 69, 103, 111, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 80, 105, 100, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 84, 97, 114, 103, 101, 116, 76),
      ::capnp::word(101, 97, 100, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 112, 65, 99, 99, 101, 108, 67),
      ::capnp::word(109, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 105, 65, 99, 99, 101, 108, 67),
      ::capnp::word(109, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 65, 99, 116, 117, 97, 108, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 68, 101, 115, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 112, 83, 116, 101, 101, 114, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 105, 83, 116, 101, 101, 114, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 84, 97, 114, 103, 101, 116, 77),
      ::capnp::word(105, 110, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 84, 97, 114, 103, 101, 116, 77),
      ::capnp::word(97, 120, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(106, 101, 114, 107, 70, 97, 99, 116),
      ::capnp::word(111, 114, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 108, 101, 83, 116, 101),
      ::capnp::word(101, 114, 115, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 117, 100, 76, 101, 97, 100, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 109, 76, 97, 103, 77, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 77, 111, 110, 111, 84),
      ::capnp::word(105, 109, 101, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 100, 97, 114, 83, 116, 97),
      ::capnp::word(116, 101, 77, 111, 110, 111, 84, 105),
      ::capnp::word(109, 101, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 100, 77, 111, 110, 111, 84, 105),
      ::capnp::word(109, 101, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 97, 98, 108, 101, 100, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 79, 118, 101),
      ::capnp::word(114, 114, 105, 100, 101, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 77, 111, 110, 111, 84),
      ::capnp::word(105, 109, 101, 115, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 67, 114, 117, 105, 115, 101, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 101, 97, 114, 86, 105, 101, 119),
      ::capnp::word(67, 97, 109, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 101, 114, 116, 84, 101, 120),
      ::capnp::word(116, 49, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 101, 114, 116, 84, 101, 120),
      ::capnp::word(116, 50, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 119, 97, 114, 101, 110, 101, 115),
      ::capnp::word(115, 83, 116, 97, 116, 117, 115, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 108, 101, 77, 111, 100),
      ::capnp::word(101, 108, 66, 105, 97, 115, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 80, 108, 97, 110),
      ::capnp::word(77, 111, 110, 111, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(65, 110, 103, 108, 101, 68, 101, 115),
      ::capnp::word(105, 114, 101, 100, 68, 101, 103, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 67, 111, 110, 116),
      ::capnp::word(114, 111, 108, 83, 116, 97, 116, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(130, 130, 144, 125, 145, 58, 15, 228),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 116, 101, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 172, 209, 210, 150, 139, 229, 219),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 69, 103, 111, 82, 97, 119, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 102, 65, 99, 99, 101, 108, 67),
      ::capnp::word(109, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 102, 83, 116, 101, 101, 114, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 84, 97, 114, 103, 101, 116, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 101, 114, 116, 83, 116, 97),
      ::capnp::word(116, 117, 115, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 60, 25, 19, 209, 220, 208, 160),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 101, 114, 116, 83, 105, 122),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 95, 152, 110, 157, 185, 139, 233),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 80, 108, 97, 110, 110),
      ::capnp::word(101, 114, 65, 99, 116, 105, 118, 101),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 103, 97, 103, 101, 97, 98),
      ::capnp::word(108, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 101, 114, 116, 66, 108, 105),
      ::capnp::word(110, 107, 105, 110, 103, 82, 97, 116),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 105, 118, 101, 114, 77, 111),
      ::capnp::word(110, 105, 116, 111, 114, 105, 110, 103),
      ::capnp::word(79, 110, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 101, 114, 116, 84, 121, 112),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 101, 114, 116, 83, 111, 117),
      ::capnp::word(110, 100, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 67, 117, 114, 118, 97, 116, 117),
      ::capnp::word(114, 101, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 99, 101, 108, 70, 111, 114),
      ::capnp::word(84, 117, 114, 110, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 114, 116, 77, 111, 110),
      ::capnp::word(111, 84, 105, 109, 101, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 112, 86, 97, 108, 105, 100),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 101, 114, 97, 108, 80),
      ::capnp::word(108, 97, 110, 77, 111, 110, 111, 84),
      ::capnp::word(105, 109, 101, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 111, 114, 99, 101, 68, 101, 99),
      ::capnp::word(101, 108, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 101, 114, 97, 108, 67),
      ::capnp::word(111, 110, 116, 114, 111, 108, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 99, 101, 108, 70, 111, 114),
      ::capnp::word(77, 111, 100, 101, 108, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 101, 114, 116, 83, 111, 117),
      ::capnp::word(110, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(158, 51, 78, 149, 108, 226, 165, 245),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 69, 114, 114, 111, 114),
      ::capnp::word(67, 111, 117, 110, 116, 101, 114, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 115, 105, 114, 101, 100, 67),
      ::capnp::word(117, 114, 118, 97, 116, 117, 114, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 115, 105, 114, 101, 100, 67),
      ::capnp::word(117, 114, 118, 97, 116, 117, 114, 101),
      ::capnp::word(82, 97, 116, 101, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 67, 114, 117, 105, 115, 101, 67),
      ::capnp::word(108, 117, 115, 116, 101, 114, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 120, 112, 101, 114, 105, 109, 101),
      ::capnp::word(110, 116, 97, 108, 77, 111, 100, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 101, 114, 115, 111, 110, 97, 108),
      ::capnp::word(105, 116, 121, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 125, 36, 26, 61, 226, 146, 214),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        11 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        12 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        14 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        16 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        17 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        18 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        19 => <bool as ::capnp::introspect::Introspect>::introspect(),
        20 => <bool as ::capnp::introspect::Introspect>::introspect(),
        21 => <::capnp::primitive_list::Owned<u64> as ::capnp::introspect::Introspect>::introspect(),
        22 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        23 => <bool as ::capnp::introspect::Introspect>::introspect(),
        24 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        25 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        26 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        27 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        28 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        29 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        30 => <crate::cereal::car_capnp::car_control::actuators::LongControlState as ::capnp::introspect::Introspect>::introspect(),
        31 => <crate::cereal::log_capnp::controls_state::OpenpilotState as ::capnp::introspect::Introspect>::introspect(),
        32 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        33 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        34 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        35 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        36 => <bool as ::capnp::introspect::Introspect>::introspect(),
        37 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        38 => <crate::cereal::log_capnp::controls_state::AlertStatus as ::capnp::introspect::Introspect>::introspect(),
        39 => <crate::cereal::log_capnp::controls_state::AlertSize as ::capnp::introspect::Introspect>::introspect(),
        40 => <bool as ::capnp::introspect::Introspect>::introspect(),
        41 => <bool as ::capnp::introspect::Introspect>::introspect(),
        42 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        43 => <bool as ::capnp::introspect::Introspect>::introspect(),
        44 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        45 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        46 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        47 => <bool as ::capnp::introspect::Introspect>::introspect(),
        48 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        49 => <bool as ::capnp::introspect::Introspect>::introspect(),
        50 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        51 => <bool as ::capnp::introspect::Introspect>::introspect(),
        52 => <crate::cereal::log_capnp::controls_state::lateral_control_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        53 => <bool as ::capnp::introspect::Introspect>::introspect(),
        54 => <crate::cereal::car_capnp::car_control::h_u_d_control::AudibleAlert as ::capnp::introspect::Introspect>::introspect(),
        55 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        56 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        57 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        58 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        59 => <bool as ::capnp::introspect::Introspect>::introspect(),
        60 => <crate::cereal::log_capnp::LongitudinalPersonality as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,35,11,10,36,42,39,54,45,38,24,25,44,27,13,26,55,16,21,15,37,53,47,56,57,43,19,41,59,51,40,14,12,52,50,30,28,49,18,60,17,23,48,31,20,29,33,34,5,9,4,8,22,58,46,0,32,2,3,6,7];
    pub const TYPE_ID: u64 = 0x97ff_69c5_3601_abf1;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum OpenpilotState {
    Disabled = 0,
    PreEnabled = 1,
    Enabled = 2,
    SoftDisabling = 3,
    Overriding = 4,
  }

  impl ::capnp::introspect::Introspect for OpenpilotState {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &openpilot_state::ENCODED_NODE, annotation_types: openpilot_state::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<OpenpilotState> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: OpenpilotState) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &openpilot_state::ENCODED_NODE, annotation_types: openpilot_state::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for OpenpilotState {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <OpenpilotState as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Disabled),
        1 => ::core::result::Result::Ok(Self::PreEnabled),
        2 => ::core::result::Result::Ok(Self::Enabled),
        3 => ::core::result::Result::Ok(Self::SoftDisabling),
        4 => ::core::result::Result::Ok(Self::Overriding),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<OpenpilotState> for u16 {
    #[inline]
    fn from(x: OpenpilotState) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for OpenpilotState {
    const TYPE_ID: u64 = 0xdbe5_8b96_d2d1_ac61u64;
  }
  mod openpilot_state {
  pub static ENCODED_NODE: [::capnp::Word; 43] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(97, 172, 209, 210, 150, 139, 229, 219),
    ::capnp::word(24, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 58, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 127, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
    ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
    ::capnp::word(79, 112, 101, 110, 112, 105, 108, 111),
    ::capnp::word(116, 83, 116, 97, 116, 101, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(100, 105, 115, 97, 98, 108, 101, 100),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 114, 101, 69, 110, 97, 98, 108),
    ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 110, 97, 98, 108, 101, 100, 0),
    ::capnp::word(115, 111, 102, 116, 68, 105, 115, 97),
    ::capnp::word(98, 108, 105, 110, 103, 0, 0, 0),
    ::capnp::word(111, 118, 101, 114, 114, 105, 100, 105),
    ::capnp::word(110, 103, 0, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum AlertStatus {
    Normal = 0,
    UserPrompt = 1,
    Critical = 2,
  }

  impl ::capnp::introspect::Introspect for AlertStatus {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &alert_status::ENCODED_NODE, annotation_types: alert_status::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<AlertStatus> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: AlertStatus) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &alert_status::ENCODED_NODE, annotation_types: alert_status::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for AlertStatus {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <AlertStatus as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Normal),
        1 => ::core::result::Result::Ok(Self::UserPrompt),
        2 => ::core::result::Result::Ok(Self::Critical),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<AlertStatus> for u16 {
    #[inline]
    fn from(x: AlertStatus) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for AlertStatus {
    const TYPE_ID: u64 = 0xa0d0_dcd1_1319_3c62u64;
  }
  mod alert_status {
  pub static ENCODED_NODE: [::capnp::Word; 33] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(98, 60, 25, 19, 209, 220, 208, 160),
    ::capnp::word(24, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 34, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 79, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
    ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
    ::capnp::word(65, 108, 101, 114, 116, 83, 116, 97),
    ::capnp::word(116, 117, 115, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 114, 109, 97, 108, 0, 0),
    ::capnp::word(117, 115, 101, 114, 80, 114, 111, 109),
    ::capnp::word(112, 116, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 114, 105, 116, 105, 99, 97, 108),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum AlertSize {
    None = 0,
    Small = 1,
    Mid = 2,
    Full = 3,
  }

  impl ::capnp::introspect::Introspect for AlertSize {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &alert_size::ENCODED_NODE, annotation_types: alert_size::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<AlertSize> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: AlertSize) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &alert_size::ENCODED_NODE, annotation_types: alert_size::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for AlertSize {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <AlertSize as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::None),
        1 => ::core::result::Result::Ok(Self::Small),
        2 => ::core::result::Result::Ok(Self::Mid),
        3 => ::core::result::Result::Ok(Self::Full),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<AlertSize> for u16 {
    #[inline]
    fn from(x: AlertSize) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for AlertSize {
    const TYPE_ID: u64 = 0xe98b_b99d_6e98_5f64u64;
  }
  mod alert_size {
  pub static ENCODED_NODE: [::capnp::Word; 35] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(100, 95, 152, 110, 157, 185, 139, 233),
    ::capnp::word(24, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
    ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
    ::capnp::word(65, 108, 101, 114, 116, 83, 105, 122),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
    ::capnp::word(115, 109, 97, 108, 108, 0, 0, 0),
    ::capnp::word(109, 105, 100, 0, 0, 0, 0, 0),
    ::capnp::word(102, 117, 108, 108, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod lateral_i_n_d_i_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_steering_rate_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_steering_accel_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_rate_set_point(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_accel_set_point(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_accel_error(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_delayed_output(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_delta(self) -> f32 {
        self.reader.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.reader.get_data_field::<f32>(9)
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_steering_angle_desired_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(10)
      }
      #[inline]
      pub fn get_steering_rate_desired_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(11)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 6, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_active(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_steering_angle_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_steering_rate_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_steering_rate_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_steering_accel_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_steering_accel_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_rate_set_point(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_rate_set_point(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_accel_set_point(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_accel_set_point(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_accel_error(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_accel_error(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_delayed_output(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_delayed_output(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_delta(self) -> f32 {
        self.builder.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn set_delta(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(8, value);
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.builder.get_data_field::<f32>(9)
      }
      #[inline]
      pub fn set_output(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(9, value);
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_saturated(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_steering_angle_desired_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(10)
      }
      #[inline]
      pub fn set_steering_angle_desired_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(10, value);
      }
      #[inline]
      pub fn get_steering_rate_desired_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(11)
      }
      #[inline]
      pub fn set_steering_rate_desired_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(11, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 229] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(94, 55, 50, 134, 52, 99, 148, 147),
        ::capnp::word(24, 0, 0, 0, 1, 0, 6, 0),
        ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 74, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 223, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
        ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
        ::capnp::word(76, 97, 116, 101, 114, 97, 108, 73),
        ::capnp::word(78, 68, 73, 83, 116, 97, 116, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(52, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(93, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(88, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(100, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 1, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(112, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 1, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 1, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(128, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(140, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(137, 1, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(136, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 1, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(144, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(156, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(153, 1, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 1, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 1, 0, 0, 186, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(192, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 103),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(82, 97, 116, 101, 68, 101, 103, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 99, 99, 101, 108, 68, 101, 103),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 97, 116, 101, 83, 101, 116, 80),
        ::capnp::word(111, 105, 110, 116, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 99, 101, 108, 83, 101, 116),
        ::capnp::word(80, 111, 105, 110, 116, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 99, 101, 108, 69, 114, 114),
        ::capnp::word(111, 114, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 108, 97, 121, 101, 100, 79),
        ::capnp::word(117, 116, 112, 117, 116, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 108, 116, 97, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 117, 116, 112, 117, 116, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 117, 114, 97, 116, 101),
        ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 115),
        ::capnp::word(105, 114, 101, 100, 68, 101, 103, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(82, 97, 116, 101, 68, 101, 115, 105),
        ::capnp::word(114, 101, 100, 68, 101, 103, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          10 => <bool as ::capnp::introspect::Introspect>::introspect(),
          11 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          12 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[6,5,0,7,8,9,4,10,3,1,11,2,12];
      pub const TYPE_ID: u64 = 0x9394_6334_8632_375e;
    }
  }

  pub mod lateral_p_i_d_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_steering_rate_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_angle_error(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_p(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_i(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_f(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_steering_angle_desired_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(8)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_active(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_steering_angle_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_steering_rate_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_steering_rate_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_angle_error(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_angle_error(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_p(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_p(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_i(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_i(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_f(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_f(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_output(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_saturated(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_steering_angle_desired_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn set_steering_angle_desired_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(8, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 176] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(227, 117, 147, 224, 201, 93, 140, 242),
        ::capnp::word(24, 0, 0, 0, 1, 0, 5, 0),
        ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 66, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 55, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
        ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
        ::capnp::word(76, 97, 116, 101, 114, 97, 108, 80),
        ::capnp::word(73, 68, 83, 116, 97, 116, 101, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 1, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 1, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(49, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(48, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(60, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(57, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 1, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(68, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(80, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 103),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(82, 97, 116, 101, 68, 101, 103, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 110, 103, 108, 101, 69, 114, 114),
        ::capnp::word(111, 114, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 117, 116, 112, 117, 116, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 117, 114, 97, 116, 101),
        ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 115),
        ::capnp::word(105, 114, 101, 100, 68, 101, 103, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <bool as ::capnp::introspect::Introspect>::introspect(),
          9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,3,6,5,7,4,8,1,9,2];
      pub const TYPE_ID: u64 = 0xf28c_5dc9_e093_75e3;
    }
  }

  pub mod lateral_torque_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_error(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_p(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_i(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_d(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_f(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_error_rate(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_actual_lateral_accel(self) -> f32 {
        self.reader.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn get_desired_lateral_accel(self) -> f32 {
        self.reader.get_data_field::<f32>(9)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_active(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_error(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_error(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_p(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_p(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_i(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_i(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_d(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_f(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_f(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_output(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_saturated(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_error_rate(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_error_rate(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_actual_lateral_accel(self) -> f32 {
        self.builder.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn set_actual_lateral_accel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(8, value);
      }
      #[inline]
      pub fn get_desired_lateral_accel(self) -> f32 {
        self.builder.get_data_field::<f32>(9)
      }
      #[inline]
      pub fn set_desired_lateral_accel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(9, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 191] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(164, 137, 246, 203, 80, 160, 116, 231),
        ::capnp::word(24, 0, 0, 0, 1, 0, 5, 0),
        ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 90, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 111, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
        ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
        ::capnp::word(76, 97, 116, 101, 114, 97, 108, 84),
        ::capnp::word(111, 114, 113, 117, 101, 83, 116, 97),
        ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(44, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(49, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(48, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(60, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(57, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(52, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(76, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(73, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(81, 1, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(84, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(96, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(93, 1, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 114, 114, 111, 114, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 117, 116, 112, 117, 116, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 117, 114, 97, 116, 101),
        ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 114, 114, 111, 114, 82, 97, 116),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 116, 117, 97, 108, 76, 97),
        ::capnp::word(116, 101, 114, 97, 108, 65, 99, 99),
        ::capnp::word(101, 108, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 115, 105, 114, 101, 100, 76),
        ::capnp::word(97, 116, 101, 114, 97, 108, 65, 99),
        ::capnp::word(99, 101, 108, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <bool as ::capnp::introspect::Introspect>::introspect(),
          8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,9,4,10,1,8,5,3,6,2,7];
      pub const TYPE_ID: u64 = 0xe774_a050_cbf6_89a4;
    }
  }

  pub mod lateral_l_q_r_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_i(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_lqr_output(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_steering_angle_desired_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_active(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_steering_angle_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_i(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_i(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_output(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_lqr_output(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_lqr_output(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_saturated(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_steering_angle_desired_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_steering_angle_desired_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 130] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(222, 42, 200, 144, 215, 226, 36, 144),
        ::capnp::word(24, 0, 0, 0, 1, 0, 3, 0),
        ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 66, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 143, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
        ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
        ::capnp::word(76, 97, 116, 101, 114, 97, 108, 76),
        ::capnp::word(81, 82, 83, 116, 97, 116, 101, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 0, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(192, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(201, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 0, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 103),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 117, 116, 112, 117, 116, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 113, 114, 79, 117, 116, 112, 117),
        ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 117, 114, 97, 116, 101),
        ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 115),
        ::capnp::word(105, 114, 101, 100, 68, 101, 103, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <bool as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,2,4,3,5,1,6];
      pub const TYPE_ID: u64 = 0x9024_e2d7_90c8_2ade;
    }
  }

  pub mod lateral_angle_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_steering_angle_desired_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_active(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_steering_angle_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_output(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_saturated(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_steering_angle_desired_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_steering_angle_desired_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 100] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(241, 128, 153, 172, 136, 234, 228, 162),
        ::capnp::word(24, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 82, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 31, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
        ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
        ::capnp::word(76, 97, 116, 101, 114, 97, 108, 65),
        ::capnp::word(110, 103, 108, 101, 83, 116, 97, 116),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(125, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 0, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(132, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(136, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(144, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(156, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(153, 0, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 103),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 117, 116, 112, 117, 116, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 117, 114, 97, 116, 101),
        ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 115),
        ::capnp::word(105, 114, 101, 100, 68, 101, 103, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <bool as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,2,3,1,4];
      pub const TYPE_ID: u64 = 0xa2e4_ea88_ac99_80f1;
    }
  }

  pub mod lateral_curvature_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_actual_curvature(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_desired_curvature(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_error(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_p(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_i(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_f(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.reader.get_bool_field(1)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 4, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_active(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_actual_curvature(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_actual_curvature(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_desired_curvature(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_desired_curvature(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_error(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_error(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_p(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_p(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_i(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_i(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_f(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_f(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_output(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_saturated(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 159] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(97, 124, 111, 192, 149, 128, 157, 173),
        ::capnp::word(24, 0, 0, 0, 1, 0, 4, 0),
        ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 114, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 255, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
        ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
        ::capnp::word(76, 97, 116, 101, 114, 97, 108, 67),
        ::capnp::word(117, 114, 118, 97, 116, 117, 114, 101),
        ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 0, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 0, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(17, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(24, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 116, 117, 97, 108, 67, 117),
        ::capnp::word(114, 118, 97, 116, 117, 114, 101, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 115, 105, 114, 101, 100, 67),
        ::capnp::word(117, 114, 118, 97, 116, 117, 114, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 114, 114, 111, 114, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 117, 116, 112, 117, 116, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 117, 114, 97, 116, 101),
        ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <bool as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1,2,3,6,5,7,4,8];
      pub const TYPE_ID: u64 = 0xad9d_8095_c06f_7c61;
    }
  }

  pub mod lateral_debug_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.reader.get_bool_field(1)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_active(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_steering_angle_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_output(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_output(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_saturated(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_saturated(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 83] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(45, 155, 136, 242, 240, 70, 58, 166),
        ::capnp::word(24, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 82, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 231, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
        ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
        ::capnp::word(76, 97, 116, 101, 114, 97, 108, 68),
        ::capnp::word(101, 98, 117, 103, 83, 116, 97, 116),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 0, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(113, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(128, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 103),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 117, 116, 112, 117, 116, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 117, 114, 97, 116, 101),
        ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <bool as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,2,3,1];
      pub const TYPE_ID: u64 = 0xa63a_46f0_f288_9b2d;
    }
  }

  pub mod lateral_control_state {
    pub use self::Which::{IndiState,PidState,LqrStateDEPRECATED,AngleState,DebugState,TorqueState,CurvatureStateDEPRECATED};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn has_indi_state(&self) -> bool {
        if self.reader.get_data_field::<u16>(71) != 0 { return false; }
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn has_pid_state(&self) -> bool {
        if self.reader.get_data_field::<u16>(71) != 1 { return false; }
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn has_lqr_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        if self.reader.get_data_field::<u16>(71) != 2 { return false; }
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn has_angle_state(&self) -> bool {
        if self.reader.get_data_field::<u16>(71) != 3 { return false; }
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn has_debug_state(&self) -> bool {
        if self.reader.get_data_field::<u16>(71) != 4 { return false; }
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn has_torque_state(&self) -> bool {
        if self.reader.get_data_field::<u16>(71) != 5 { return false; }
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn has_curvature_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        if self.reader.get_data_field::<u16>(71) != 6 { return false; }
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(71) {
          0 => {
            ::core::result::Result::Ok(IndiState(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          1 => {
            ::core::result::Result::Ok(PidState(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          2 => {
            ::core::result::Result::Ok(LqrStateDEPRECATED(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          3 => {
            ::core::result::Result::Ok(AngleState(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          4 => {
            ::core::result::Result::Ok(DebugState(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          5 => {
            ::core::result::Result::Ok(TorqueState(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          6 => {
            ::core::result::Result::Ok(CurvatureStateDEPRECATED(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 24, pointers: 6 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_indi_state(&mut self, value: crate::cereal::log_capnp::controls_state::lateral_i_n_d_i_state::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(71, 0);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_indi_state(self, ) -> crate::cereal::log_capnp::controls_state::lateral_i_n_d_i_state::Builder<'a> {
        self.builder.set_data_field::<u16>(71, 0);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), 0)
      }
      #[inline]
      pub fn has_indi_state(&self) -> bool {
        if self.builder.get_data_field::<u16>(71) != 0 { return false; }
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn set_pid_state(&mut self, value: crate::cereal::log_capnp::controls_state::lateral_p_i_d_state::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(71, 1);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_pid_state(self, ) -> crate::cereal::log_capnp::controls_state::lateral_p_i_d_state::Builder<'a> {
        self.builder.set_data_field::<u16>(71, 1);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), 0)
      }
      #[inline]
      pub fn has_pid_state(&self) -> bool {
        if self.builder.get_data_field::<u16>(71) != 1 { return false; }
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn set_lqr_state_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::controls_state::lateral_l_q_r_state::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(71, 2);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_lqr_state_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::controls_state::lateral_l_q_r_state::Builder<'a> {
        self.builder.set_data_field::<u16>(71, 2);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), 0)
      }
      #[inline]
      pub fn has_lqr_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        if self.builder.get_data_field::<u16>(71) != 2 { return false; }
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn set_angle_state(&mut self, value: crate::cereal::log_capnp::controls_state::lateral_angle_state::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(71, 3);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_angle_state(self, ) -> crate::cereal::log_capnp::controls_state::lateral_angle_state::Builder<'a> {
        self.builder.set_data_field::<u16>(71, 3);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), 0)
      }
      #[inline]
      pub fn has_angle_state(&self) -> bool {
        if self.builder.get_data_field::<u16>(71) != 3 { return false; }
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn set_debug_state(&mut self, value: crate::cereal::log_capnp::controls_state::lateral_debug_state::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(71, 4);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_debug_state(self, ) -> crate::cereal::log_capnp::controls_state::lateral_debug_state::Builder<'a> {
        self.builder.set_data_field::<u16>(71, 4);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), 0)
      }
      #[inline]
      pub fn has_debug_state(&self) -> bool {
        if self.builder.get_data_field::<u16>(71) != 4 { return false; }
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn set_torque_state(&mut self, value: crate::cereal::log_capnp::controls_state::lateral_torque_state::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(71, 5);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_torque_state(self, ) -> crate::cereal::log_capnp::controls_state::lateral_torque_state::Builder<'a> {
        self.builder.set_data_field::<u16>(71, 5);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), 0)
      }
      #[inline]
      pub fn has_torque_state(&self) -> bool {
        if self.builder.get_data_field::<u16>(71) != 5 { return false; }
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn set_curvature_state_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::controls_state::lateral_curvature_state::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(71, 6);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_curvature_state_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::controls_state::lateral_curvature_state::Builder<'a> {
        self.builder.set_data_field::<u16>(71, 6);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), 0)
      }
      #[inline]
      pub fn has_curvature_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        if self.builder.get_data_field::<u16>(71) != 6 { return false; }
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(71) {
          0 => {
            ::core::result::Result::Ok(IndiState(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          1 => {
            ::core::result::Result::Ok(PidState(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          2 => {
            ::core::result::Result::Ok(LqrStateDEPRECATED(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          3 => {
            ::core::result::Result::Ok(AngleState(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          4 => {
            ::core::result::Result::Ok(DebugState(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          5 => {
            ::core::result::Result::Ok(TorqueState(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          6 => {
            ::core::result::Result::Ok(CurvatureStateDEPRECATED(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 134] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(149, 70, 68, 107, 77, 145, 91, 253),
        ::capnp::word(24, 0, 0, 0, 1, 0, 24, 0),
        ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
        ::capnp::word(6, 0, 7, 0, 1, 0, 7, 0),
        ::capnp::word(71, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 98, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 143, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 111, 110, 116, 114, 111),
        ::capnp::word(108, 115, 83, 116, 97, 116, 101, 46),
        ::capnp::word(108, 97, 116, 101, 114, 97, 108, 67),
        ::capnp::word(111, 110, 116, 114, 111, 108, 83, 116),
        ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
        ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 255, 255, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 52, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 254, 255, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 53, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 253, 255, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 55, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 0, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(200, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(212, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 252, 255, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 0, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 251, 255, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 59, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 0, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 250, 255, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 60, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 249, 255, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 65, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 0, 0, 0, 202, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(105, 110, 100, 105, 83, 116, 97, 116),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(94, 55, 50, 134, 52, 99, 148, 147),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 105, 100, 83, 116, 97, 116, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(227, 117, 147, 224, 201, 93, 140, 242),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 113, 114, 83, 116, 97, 116, 101),
        ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
        ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(222, 42, 200, 144, 215, 226, 36, 144),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 110, 103, 108, 101, 83, 116, 97),
        ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 128, 153, 172, 136, 234, 228, 162),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 98, 117, 103, 83, 116, 97),
        ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 155, 136, 242, 240, 70, 58, 166),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 114, 113, 117, 101, 83, 116),
        ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 137, 246, 203, 80, 160, 116, 231),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
        ::capnp::word(101, 83, 116, 97, 116, 101, 68, 69),
        ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 124, 111, 192, 149, 128, 157, 173),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <crate::cereal::log_capnp::controls_state::lateral_i_n_d_i_state::Owned as ::capnp::introspect::Introspect>::introspect(),
          1 => <crate::cereal::log_capnp::controls_state::lateral_p_i_d_state::Owned as ::capnp::introspect::Introspect>::introspect(),
          2 => <crate::cereal::log_capnp::controls_state::lateral_l_q_r_state::Owned as ::capnp::introspect::Introspect>::introspect(),
          3 => <crate::cereal::log_capnp::controls_state::lateral_angle_state::Owned as ::capnp::introspect::Introspect>::introspect(),
          4 => <crate::cereal::log_capnp::controls_state::lateral_debug_state::Owned as ::capnp::introspect::Introspect>::introspect(),
          5 => <crate::cereal::log_capnp::controls_state::lateral_torque_state::Owned as ::capnp::introspect::Introspect>::introspect(),
          6 => <crate::cereal::log_capnp::controls_state::lateral_curvature_state::Owned as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[0,1,2,3,4,5,6];
      pub static MEMBERS_BY_NAME : &[u16] = &[3,6,4,0,2,1,5];
      pub const TYPE_ID: u64 = 0xfd5b_914d_6b44_4695;
    }
    pub enum Which<A0,A1,A2,A3,A4,A5,A6> {
      IndiState(A0),
      PidState(A1),
      LqrStateDEPRECATED(A2),
      AngleState(A3),
      DebugState(A4),
      TorqueState(A5),
      CurvatureStateDEPRECATED(A6),
    }
    pub type WhichReader<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_i_n_d_i_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_p_i_d_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_l_q_r_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_angle_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_debug_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_torque_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_curvature_state::Reader<'a>>>;
    pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_i_n_d_i_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_p_i_d_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_l_q_r_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_angle_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_debug_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_torque_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::lateral_curvature_state::Builder<'a>>>;
  }
}

pub mod x_y_z_t_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_x(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_y(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_z(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_z(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_t(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_t(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_x_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_x_std(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_y_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_y_std(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_z_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_z_std(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 7 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_x(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_x(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_x(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_y(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_y(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_y(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_z(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_z(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_z(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_z(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_t(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_t(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_t(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_t(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_x_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_x_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_x_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_x_std(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_y_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_y_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_y_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_y_std(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_z_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_z_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_z_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    #[inline]
    pub fn has_z_std(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 150] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(128, 174, 5, 213, 31, 174, 203, 195),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(7, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 143, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 88, 89, 90, 84, 68, 97),
      ::capnp::word(116, 97, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(68, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(122, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 83, 116, 100, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 83, 116, 100, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(122, 83, 116, 100, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[3,0,4,1,5,2,6];
    pub const TYPE_ID: u64 = 0xc3cb_ae1f_d505_ae80;
  }
}

pub mod model_data_v2 {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_frame_age(self) -> u32 {
      self.reader.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn get_frame_drop_perc(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.reader.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn get_position(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_position(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_orientation(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_orientation(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_velocity(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_velocity(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_orientation_rate(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_orientation_rate(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_lane_lines(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::x_y_z_t_data::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_lane_lines(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_lane_line_probs(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_lane_line_probs(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_road_edges(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::x_y_z_t_data::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_road_edges(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_leads(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::model_data_v2::lead_data_v2::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_leads(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_meta(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::meta_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_meta(&self) -> bool {
      !self.reader.get_pointer_field(8).is_null()
    }
    #[inline]
    pub fn get_lane_line_stds(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_lane_line_stds(&self) -> bool {
      !self.reader.get_pointer_field(9).is_null()
    }
    #[inline]
    pub fn get_road_edge_stds(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_road_edge_stds(&self) -> bool {
      !self.reader.get_pointer_field(10).is_null()
    }
    #[inline]
    pub fn get_model_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_raw_predictions(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(11), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_raw_predictions(&self) -> bool {
      !self.reader.get_pointer_field(11).is_null()
    }
    #[inline]
    pub fn get_gpu_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_leads_v3(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::model_data_v2::lead_data_v3::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(12), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_leads_v3(&self) -> bool {
      !self.reader.get_pointer_field(12).is_null()
    }
    #[inline]
    pub fn get_acceleration(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(13), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_acceleration(&self) -> bool {
      !self.reader.get_pointer_field(13).is_null()
    }
    #[inline]
    pub fn get_frame_id_extra(self) -> u32 {
      self.reader.get_data_field::<u32>(7)
    }
    #[inline]
    pub fn get_temporal_pose(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::pose::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(14), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_temporal_pose(&self) -> bool {
      !self.reader.get_pointer_field(14).is_null()
    }
    #[inline]
    pub fn get_nav_enabled(self) -> bool {
      self.reader.get_bool_field(256)
    }
    #[inline]
    pub fn get_confidence(self) -> ::core::result::Result<crate::cereal::log_capnp::model_data_v2::ConfidenceClass,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(17))
    }
    #[inline]
    pub fn get_location_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(5)
    }
    #[inline]
    pub fn get_lateral_planner_solution_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::lateral_planner_solution::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(15), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_lateral_planner_solution_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(15).is_null()
    }
    #[inline]
    pub fn get_action(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::action::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(16), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_action(&self) -> bool {
      !self.reader.get_pointer_field(16).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 6, pointers: 17 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_frame_age(self) -> u32 {
      self.builder.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn set_frame_age(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn get_frame_drop_perc(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_frame_drop_perc(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.builder.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn set_timestamp_eof(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(2, value);
    }
    #[inline]
    pub fn get_position(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_position(&mut self, value: crate::cereal::log_capnp::x_y_z_t_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_position(self, ) -> crate::cereal::log_capnp::x_y_z_t_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_position(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_orientation(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_orientation(&mut self, value: crate::cereal::log_capnp::x_y_z_t_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_orientation(self, ) -> crate::cereal::log_capnp::x_y_z_t_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_orientation(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_velocity(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_velocity(&mut self, value: crate::cereal::log_capnp::x_y_z_t_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_velocity(self, ) -> crate::cereal::log_capnp::x_y_z_t_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    #[inline]
    pub fn has_velocity(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_orientation_rate(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_orientation_rate(&mut self, value: crate::cereal::log_capnp::x_y_z_t_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_orientation_rate(self, ) -> crate::cereal::log_capnp::x_y_z_t_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    #[inline]
    pub fn has_orientation_rate(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_lane_lines(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::x_y_z_t_data::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_lane_lines(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::x_y_z_t_data::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_lane_lines(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::x_y_z_t_data::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_lane_lines(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_lane_line_probs(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_lane_line_probs(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_lane_line_probs(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_lane_line_probs(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_road_edges(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::x_y_z_t_data::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_road_edges(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::x_y_z_t_data::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_road_edges(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::x_y_z_t_data::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    #[inline]
    pub fn has_road_edges(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_leads(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::model_data_v2::lead_data_v2::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_leads(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::model_data_v2::lead_data_v2::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_leads(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::model_data_v2::lead_data_v2::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
    }
    #[inline]
    pub fn has_leads(&self) -> bool {
      !self.builder.is_pointer_field_null(7)
    }
    #[inline]
    pub fn get_meta(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::meta_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_meta(&mut self, value: crate::cereal::log_capnp::model_data_v2::meta_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(8), value, false)
    }
    #[inline]
    pub fn init_meta(self, ) -> crate::cereal::log_capnp::model_data_v2::meta_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(8), 0)
    }
    #[inline]
    pub fn has_meta(&self) -> bool {
      !self.builder.is_pointer_field_null(8)
    }
    #[inline]
    pub fn get_lane_line_stds(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_lane_line_stds(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false)
    }
    #[inline]
    pub fn init_lane_line_stds(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(9), size)
    }
    #[inline]
    pub fn has_lane_line_stds(&self) -> bool {
      !self.builder.is_pointer_field_null(9)
    }
    #[inline]
    pub fn get_road_edge_stds(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_road_edge_stds(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(10), value, false)
    }
    #[inline]
    pub fn init_road_edge_stds(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(10), size)
    }
    #[inline]
    pub fn has_road_edge_stds(&self) -> bool {
      !self.builder.is_pointer_field_null(10)
    }
    #[inline]
    pub fn get_model_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_model_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_raw_predictions(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(11), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_raw_predictions(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(11).set_data(value);
    }
    #[inline]
    pub fn init_raw_predictions(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(11).init_data(size)
    }
    #[inline]
    pub fn has_raw_predictions(&self) -> bool {
      !self.builder.is_pointer_field_null(11)
    }
    #[inline]
    pub fn get_gpu_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_gpu_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_leads_v3(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::model_data_v2::lead_data_v3::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(12), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_leads_v3(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::model_data_v2::lead_data_v3::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(12), value, false)
    }
    #[inline]
    pub fn init_leads_v3(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::model_data_v2::lead_data_v3::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(12), size)
    }
    #[inline]
    pub fn has_leads_v3(&self) -> bool {
      !self.builder.is_pointer_field_null(12)
    }
    #[inline]
    pub fn get_acceleration(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(13), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_acceleration(&mut self, value: crate::cereal::log_capnp::x_y_z_t_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(13), value, false)
    }
    #[inline]
    pub fn init_acceleration(self, ) -> crate::cereal::log_capnp::x_y_z_t_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(13), 0)
    }
    #[inline]
    pub fn has_acceleration(&self) -> bool {
      !self.builder.is_pointer_field_null(13)
    }
    #[inline]
    pub fn get_frame_id_extra(self) -> u32 {
      self.builder.get_data_field::<u32>(7)
    }
    #[inline]
    pub fn set_frame_id_extra(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(7, value);
    }
    #[inline]
    pub fn get_temporal_pose(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::pose::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(14), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_temporal_pose(&mut self, value: crate::cereal::log_capnp::model_data_v2::pose::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(14), value, false)
    }
    #[inline]
    pub fn init_temporal_pose(self, ) -> crate::cereal::log_capnp::model_data_v2::pose::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(14), 0)
    }
    #[inline]
    pub fn has_temporal_pose(&self) -> bool {
      !self.builder.is_pointer_field_null(14)
    }
    #[inline]
    pub fn get_nav_enabled(self) -> bool {
      self.builder.get_bool_field(256)
    }
    #[inline]
    pub fn set_nav_enabled(&mut self, value: bool)  {
      self.builder.set_bool_field(256, value);
    }
    #[inline]
    pub fn get_confidence(self) -> ::core::result::Result<crate::cereal::log_capnp::model_data_v2::ConfidenceClass,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(17))
    }
    #[inline]
    pub fn set_confidence(&mut self, value: crate::cereal::log_capnp::model_data_v2::ConfidenceClass)  {
      self.builder.set_data_field::<u16>(17, value as u16);
    }
    #[inline]
    pub fn get_location_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(5)
    }
    #[inline]
    pub fn set_location_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(5, value);
    }
    #[inline]
    pub fn get_lateral_planner_solution_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::lateral_planner_solution::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(15), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_lateral_planner_solution_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::model_data_v2::lateral_planner_solution::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(15), value, false)
    }
    #[inline]
    pub fn init_lateral_planner_solution_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::model_data_v2::lateral_planner_solution::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(15), 0)
    }
    #[inline]
    pub fn has_lateral_planner_solution_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(15)
    }
    #[inline]
    pub fn get_action(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::action::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(16), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_action(&mut self, value: crate::cereal::log_capnp::model_data_v2::action::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(16), value, false)
    }
    #[inline]
    pub fn init_action(self, ) -> crate::cereal::log_capnp::model_data_v2::action::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(16), 0)
    }
    #[inline]
    pub fn has_action(&self) -> bool {
      !self.builder.is_pointer_field_null(16)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_position(&self) -> crate::cereal::log_capnp::x_y_z_t_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
    pub fn get_orientation(&self) -> crate::cereal::log_capnp::x_y_z_t_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_velocity(&self) -> crate::cereal::log_capnp::x_y_z_t_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
    pub fn get_orientation_rate(&self) -> crate::cereal::log_capnp::x_y_z_t_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
    pub fn get_meta(&self) -> crate::cereal::log_capnp::model_data_v2::meta_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(8))
    }
    pub fn get_acceleration(&self) -> crate::cereal::log_capnp::x_y_z_t_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(13))
    }
    pub fn get_temporal_pose(&self) -> crate::cereal::log_capnp::model_data_v2::pose::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(14))
    }
    pub fn get_lateral_planner_solution_d_e_p_r_e_c_a_t_e_d(&self) -> crate::cereal::log_capnp::model_data_v2::lateral_planner_solution::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(15))
    }
    pub fn get_action(&self) -> crate::cereal::log_capnp::model_data_v2::action::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(16))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 510] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
      ::capnp::word(10, 0, 0, 0, 1, 0, 6, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(17, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 178, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 135, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 0, 0, 0, 239, 5, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 77, 111, 100, 101, 108, 68),
      ::capnp::word(97, 116, 97, 86, 50, 0, 0, 0),
      ::capnp::word(32, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(40, 175, 135, 33, 43, 237, 68, 164),
      ::capnp::word(57, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(235, 127, 206, 208, 26, 136, 152, 214),
      ::capnp::word(57, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(189, 250, 92, 180, 179, 106, 100, 209),
      ::capnp::word(57, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(212, 28, 166, 210, 217, 71, 50, 170),
      ::capnp::word(57, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(37, 141, 220, 188, 221, 165, 10, 134),
      ::capnp::word(57, 0, 0, 0, 170, 0, 0, 0),
      ::capnp::word(79, 136, 103, 46, 112, 192, 62, 251),
      ::capnp::word(61, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(254, 172, 180, 166, 165, 236, 202, 132),
      ::capnp::word(57, 0, 0, 0, 186, 0, 0, 0),
      ::capnp::word(132, 69, 118, 90, 179, 188, 208, 148),
      ::capnp::word(61, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(76, 101, 97, 100, 68, 97, 116, 97),
      ::capnp::word(86, 50, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 101, 97, 100, 68, 97, 116, 97),
      ::capnp::word(86, 51, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 101, 116, 97, 68, 97, 116, 97),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(67, 111, 110, 102, 105, 100, 101, 110),
      ::capnp::word(99, 101, 67, 108, 97, 115, 115, 0),
      ::capnp::word(68, 105, 115, 101, 110, 103, 97, 103),
      ::capnp::word(101, 80, 114, 101, 100, 105, 99, 116),
      ::capnp::word(105, 111, 110, 115, 0, 0, 0, 0),
      ::capnp::word(80, 111, 115, 101, 0, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 80),
      ::capnp::word(108, 97, 110, 110, 101, 114, 83, 111),
      ::capnp::word(108, 117, 116, 105, 111, 110, 0, 0),
      ::capnp::word(65, 99, 116, 105, 111, 110, 0, 0),
      ::capnp::word(108, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 2, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 2, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 2, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 2, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 3, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 3, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 3, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 3, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 3, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 3, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 3, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 3, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 3, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 3, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 3, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 3, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 0, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 3, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 4, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 4, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 4, 0, 0, 10, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 4, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 97, 109, 101, 65, 103, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 97, 109, 101, 68, 114, 111),
      ::capnp::word(112, 80, 101, 114, 99, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
      ::capnp::word(112, 69, 111, 102, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 105, 116, 105, 111, 110),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 174, 5, 213, 31, 174, 203, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 105, 101, 110, 116, 97, 116),
      ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 174, 5, 213, 31, 174, 203, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 101, 108, 111, 99, 105, 116, 121),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 174, 5, 213, 31, 174, 203, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 105, 101, 110, 116, 97, 116),
      ::capnp::word(105, 111, 110, 82, 97, 116, 101, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 174, 5, 213, 31, 174, 203, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 110, 101, 76, 105, 110, 101),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 174, 5, 213, 31, 174, 203, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 110, 101, 76, 105, 110, 101),
      ::capnp::word(80, 114, 111, 98, 115, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 69, 100, 103, 101),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 174, 5, 213, 31, 174, 203, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 97, 100, 115, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 175, 135, 33, 43, 237, 68, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 101, 116, 97, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 250, 92, 180, 179, 106, 100, 209),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 110, 101, 76, 105, 110, 101),
      ::capnp::word(83, 116, 100, 115, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 69, 100, 103, 101),
      ::capnp::word(83, 116, 100, 115, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 108, 69, 120, 101),
      ::capnp::word(99, 117, 116, 105, 111, 110, 84, 105),
      ::capnp::word(109, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 119, 80, 114, 101, 100, 105),
      ::capnp::word(99, 116, 105, 111, 110, 115, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 117, 69, 120, 101, 99, 117),
      ::capnp::word(116, 105, 111, 110, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 97, 100, 115, 86, 51, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(235, 127, 206, 208, 26, 136, 152, 214),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 101, 108, 101, 114, 97),
      ::capnp::word(116, 105, 111, 110, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 174, 5, 213, 31, 174, 203, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 69),
      ::capnp::word(120, 116, 114, 97, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 101, 109, 112, 111, 114, 97, 108),
      ::capnp::word(80, 111, 115, 101, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(79, 136, 103, 46, 112, 192, 62, 251),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 97, 118, 69, 110, 97, 98, 108),
      ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 110, 102, 105, 100, 101, 110),
      ::capnp::word(99, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 28, 166, 210, 217, 71, 50, 170),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 99, 97, 116, 105, 111, 110),
      ::capnp::word(77, 111, 110, 111, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 101, 114, 97, 108, 80),
      ::capnp::word(108, 97, 110, 110, 101, 114, 83, 111),
      ::capnp::word(108, 117, 116, 105, 111, 110, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(254, 172, 180, 166, 165, 236, 202, 132),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 116, 105, 111, 110, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 69, 118, 90, 179, 188, 208, 148),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::x_y_z_t_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <crate::cereal::log_capnp::x_y_z_t_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        6 => <crate::cereal::log_capnp::x_y_z_t_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        7 => <crate::cereal::log_capnp::x_y_z_t_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        8 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::x_y_z_t_data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        9 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        10 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::x_y_z_t_data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        11 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::model_data_v2::lead_data_v2::Owned> as ::capnp::introspect::Introspect>::introspect(),
        12 => <crate::cereal::log_capnp::model_data_v2::meta_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        13 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        14 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        16 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        17 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        18 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::model_data_v2::lead_data_v3::Owned> as ::capnp::introspect::Introspect>::introspect(),
        19 => <crate::cereal::log_capnp::x_y_z_t_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        20 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        21 => <crate::cereal::log_capnp::model_data_v2::pose::Owned as ::capnp::introspect::Introspect>::introspect(),
        22 => <bool as ::capnp::introspect::Introspect>::introspect(),
        23 => <crate::cereal::log_capnp::model_data_v2::ConfidenceClass as ::capnp::introspect::Introspect>::introspect(),
        24 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        25 => <crate::cereal::log_capnp::model_data_v2::lateral_planner_solution::Owned as ::capnp::introspect::Introspect>::introspect(),
        26 => <crate::cereal::log_capnp::model_data_v2::action::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[19,26,23,1,2,0,20,17,9,13,8,25,11,18,24,12,15,22,5,7,4,16,14,10,21,3,6];
    pub const TYPE_ID: u64 = 0xc471_3f6b_0d36_abe9;
  }

  pub mod lead_data_v2 {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_t(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_xyva(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_xyva(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_xyva_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_xyva_std(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_t(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_t(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_xyva(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_xyva(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_xyva(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_xyva(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_xyva_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_xyva_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_xyva_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_xyva_std(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 87] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(40, 175, 135, 33, 43, 237, 68, 164),
        ::capnp::word(22, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 10, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 231, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 111, 100, 101, 108, 68),
        ::capnp::word(97, 116, 97, 86, 50, 46, 76, 101),
        ::capnp::word(97, 100, 68, 97, 116, 97, 86, 50),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(128, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(125, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(112, 114, 111, 98, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 121, 118, 97, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 121, 118, 97, 83, 116, 100, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1,2,3];
      pub const TYPE_ID: u64 = 0xa444_ed2b_2187_af28;
    }
  }

  pub mod lead_data_v3 {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_prob_time(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_t(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_t(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_x_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_x_std(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_y(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_y_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_y_std(&self) -> bool {
        !self.reader.get_pointer_field(4).is_null()
      }
      #[inline]
      pub fn get_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_v(&self) -> bool {
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn get_v_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_v_std(&self) -> bool {
        !self.reader.get_pointer_field(6).is_null()
      }
      #[inline]
      pub fn get_a(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_a(&self) -> bool {
        !self.reader.get_pointer_field(7).is_null()
      }
      #[inline]
      pub fn get_a_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_a_std(&self) -> bool {
        !self.reader.get_pointer_field(8).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 9 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_prob_time(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_prob_time(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_t(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_t(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_t(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_t(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_x(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_x(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_x_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_x_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_x_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_x_std(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_y(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_y(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_y(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_y_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_y_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
      }
      #[inline]
      pub fn init_y_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
      }
      #[inline]
      pub fn has_y_std(&self) -> bool {
        !self.builder.is_pointer_field_null(4)
      }
      #[inline]
      pub fn get_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
      }
      #[inline]
      pub fn has_v(&self) -> bool {
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn get_v_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_v_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
      }
      #[inline]
      pub fn init_v_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
      }
      #[inline]
      pub fn has_v_std(&self) -> bool {
        !self.builder.is_pointer_field_null(6)
      }
      #[inline]
      pub fn get_a(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_a(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
      }
      #[inline]
      pub fn init_a(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
      }
      #[inline]
      pub fn has_a(&self) -> bool {
        !self.builder.is_pointer_field_null(7)
      }
      #[inline]
      pub fn get_a_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_a_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(8), value, false)
      }
      #[inline]
      pub fn init_a_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(8), size)
      }
      #[inline]
      pub fn has_a_std(&self) -> bool {
        !self.builder.is_pointer_field_null(8)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 221] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(235, 127, 206, 208, 26, 136, 152, 214),
        ::capnp::word(22, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
        ::capnp::word(9, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 10, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 111, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 111, 100, 101, 108, 68),
        ::capnp::word(97, 116, 97, 86, 50, 46, 76, 101),
        ::capnp::word(97, 100, 68, 97, 116, 97, 86, 51),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(44, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 1, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(49, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(72, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(84, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(112, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(149, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(144, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(212, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(112, 114, 111, 98, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 114, 111, 98, 84, 105, 109, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 83, 116, 100, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 83, 116, 100, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 83, 116, 100, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 83, 116, 100, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          7 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          8 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          9 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          10 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[9,10,0,1,2,7,8,3,4,5,6];
      pub const TYPE_ID: u64 = 0xd698_881a_d0ce_7feb;
    }
  }

  pub mod meta_data {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_engaged_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_desire_prediction(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_desire_prediction(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_brake_disengage_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_gas_disengage_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_steer_override_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_desire_state(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_desire_state(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_disengage_predictions(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::disengage_predictions::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_disengage_predictions(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_hard_brake_predicted(self) -> bool {
        self.reader.get_bool_field(128)
      }
      #[inline]
      pub fn get_lane_change_state(self) -> ::core::result::Result<crate::cereal::log_capnp::LaneChangeState,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(9))
      }
      #[inline]
      pub fn get_lane_change_direction(self) -> ::core::result::Result<crate::cereal::log_capnp::LaneChangeDirection,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(10))
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 3 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_engaged_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_engaged_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_desire_prediction(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_desire_prediction(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_desire_prediction(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_desire_prediction(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_brake_disengage_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_brake_disengage_prob_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_gas_disengage_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_gas_disengage_prob_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_steer_override_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_steer_override_prob_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_desire_state(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_desire_state(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_desire_state(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_desire_state(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_disengage_predictions(self) -> ::capnp::Result<crate::cereal::log_capnp::model_data_v2::disengage_predictions::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_disengage_predictions(&mut self, value: crate::cereal::log_capnp::model_data_v2::disengage_predictions::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_disengage_predictions(self, ) -> crate::cereal::log_capnp::model_data_v2::disengage_predictions::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
      }
      #[inline]
      pub fn has_disengage_predictions(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_hard_brake_predicted(self) -> bool {
        self.builder.get_bool_field(128)
      }
      #[inline]
      pub fn set_hard_brake_predicted(&mut self, value: bool)  {
        self.builder.set_bool_field(128, value);
      }
      #[inline]
      pub fn get_lane_change_state(self) -> ::core::result::Result<crate::cereal::log_capnp::LaneChangeState,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(9))
      }
      #[inline]
      pub fn set_lane_change_state(&mut self, value: crate::cereal::log_capnp::LaneChangeState)  {
        self.builder.set_data_field::<u16>(9, value as u16);
      }
      #[inline]
      pub fn get_lane_change_direction(self) -> ::core::result::Result<crate::cereal::log_capnp::LaneChangeDirection,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(10))
      }
      #[inline]
      pub fn set_lane_change_direction(&mut self, value: crate::cereal::log_capnp::LaneChangeDirection)  {
        self.builder.set_data_field::<u16>(10, value as u16);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
      pub fn get_disengage_predictions(&self) -> crate::cereal::log_capnp::model_data_v2::disengage_predictions::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
      }
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 196] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(189, 250, 92, 180, 179, 106, 100, 209),
        ::capnp::word(22, 0, 0, 0, 1, 0, 3, 0),
        ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
        ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 55, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 111, 100, 101, 108, 68),
        ::capnp::word(97, 116, 97, 86, 50, 46, 77, 101),
        ::capnp::word(116, 97, 68, 97, 116, 97, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 1, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(17, 1, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(20, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 1, 0, 0, 234, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(52, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 1, 0, 0, 218, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(68, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(80, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(77, 1, 0, 0, 226, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(84, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(96, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(93, 1, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 1, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 128, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 1, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(132, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(149, 1, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(101, 110, 103, 97, 103, 101, 100, 80),
        ::capnp::word(114, 111, 98, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 115, 105, 114, 101, 80, 114),
        ::capnp::word(101, 100, 105, 99, 116, 105, 111, 110),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 114, 97, 107, 101, 68, 105, 115),
        ::capnp::word(101, 110, 103, 97, 103, 101, 80, 114),
        ::capnp::word(111, 98, 68, 69, 80, 82, 69, 67),
        ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 115, 68, 105, 115, 101, 110),
        ::capnp::word(103, 97, 103, 101, 80, 114, 111, 98),
        ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
        ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 79, 118, 101),
        ::capnp::word(114, 114, 105, 100, 101, 80, 114, 111),
        ::capnp::word(98, 68, 69, 80, 82, 69, 67, 65),
        ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 115, 105, 114, 101, 83, 116),
        ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 105, 115, 101, 110, 103, 97, 103),
        ::capnp::word(101, 80, 114, 101, 100, 105, 99, 116),
        ::capnp::word(105, 111, 110, 115, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 141, 220, 188, 221, 165, 10, 134),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 114, 100, 66, 114, 97, 107),
        ::capnp::word(101, 80, 114, 101, 100, 105, 99, 116),
        ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
        ::capnp::word(103, 101, 83, 116, 97, 116, 101, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(210, 211, 178, 247, 75, 146, 55, 205),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
        ::capnp::word(103, 101, 68, 105, 114, 101, 99, 116),
        ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 17, 103, 254, 193, 192, 11, 157),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          6 => <crate::cereal::log_capnp::model_data_v2::disengage_predictions::Owned as ::capnp::introspect::Introspect>::introspect(),
          7 => <bool as ::capnp::introspect::Introspect>::introspect(),
          8 => <crate::cereal::log_capnp::LaneChangeState as ::capnp::introspect::Introspect>::introspect(),
          9 => <crate::cereal::log_capnp::LaneChangeDirection as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[2,1,5,6,0,3,7,9,8,4];
      pub const TYPE_ID: u64 = 0xd164_6ab3_b45c_fabd;
    }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum ConfidenceClass {
    Red = 0,
    Yellow = 1,
    Green = 2,
  }

  impl ::capnp::introspect::Introspect for ConfidenceClass {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &confidence_class::ENCODED_NODE, annotation_types: confidence_class::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<ConfidenceClass> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: ConfidenceClass) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &confidence_class::ENCODED_NODE, annotation_types: confidence_class::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for ConfidenceClass {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <ConfidenceClass as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Red),
        1 => ::core::result::Result::Ok(Self::Yellow),
        2 => ::core::result::Result::Ok(Self::Green),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<ConfidenceClass> for u16 {
    #[inline]
    fn from(x: ConfidenceClass) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for ConfidenceClass {
    const TYPE_ID: u64 = 0xaa32_47d9_d2a6_1cd4u64;
  }
  mod confidence_class {
  pub static ENCODED_NODE: [::capnp::Word; 31] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(212, 28, 166, 210, 217, 71, 50, 170),
    ::capnp::word(22, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 50, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 79, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 77, 111, 100, 101, 108, 68),
    ::capnp::word(97, 116, 97, 86, 50, 46, 67, 111),
    ::capnp::word(110, 102, 105, 100, 101, 110, 99, 101),
    ::capnp::word(67, 108, 97, 115, 115, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 101, 100, 0, 0, 0, 0, 0),
    ::capnp::word(121, 101, 108, 108, 111, 119, 0, 0),
    ::capnp::word(103, 114, 101, 101, 110, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod disengage_predictions {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_t(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_t(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_brake_disengage_probs(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_brake_disengage_probs(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_gas_disengage_probs(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_gas_disengage_probs(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_steer_override_probs(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_steer_override_probs(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_brake3_meters_per_second_squared_probs(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_brake3_meters_per_second_squared_probs(&self) -> bool {
        !self.reader.get_pointer_field(4).is_null()
      }
      #[inline]
      pub fn get_brake4_meters_per_second_squared_probs(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_brake4_meters_per_second_squared_probs(&self) -> bool {
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn get_brake5_meters_per_second_squared_probs(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_brake5_meters_per_second_squared_probs(&self) -> bool {
        !self.reader.get_pointer_field(6).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 7 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_t(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_t(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_t(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_t(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_brake_disengage_probs(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_brake_disengage_probs(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_brake_disengage_probs(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_brake_disengage_probs(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_gas_disengage_probs(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_gas_disengage_probs(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_gas_disengage_probs(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_gas_disengage_probs(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_steer_override_probs(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_steer_override_probs(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_steer_override_probs(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_steer_override_probs(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_brake3_meters_per_second_squared_probs(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_brake3_meters_per_second_squared_probs(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
      }
      #[inline]
      pub fn init_brake3_meters_per_second_squared_probs(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
      }
      #[inline]
      pub fn has_brake3_meters_per_second_squared_probs(&self) -> bool {
        !self.builder.is_pointer_field_null(4)
      }
      #[inline]
      pub fn get_brake4_meters_per_second_squared_probs(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_brake4_meters_per_second_squared_probs(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_brake4_meters_per_second_squared_probs(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
      }
      #[inline]
      pub fn has_brake4_meters_per_second_squared_probs(&self) -> bool {
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn get_brake5_meters_per_second_squared_probs(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_brake5_meters_per_second_squared_probs(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
      }
      #[inline]
      pub fn init_brake5_meters_per_second_squared_probs(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
      }
      #[inline]
      pub fn has_brake5_meters_per_second_squared_probs(&self) -> bool {
        !self.builder.is_pointer_field_null(6)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 171] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(37, 141, 220, 188, 221, 165, 10, 134),
        ::capnp::word(22, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
        ::capnp::word(7, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 90, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 143, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 111, 100, 101, 108, 68),
        ::capnp::word(97, 116, 97, 86, 50, 46, 68, 105),
        ::capnp::word(115, 101, 110, 103, 97, 103, 101, 80),
        ::capnp::word(114, 101, 100, 105, 99, 116, 105, 111),
        ::capnp::word(110, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(201, 0, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 0, 0, 0, 146, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 1, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(32, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 1, 0, 0, 18, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 1, 0, 0, 18, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(76, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 1, 0, 0, 18, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(140, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 114, 97, 107, 101, 68, 105, 115),
        ::capnp::word(101, 110, 103, 97, 103, 101, 80, 114),
        ::capnp::word(111, 98, 115, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 115, 68, 105, 115, 101, 110),
        ::capnp::word(103, 97, 103, 101, 80, 114, 111, 98),
        ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 79, 118, 101),
        ::capnp::word(114, 114, 105, 100, 101, 80, 114, 111),
        ::capnp::word(98, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 114, 97, 107, 101, 51, 77, 101),
        ::capnp::word(116, 101, 114, 115, 80, 101, 114, 83),
        ::capnp::word(101, 99, 111, 110, 100, 83, 113, 117),
        ::capnp::word(97, 114, 101, 100, 80, 114, 111, 98),
        ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 114, 97, 107, 101, 52, 77, 101),
        ::capnp::word(116, 101, 114, 115, 80, 101, 114, 83),
        ::capnp::word(101, 99, 111, 110, 100, 83, 113, 117),
        ::capnp::word(97, 114, 101, 100, 80, 114, 111, 98),
        ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 114, 97, 107, 101, 53, 77, 101),
        ::capnp::word(116, 101, 114, 115, 80, 101, 114, 83),
        ::capnp::word(101, 99, 111, 110, 100, 83, 113, 117),
        ::capnp::word(97, 114, 101, 100, 80, 114, 111, 98),
        ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[4,5,6,1,2,3,0];
      pub const TYPE_ID: u64 = 0x860a_a5dd_bcdc_8d25;
    }
  }

  pub mod pose {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_trans(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_trans(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_rot(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_rot(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_trans_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_trans_std(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_rot_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_rot_std(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 4 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_trans(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_trans(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_trans(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_trans(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_rot(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_rot(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_rot(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_rot(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_trans_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_trans_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_trans_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_trans_std(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_rot_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_rot_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_rot_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_rot_std(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 95] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(79, 136, 103, 46, 112, 192, 62, 251),
        ::capnp::word(22, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
        ::capnp::word(4, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 218, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 231, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 111, 100, 101, 108, 68),
        ::capnp::word(97, 116, 97, 86, 50, 46, 80, 111),
        ::capnp::word(115, 101, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(140, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(137, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(136, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(116, 114, 97, 110, 115, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 111, 116, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 114, 97, 110, 115, 83, 116, 100),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 111, 116, 83, 116, 100, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,3,0,2];
      pub const TYPE_ID: u64 = 0xfb3e_c070_2e67_884f;
    }
  }

  pub mod lateral_planner_solution {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_y(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_yaw(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_yaw(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_yaw_rate(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_yaw_rate(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_x_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_x_std(&self) -> bool {
        !self.reader.get_pointer_field(4).is_null()
      }
      #[inline]
      pub fn get_y_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_y_std(&self) -> bool {
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn get_yaw_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_yaw_std(&self) -> bool {
        !self.reader.get_pointer_field(6).is_null()
      }
      #[inline]
      pub fn get_yaw_rate_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_yaw_rate_std(&self) -> bool {
        !self.reader.get_pointer_field(7).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 8 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_x(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_x(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_y(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_y(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_y(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_yaw(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_yaw(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_yaw(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_yaw(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_yaw_rate(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_yaw_rate(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_yaw_rate(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_yaw_rate(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_x_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_x_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
      }
      #[inline]
      pub fn init_x_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
      }
      #[inline]
      pub fn has_x_std(&self) -> bool {
        !self.builder.is_pointer_field_null(4)
      }
      #[inline]
      pub fn get_y_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_y_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_y_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
      }
      #[inline]
      pub fn has_y_std(&self) -> bool {
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn get_yaw_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_yaw_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
      }
      #[inline]
      pub fn init_yaw_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
      }
      #[inline]
      pub fn has_yaw_std(&self) -> bool {
        !self.builder.is_pointer_field_null(6)
      }
      #[inline]
      pub fn get_yaw_rate_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_yaw_rate_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
      }
      #[inline]
      pub fn init_yaw_rate_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
      }
      #[inline]
      pub fn has_yaw_rate_std(&self) -> bool {
        !self.builder.is_pointer_field_null(7)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 173] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(254, 172, 180, 166, 165, 236, 202, 132),
        ::capnp::word(22, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
        ::capnp::word(8, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 106, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 199, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 111, 100, 101, 108, 68),
        ::capnp::word(97, 116, 97, 86, 50, 46, 76, 97),
        ::capnp::word(116, 101, 114, 97, 108, 80, 108, 97),
        ::capnp::word(110, 110, 101, 114, 83, 111, 108, 117),
        ::capnp::word(116, 105, 111, 110, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(32, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(244, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 1, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(28, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(48, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(76, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(73, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(68, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(96, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(93, 1, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 97, 119, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 97, 119, 82, 97, 116, 101, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 83, 116, 100, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 83, 116, 100, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 97, 119, 83, 116, 100, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 97, 119, 82, 97, 116, 101, 83),
        ::capnp::word(116, 100, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          7 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,4,1,5,2,3,7,6];
      pub const TYPE_ID: u64 = 0x84ca_eca5_a6b4_acfe;
    }
  }

  pub mod action {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_desired_curvature(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_desired_curvature(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_desired_curvature(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 35] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(132, 69, 118, 90, 179, 188, 208, 148),
        ::capnp::word(22, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 234, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 63, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 111, 100, 101, 108, 68),
        ::capnp::word(97, 116, 97, 86, 50, 46, 65, 99),
        ::capnp::word(116, 105, 111, 110, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 0, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(100, 101, 115, 105, 114, 101, 100, 67),
        ::capnp::word(117, 114, 118, 97, 116, 117, 114, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0];
      pub const TYPE_ID: u64 = 0x94d0_bcb3_5a76_4584;
    }
  }
}

pub mod encode_index {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::cereal::log_capnp::encode_index::Type,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(2))
    }
    #[inline]
    pub fn get_encode_id(self) -> u32 {
      self.reader.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn get_segment_num(self) -> i32 {
      self.reader.get_data_field::<i32>(3)
    }
    #[inline]
    pub fn get_segment_id(self) -> u32 {
      self.reader.get_data_field::<u32>(4)
    }
    #[inline]
    pub fn get_segment_id_encode(self) -> u32 {
      self.reader.get_data_field::<u32>(5)
    }
    #[inline]
    pub fn get_timestamp_sof(self) -> u64 {
      self.reader.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.reader.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn get_flags(self) -> u32 {
      self.reader.get_data_field::<u32>(10)
    }
    #[inline]
    pub fn get_len(self) -> u32 {
      self.reader.get_data_field::<u32>(11)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 6, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::cereal::log_capnp::encode_index::Type,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(2))
    }
    #[inline]
    pub fn set_type(&mut self, value: crate::cereal::log_capnp::encode_index::Type)  {
      self.builder.set_data_field::<u16>(2, value as u16);
    }
    #[inline]
    pub fn get_encode_id(self) -> u32 {
      self.builder.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn set_encode_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(2, value);
    }
    #[inline]
    pub fn get_segment_num(self) -> i32 {
      self.builder.get_data_field::<i32>(3)
    }
    #[inline]
    pub fn set_segment_num(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(3, value);
    }
    #[inline]
    pub fn get_segment_id(self) -> u32 {
      self.builder.get_data_field::<u32>(4)
    }
    #[inline]
    pub fn set_segment_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(4, value);
    }
    #[inline]
    pub fn get_segment_id_encode(self) -> u32 {
      self.builder.get_data_field::<u32>(5)
    }
    #[inline]
    pub fn set_segment_id_encode(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(5, value);
    }
    #[inline]
    pub fn get_timestamp_sof(self) -> u64 {
      self.builder.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn set_timestamp_sof(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(3, value);
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.builder.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn set_timestamp_eof(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(4, value);
    }
    #[inline]
    pub fn get_flags(self) -> u32 {
      self.builder.get_data_field::<u32>(10)
    }
    #[inline]
    pub fn set_flags(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(10, value);
    }
    #[inline]
    pub fn get_len(self) -> u32 {
      self.builder.get_data_field::<u32>(11)
    }
    #[inline]
    pub fn set_len(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(11, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 176] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
      ::capnp::word(10, 0, 0, 0, 1, 0, 6, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 178, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 0, 0, 0, 55, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 69, 110, 99, 111, 100, 101),
      ::capnp::word(73, 110, 100, 101, 120, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(211, 204, 87, 193, 158, 37, 173, 192),
      ::capnp::word(1, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(84, 121, 112, 101, 0, 0, 0, 0),
      ::capnp::word(40, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 1, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 1, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(68, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 1, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(211, 204, 87, 193, 158, 37, 173, 192),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 99, 111, 100, 101, 73, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 103, 109, 101, 110, 116, 78),
      ::capnp::word(117, 109, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 103, 109, 101, 110, 116, 73),
      ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 103, 109, 101, 110, 116, 73),
      ::capnp::word(100, 69, 110, 99, 111, 100, 101, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
      ::capnp::word(112, 83, 111, 102, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
      ::capnp::word(112, 69, 111, 102, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 108, 97, 103, 115, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 110, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <crate::cereal::log_capnp::encode_index::Type as ::capnp::introspect::Introspect>::introspect(),
        2 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        7 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        8 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[2,8,0,9,4,5,3,7,6,1];
    pub const TYPE_ID: u64 = 0x89d3_94e3_5417_35fc;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum Type {
    BigBoxLossless = 0,
    FullHEVC = 1,
    BigBoxHEVCDEPRECATED = 2,
    ChffrAndroidH264DEPRECATED = 3,
    FullLosslessClipDEPRECATED = 4,
    FrontDEPRECATED = 5,
    QcameraH264 = 6,
    LivestreamH264 = 7,
  }

  impl ::capnp::introspect::Introspect for Type {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &type_::ENCODED_NODE, annotation_types: type_::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<Type> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: Type) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &type_::ENCODED_NODE, annotation_types: type_::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for Type {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <Type as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::BigBoxLossless),
        1 => ::core::result::Result::Ok(Self::FullHEVC),
        2 => ::core::result::Result::Ok(Self::BigBoxHEVCDEPRECATED),
        3 => ::core::result::Result::Ok(Self::ChffrAndroidH264DEPRECATED),
        4 => ::core::result::Result::Ok(Self::FullLosslessClipDEPRECATED),
        5 => ::core::result::Result::Ok(Self::FrontDEPRECATED),
        6 => ::core::result::Result::Ok(Self::QcameraH264),
        7 => ::core::result::Result::Ok(Self::LivestreamH264),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<Type> for u16 {
    #[inline]
    fn from(x: Type) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for Type {
    const TYPE_ID: u64 = 0xc0ad_259e_c157_ccd3u64;
  }
  mod type_ {
  pub static ENCODED_NODE: [::capnp::Word; 63] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(211, 204, 87, 193, 158, 37, 173, 192),
    ::capnp::word(22, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 218, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 199, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 69, 110, 99, 111, 100, 101),
    ::capnp::word(73, 110, 100, 101, 120, 46, 84, 121),
    ::capnp::word(112, 101, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(32, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 0, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 0, 0, 0, 170, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 0, 0, 0, 218, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 0, 0, 0, 218, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 0, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 0, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 0, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 105, 103, 66, 111, 120, 76, 111),
    ::capnp::word(115, 115, 108, 101, 115, 115, 0, 0),
    ::capnp::word(102, 117, 108, 108, 72, 69, 86, 67),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 105, 103, 66, 111, 120, 72, 69),
    ::capnp::word(86, 67, 68, 69, 80, 82, 69, 67),
    ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
    ::capnp::word(99, 104, 102, 102, 114, 65, 110, 100),
    ::capnp::word(114, 111, 105, 100, 72, 50, 54, 52),
    ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
    ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 117, 108, 108, 76, 111, 115, 115),
    ::capnp::word(108, 101, 115, 115, 67, 108, 105, 112),
    ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
    ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 114, 111, 110, 116, 68, 69, 80),
    ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
    ::capnp::word(113, 99, 97, 109, 101, 114, 97, 72),
    ::capnp::word(50, 54, 52, 0, 0, 0, 0, 0),
    ::capnp::word(108, 105, 118, 101, 115, 116, 114, 101),
    ::capnp::word(97, 109, 72, 50, 54, 52, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}

pub mod android_log_entry {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_id(self) -> u8 {
      self.reader.get_data_field::<u8>(0)
    }
    #[inline]
    pub fn get_ts(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_priority(self) -> u8 {
      self.reader.get_data_field::<u8>(1)
    }
    #[inline]
    pub fn get_pid(self) -> i32 {
      self.reader.get_data_field::<i32>(1)
    }
    #[inline]
    pub fn get_tid(self) -> i32 {
      self.reader.get_data_field::<i32>(4)
    }
    #[inline]
    pub fn get_tag(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_tag(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_message(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_message(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 2 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_id(self) -> u8 {
      self.builder.get_data_field::<u8>(0)
    }
    #[inline]
    pub fn set_id(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(0, value);
    }
    #[inline]
    pub fn get_ts(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_ts(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_priority(self) -> u8 {
      self.builder.get_data_field::<u8>(1)
    }
    #[inline]
    pub fn set_priority(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(1, value);
    }
    #[inline]
    pub fn get_pid(self) -> i32 {
      self.builder.get_data_field::<i32>(1)
    }
    #[inline]
    pub fn set_pid(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(1, value);
    }
    #[inline]
    pub fn get_tid(self) -> i32 {
      self.builder.get_data_field::<i32>(4)
    }
    #[inline]
    pub fn set_tid(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(4, value);
    }
    #[inline]
    pub fn get_tag(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_tag(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
    }
    #[inline]
    pub fn init_tag(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_tag(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_message(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_message(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
    }
    #[inline]
    pub fn init_message(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    #[inline]
    pub fn has_message(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 124] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(133, 125, 79, 137, 161, 93, 9, 234),
      ::capnp::word(10, 0, 0, 0, 1, 0, 3, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 210, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 143, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 65, 110, 100, 114, 111, 105),
      ::capnp::word(100, 76, 111, 103, 69, 110, 116, 114),
      ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(105, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 105, 111, 114, 105, 116, 121),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 105, 100, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 100, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 97, 103, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 101, 115, 115, 97, 103, 101, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u8 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        2 => <u8 as ::capnp::introspect::Introspect>::introspect(),
        3 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        6 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0,6,3,2,5,4,1];
    pub const TYPE_ID: u64 = 0xea09_5da1_894f_7d85;
  }
}

pub mod longitudinal_plan {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_lateral_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_d_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_d_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_longitudinal_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(1)
    }
    #[inline]
    pub fn get_v_target_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_a_target_min_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_a_target_max_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_jerk_factor_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_has_lead(self) -> bool {
      self.reader.get_bool_field(2)
    }
    #[inline]
    pub fn get_fcw(self) -> bool {
      self.reader.get_bool_field(3)
    }
    #[inline]
    pub fn get_model_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn get_radar_state_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.reader.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn get_lane_width_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_gps_trajectory_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::longitudinal_plan::gps_trajectory::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_gps_trajectory_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_events_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::car_capnp::car_event::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_events_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_v_target_future_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn get_longitudinal_plan_source(self) -> ::core::result::Result<crate::cereal::log_capnp::longitudinal_plan::LongitudinalPlanSource,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn get_v_cruise_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn get_a_cruise_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_a_target_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_gps_planner_active_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(4)
    }
    #[inline]
    pub fn get_v_max_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn get_v_curvature_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn get_decel_for_turn_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(5)
    }
    #[inline]
    pub fn get_has_left_lane_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(6)
    }
    #[inline]
    pub fn get_has_right_lane_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(7)
    }
    #[inline]
    pub fn get_map_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(8)
    }
    #[inline]
    pub fn get_v_start_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn get_a_start_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(17)
    }
    #[inline]
    pub fn get_radar_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(9)
    }
    #[inline]
    pub fn get_processing_delay(self) -> f32 {
      self.reader.get_data_field::<f32>(18)
    }
    #[inline]
    pub fn get_radar_can_error_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(10)
    }
    #[inline]
    pub fn get_comm_issue_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(11)
    }
    #[inline]
    pub fn get_accels(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_accels(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_speeds(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_speeds(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_jerks(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_jerks(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_solver_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(19)
    }
    #[inline]
    pub fn get_personality_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::log_capnp::LongitudinalPersonality,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(40))
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 11, pointers: 6 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_lateral_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_lateral_valid_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_d_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_d_poly_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_d_poly_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_d_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_longitudinal_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(1)
    }
    #[inline]
    pub fn set_longitudinal_valid_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(1, value);
    }
    #[inline]
    pub fn get_v_target_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_v_target_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_a_target_min_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_a_target_min_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_a_target_max_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_a_target_max_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_jerk_factor_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_jerk_factor_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_has_lead(self) -> bool {
      self.builder.get_bool_field(2)
    }
    #[inline]
    pub fn set_has_lead(&mut self, value: bool)  {
      self.builder.set_bool_field(2, value);
    }
    #[inline]
    pub fn get_fcw(self) -> bool {
      self.builder.get_bool_field(3)
    }
    #[inline]
    pub fn set_fcw(&mut self, value: bool)  {
      self.builder.set_bool_field(3, value);
    }
    #[inline]
    pub fn get_model_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn set_model_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(3, value);
    }
    #[inline]
    pub fn get_radar_state_mono_time_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.builder.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn set_radar_state_mono_time_d_e_p_r_e_c_a_t_e_d(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(4, value);
    }
    #[inline]
    pub fn get_lane_width_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_lane_width_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_gps_trajectory_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::longitudinal_plan::gps_trajectory::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_gps_trajectory_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::longitudinal_plan::gps_trajectory::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_gps_trajectory_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::longitudinal_plan::gps_trajectory::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_gps_trajectory_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_events_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_event::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_events_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::car_capnp::car_event::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_events_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_event::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_events_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_v_target_future_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn set_v_target_future_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(10, value);
    }
    #[inline]
    pub fn get_longitudinal_plan_source(self) -> ::core::result::Result<crate::cereal::log_capnp::longitudinal_plan::LongitudinalPlanSource,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn set_longitudinal_plan_source(&mut self, value: crate::cereal::log_capnp::longitudinal_plan::LongitudinalPlanSource)  {
      self.builder.set_data_field::<u16>(1, value as u16);
    }
    #[inline]
    pub fn get_v_cruise_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn set_v_cruise_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(11, value);
    }
    #[inline]
    pub fn get_a_cruise_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_a_cruise_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_a_target_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_a_target_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_gps_planner_active_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(4)
    }
    #[inline]
    pub fn set_gps_planner_active_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(4, value);
    }
    #[inline]
    pub fn get_v_max_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn set_v_max_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(14, value);
    }
    #[inline]
    pub fn get_v_curvature_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn set_v_curvature_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(15, value);
    }
    #[inline]
    pub fn get_decel_for_turn_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(5)
    }
    #[inline]
    pub fn set_decel_for_turn_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(5, value);
    }
    #[inline]
    pub fn get_has_left_lane_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(6)
    }
    #[inline]
    pub fn set_has_left_lane_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(6, value);
    }
    #[inline]
    pub fn get_has_right_lane_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(7)
    }
    #[inline]
    pub fn set_has_right_lane_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(7, value);
    }
    #[inline]
    pub fn get_map_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(8)
    }
    #[inline]
    pub fn set_map_valid_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(8, value);
    }
    #[inline]
    pub fn get_v_start_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn set_v_start_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(16, value);
    }
    #[inline]
    pub fn get_a_start_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(17)
    }
    #[inline]
    pub fn set_a_start_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(17, value);
    }
    #[inline]
    pub fn get_radar_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(9)
    }
    #[inline]
    pub fn set_radar_valid_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(9, value);
    }
    #[inline]
    pub fn get_processing_delay(self) -> f32 {
      self.builder.get_data_field::<f32>(18)
    }
    #[inline]
    pub fn set_processing_delay(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(18, value);
    }
    #[inline]
    pub fn get_radar_can_error_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(10)
    }
    #[inline]
    pub fn set_radar_can_error_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(10, value);
    }
    #[inline]
    pub fn get_comm_issue_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(11)
    }
    #[inline]
    pub fn set_comm_issue_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(11, value);
    }
    #[inline]
    pub fn get_accels(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_accels(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_accels(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_accels(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_speeds(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_speeds(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_speeds(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_speeds(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_jerks(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_jerks(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_jerks(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_jerks(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_solver_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(19)
    }
    #[inline]
    pub fn set_solver_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(19, value);
    }
    #[inline]
    pub fn get_personality_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::log_capnp::LongitudinalPersonality,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(40))
    }
    #[inline]
    pub fn set_personality_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::LongitudinalPersonality)  {
      self.builder.set_data_field::<u16>(40, value as u16);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_gps_trajectory_d_e_p_r_e_c_a_t_e_d(&self) -> crate::cereal::log_capnp::longitudinal_plan::gps_trajectory::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 665] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(108, 135, 18, 186, 62, 91, 11, 224),
      ::capnp::word(10, 0, 0, 0, 1, 0, 11, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 218, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 39, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 0, 0, 0, 31, 8, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 111, 110, 103, 105, 116),
      ::capnp::word(117, 100, 105, 110, 97, 108, 80, 108),
      ::capnp::word(97, 110, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(32, 145, 7, 204, 83, 167, 49, 178),
      ::capnp::word(9, 0, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 16, 48, 245, 114, 176, 254, 140),
      ::capnp::word(13, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(76, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 80, 108, 97, 110),
      ::capnp::word(83, 111, 117, 114, 99, 101, 0, 0),
      ::capnp::word(71, 112, 115, 84, 114, 97, 106, 101),
      ::capnp::word(99, 116, 111, 114, 121, 0, 0, 0),
      ::capnp::word(148, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(23, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 3, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 4, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 4, 0, 0, 226, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 4, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 4, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 4, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 4, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 4, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 4, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 4, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 4, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 4, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(34, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 4, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(33, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 4, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 4, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 4, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 4, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 4, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 4, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(35, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 4, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 5, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(27, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 5, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 5, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 5, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 5, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(29, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 5, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 5, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 5, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(30, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 5, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 5, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(31, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 5, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(32, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 5, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 5, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(160, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 5, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 5, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 35, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 5, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(36, 0, 0, 0, 40, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 36, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 5, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(108, 97, 116, 101, 114, 97, 108, 86),
      ::capnp::word(97, 108, 105, 100, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 80, 111, 108, 121, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 86, 97, 108, 105),
      ::capnp::word(100, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 84, 97, 114, 103, 101, 116, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 84, 97, 114, 103, 101, 116, 77),
      ::capnp::word(105, 110, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 84, 97, 114, 103, 101, 116, 77),
      ::capnp::word(97, 120, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(106, 101, 114, 107, 70, 97, 99, 116),
      ::capnp::word(111, 114, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 97, 115, 76, 101, 97, 100, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 99, 119, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 108, 77, 111, 110),
      ::capnp::word(111, 84, 105, 109, 101, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 100, 97, 114, 83, 116, 97),
      ::capnp::word(116, 101, 77, 111, 110, 111, 84, 105),
      ::capnp::word(109, 101, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 110, 101, 87, 105, 100, 116),
      ::capnp::word(104, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 84, 114, 97, 106, 101),
      ::capnp::word(99, 116, 111, 114, 121, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 16, 48, 245, 114, 176, 254, 140),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 118, 101, 110, 116, 115, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(211, 58, 175, 76, 243, 87, 22, 155),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 84, 97, 114, 103, 101, 116, 70),
      ::capnp::word(117, 116, 117, 114, 101, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 80, 108, 97, 110),
      ::capnp::word(83, 111, 117, 114, 99, 101, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 145, 7, 204, 83, 167, 49, 178),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 67, 114, 117, 105, 115, 101, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 67, 114, 117, 105, 115, 101, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 84, 97, 114, 103, 101, 116, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 80, 108, 97, 110, 110),
      ::capnp::word(101, 114, 65, 99, 116, 105, 118, 101),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 77, 97, 120, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 67, 117, 114, 118, 97, 116, 117),
      ::capnp::word(114, 101, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 99, 101, 108, 70, 111, 114),
      ::capnp::word(84, 117, 114, 110, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 97, 115, 76, 101, 102, 116, 76),
      ::capnp::word(97, 110, 101, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 97, 115, 82, 105, 103, 104, 116),
      ::capnp::word(76, 97, 110, 101, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 112, 86, 97, 108, 105, 100),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 83, 116, 97, 114, 116, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 83, 116, 97, 114, 116, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 100, 97, 114, 86, 97, 108),
      ::capnp::word(105, 100, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 111, 99, 101, 115, 115, 105),
      ::capnp::word(110, 103, 68, 101, 108, 97, 121, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 100, 97, 114, 67, 97, 110),
      ::capnp::word(69, 114, 114, 111, 114, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 109, 109, 73, 115, 115, 117),
      ::capnp::word(101, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 101, 108, 115, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 115, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(106, 101, 114, 107, 115, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 108, 118, 101, 114, 69, 120),
      ::capnp::word(101, 99, 117, 116, 105, 111, 110, 84),
      ::capnp::word(105, 109, 101, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 101, 114, 115, 111, 110, 97, 108),
      ::capnp::word(105, 116, 121, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 125, 36, 26, 61, 226, 146, 214),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <bool as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        2 => <bool as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <bool as ::capnp::introspect::Introspect>::introspect(),
        8 => <bool as ::capnp::introspect::Introspect>::introspect(),
        9 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        10 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        11 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        12 => <crate::cereal::log_capnp::longitudinal_plan::gps_trajectory::Owned as ::capnp::introspect::Introspect>::introspect(),
        13 => <::capnp::struct_list::Owned<crate::cereal::car_capnp::car_event::Owned> as ::capnp::introspect::Introspect>::introspect(),
        14 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        15 => <crate::cereal::log_capnp::longitudinal_plan::LongitudinalPlanSource as ::capnp::introspect::Introspect>::introspect(),
        16 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        17 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        18 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        19 => <bool as ::capnp::introspect::Introspect>::introspect(),
        20 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        21 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        22 => <bool as ::capnp::introspect::Introspect>::introspect(),
        23 => <bool as ::capnp::introspect::Introspect>::introspect(),
        24 => <bool as ::capnp::introspect::Introspect>::introspect(),
        25 => <bool as ::capnp::introspect::Introspect>::introspect(),
        26 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        27 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        28 => <bool as ::capnp::introspect::Introspect>::introspect(),
        29 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        30 => <bool as ::capnp::introspect::Introspect>::introspect(),
        31 => <bool as ::capnp::introspect::Introspect>::introspect(),
        32 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        33 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        34 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        35 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        36 => <crate::cereal::log_capnp::LongitudinalPersonality as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[17,27,18,5,4,32,31,1,22,13,8,19,12,7,23,24,6,34,11,0,15,2,25,9,36,29,30,10,28,35,33,16,21,20,26,3,14];
    pub const TYPE_ID: u64 = 0xe00b_5b3e_ba12_876c;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum LongitudinalPlanSource {
    Cruise = 0,
    Lead0 = 1,
    Lead1 = 2,
    Lead2 = 3,
    E2e = 4,
  }

  impl ::capnp::introspect::Introspect for LongitudinalPlanSource {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &longitudinal_plan_source::ENCODED_NODE, annotation_types: longitudinal_plan_source::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<LongitudinalPlanSource> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: LongitudinalPlanSource) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &longitudinal_plan_source::ENCODED_NODE, annotation_types: longitudinal_plan_source::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for LongitudinalPlanSource {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <LongitudinalPlanSource as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Cruise),
        1 => ::core::result::Result::Ok(Self::Lead0),
        2 => ::core::result::Result::Ok(Self::Lead1),
        3 => ::core::result::Result::Ok(Self::Lead2),
        4 => ::core::result::Result::Ok(Self::E2e),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<LongitudinalPlanSource> for u16 {
    #[inline]
    fn from(x: LongitudinalPlanSource) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for LongitudinalPlanSource {
    const TYPE_ID: u64 = 0xb231_a753_cc07_9120u64;
  }
  mod longitudinal_plan_source {
  pub static ENCODED_NODE: [::capnp::Word; 41] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(32, 145, 7, 204, 83, 167, 49, 178),
    ::capnp::word(27, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(108, 135, 18, 186, 62, 91, 11, 224),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 146, 1, 0, 0),
    ::capnp::word(45, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 127, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 76, 111, 110, 103, 105, 116),
    ::capnp::word(117, 100, 105, 110, 97, 108, 80, 108),
    ::capnp::word(97, 110, 46, 76, 111, 110, 103, 105),
    ::capnp::word(116, 117, 100, 105, 110, 97, 108, 80),
    ::capnp::word(108, 97, 110, 83, 111, 117, 114, 99),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 114, 117, 105, 115, 101, 0, 0),
    ::capnp::word(108, 101, 97, 100, 48, 0, 0, 0),
    ::capnp::word(108, 101, 97, 100, 49, 0, 0, 0),
    ::capnp::word(108, 101, 97, 100, 50, 0, 0, 0),
    ::capnp::word(101, 50, 101, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod gps_trajectory {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_y(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_x(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_x(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_y(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_y(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_y(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 58] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(0, 16, 48, 245, 114, 176, 254, 140),
        ::capnp::word(27, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(108, 135, 18, 186, 62, 91, 11, 224),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 74, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 76, 111, 110, 103, 105, 116),
        ::capnp::word(117, 100, 105, 110, 97, 108, 80, 108),
        ::capnp::word(97, 110, 46, 71, 112, 115, 84, 114),
        ::capnp::word(97, 106, 101, 99, 116, 111, 114, 121),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
      pub const TYPE_ID: u64 = 0x8cfe_b072_f530_1000;
    }
  }
}

pub mod ui_plan {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_position(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_position(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_accel(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_accel(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 2 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_position(self) -> ::capnp::Result<crate::cereal::log_capnp::x_y_z_t_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_position(&mut self, value: crate::cereal::log_capnp::x_y_z_t_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_position(self, ) -> crate::cereal::log_capnp::x_y_z_t_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_position(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_accel(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_accel(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_accel(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_accel(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_position(&self) -> crate::cereal::log_capnp::x_y_z_t_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 67] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(193, 39, 57, 94, 176, 155, 12, 252),
      ::capnp::word(10, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 175, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 85, 105, 80, 108, 97, 110),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(112, 111, 115, 105, 116, 105, 111, 110),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 174, 5, 213, 31, 174, 203, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 101, 108, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <crate::cereal::log_capnp::x_y_z_t_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        2 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,2,0];
    pub const TYPE_ID: u64 = 0xfc0c_9bb0_5e39_27c1;
  }
}

pub mod lateral_plan {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_lane_width_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn get_d_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_d_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_c_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_c_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_c_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_l_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_l_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_l_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_r_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_r_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_r_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_steering_angle_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_mpc_solution_valid(self) -> bool {
      self.reader.get_bool_field(160)
    }
    #[inline]
    pub fn get_params_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(161)
    }
    #[inline]
    pub fn get_angle_offset_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_model_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(162)
    }
    #[inline]
    pub fn get_steering_rate_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_sensor_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(163)
    }
    #[inline]
    pub fn get_comm_issue_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(164)
    }
    #[inline]
    pub fn get_posenet_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(165)
    }
    #[inline]
    pub fn get_desire(self) -> ::core::result::Result<crate::cereal::log_capnp::lateral_plan::Desire,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(11))
    }
    #[inline]
    pub fn get_lane_change_state(self) -> ::core::result::Result<crate::cereal::log_capnp::lateral_plan::LaneChangeState,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(16))
    }
    #[inline]
    pub fn get_lane_change_direction(self) -> ::core::result::Result<crate::cereal::log_capnp::lateral_plan::LaneChangeDirection,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(17))
    }
    #[inline]
    pub fn get_d_path_points(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_d_path_points(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_d_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn get_curvature_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn get_curvature_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn get_raw_curvature_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_raw_curvature_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_psis(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_psis(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_curvatures(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_curvatures(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_curvature_rates(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_curvature_rates(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_use_lane_lines(self) -> bool {
      self.reader.get_bool_field(166)
    }
    #[inline]
    pub fn get_solver_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn get_model_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(8)
    }
    #[inline]
    pub fn get_solver_cost(self) -> f32 {
      self.reader.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn get_solver_state(self) -> ::capnp::Result<crate::cereal::log_capnp::lateral_plan::solver_state::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_solver_state(&self) -> bool {
      !self.reader.get_pointer_field(8).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 9, pointers: 9 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_lane_width_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn set_lane_width_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(0, value);
    }
    #[inline]
    pub fn get_d_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_d_poly_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_d_poly_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_d_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_c_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_c_poly_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_c_poly_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_c_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_c_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_c_prob_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_l_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_l_poly_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_l_poly_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_l_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_l_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_l_prob_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_r_poly_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_r_poly_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_r_poly_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_r_poly_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_r_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_r_prob_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_steering_angle_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_steering_angle_deg_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_mpc_solution_valid(self) -> bool {
      self.builder.get_bool_field(160)
    }
    #[inline]
    pub fn set_mpc_solution_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(160, value);
    }
    #[inline]
    pub fn get_params_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(161)
    }
    #[inline]
    pub fn set_params_valid_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(161, value);
    }
    #[inline]
    pub fn get_angle_offset_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_angle_offset_deg_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_model_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(162)
    }
    #[inline]
    pub fn set_model_valid_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(162, value);
    }
    #[inline]
    pub fn get_steering_rate_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_steering_rate_deg_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_sensor_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(163)
    }
    #[inline]
    pub fn set_sensor_valid_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(163, value);
    }
    #[inline]
    pub fn get_comm_issue_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(164)
    }
    #[inline]
    pub fn set_comm_issue_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(164, value);
    }
    #[inline]
    pub fn get_posenet_valid_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(165)
    }
    #[inline]
    pub fn set_posenet_valid_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(165, value);
    }
    #[inline]
    pub fn get_desire(self) -> ::core::result::Result<crate::cereal::log_capnp::lateral_plan::Desire,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(11))
    }
    #[inline]
    pub fn set_desire(&mut self, value: crate::cereal::log_capnp::lateral_plan::Desire)  {
      self.builder.set_data_field::<u16>(11, value as u16);
    }
    #[inline]
    pub fn get_lane_change_state(self) -> ::core::result::Result<crate::cereal::log_capnp::lateral_plan::LaneChangeState,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(16))
    }
    #[inline]
    pub fn set_lane_change_state(&mut self, value: crate::cereal::log_capnp::lateral_plan::LaneChangeState)  {
      self.builder.set_data_field::<u16>(16, value as u16);
    }
    #[inline]
    pub fn get_lane_change_direction(self) -> ::core::result::Result<crate::cereal::log_capnp::lateral_plan::LaneChangeDirection,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(17))
    }
    #[inline]
    pub fn set_lane_change_direction(&mut self, value: crate::cereal::log_capnp::lateral_plan::LaneChangeDirection)  {
      self.builder.set_data_field::<u16>(17, value as u16);
    }
    #[inline]
    pub fn get_d_path_points(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_d_path_points(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_d_path_points(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_d_path_points(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_d_prob_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn set_d_prob_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(9, value);
    }
    #[inline]
    pub fn get_curvature_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn set_curvature_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(10, value);
    }
    #[inline]
    pub fn get_curvature_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn set_curvature_rate_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(11, value);
    }
    #[inline]
    pub fn get_raw_curvature_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_raw_curvature_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_raw_curvature_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_raw_curvature_rate_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_psis(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_psis(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_psis(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_psis(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_curvatures(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_curvatures(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_curvatures(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    #[inline]
    pub fn has_curvatures(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_curvature_rates(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_curvature_rates(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_curvature_rates(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
    }
    #[inline]
    pub fn has_curvature_rates(&self) -> bool {
      !self.builder.is_pointer_field_null(7)
    }
    #[inline]
    pub fn get_use_lane_lines(self) -> bool {
      self.builder.get_bool_field(166)
    }
    #[inline]
    pub fn set_use_lane_lines(&mut self, value: bool)  {
      self.builder.set_bool_field(166, value);
    }
    #[inline]
    pub fn get_solver_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn set_solver_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(14, value);
    }
    #[inline]
    pub fn get_model_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(8)
    }
    #[inline]
    pub fn set_model_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(8, value);
    }
    #[inline]
    pub fn get_solver_cost(self) -> f32 {
      self.builder.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn set_solver_cost(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(15, value);
    }
    #[inline]
    pub fn get_solver_state(self) -> ::capnp::Result<crate::cereal::log_capnp::lateral_plan::solver_state::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_solver_state(&mut self, value: crate::cereal::log_capnp::lateral_plan::solver_state::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(8), value, false)
    }
    #[inline]
    pub fn init_solver_state(self, ) -> crate::cereal::log_capnp::lateral_plan::solver_state::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(8), 0)
    }
    #[inline]
    pub fn has_solver_state(&self) -> bool {
      !self.builder.is_pointer_field_null(8)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_solver_state(&self) -> crate::cereal::log_capnp::lateral_plan::solver_state::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(8))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 627] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(30, 181, 232, 42, 142, 49, 233, 225),
      ::capnp::word(10, 0, 0, 0, 1, 0, 9, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(9, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 178, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 71, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 0, 0, 0, 119, 7, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 97, 116, 101, 114, 97),
      ::capnp::word(108, 80, 108, 97, 110, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(198, 33, 112, 91, 103, 124, 202, 253),
      ::capnp::word(25, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(13, 127, 42, 207, 63, 239, 83, 187),
      ::capnp::word(25, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(210, 86, 206, 149, 241, 151, 194, 250),
      ::capnp::word(21, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(3, 211, 186, 188, 17, 99, 57, 247),
      ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(83, 111, 108, 118, 101, 114, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(68, 101, 115, 105, 114, 101, 0, 0),
      ::capnp::word(76, 97, 110, 101, 67, 104, 97, 110),
      ::capnp::word(103, 101, 83, 116, 97, 116, 101, 0),
      ::capnp::word(76, 97, 110, 101, 67, 104, 97, 110),
      ::capnp::word(103, 101, 68, 105, 114, 101, 99, 116),
      ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
      ::capnp::word(136, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 3, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 3, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 3, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 3, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 3, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 4, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 4, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 4, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(31, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 4, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 160, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 4, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(30, 0, 0, 0, 161, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 4, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(33, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 4, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 4, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(32, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 4, 0, 0, 210, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(29, 0, 0, 0, 163, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 4, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(27, 0, 0, 0, 164, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 4, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 165, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 4, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 4, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 4, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 4, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 4, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 4, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 4, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 4, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 4, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 4, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 5, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 5, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 5, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 5, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 166, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 5, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 5, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 5, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 5, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(124, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 5, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(108, 97, 110, 101, 87, 105, 100, 116),
      ::capnp::word(104, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 80, 111, 108, 121, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 80, 111, 108, 121, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 80, 114, 111, 98, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 80, 111, 108, 121, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 80, 114, 111, 98, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 80, 111, 108, 121, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 80, 114, 111, 98, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(65, 110, 103, 108, 101, 68, 101, 103),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 112, 99, 83, 111, 108, 117, 116),
      ::capnp::word(105, 111, 110, 86, 97, 108, 105, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 114, 97, 109, 115, 86, 97),
      ::capnp::word(108, 105, 100, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 108, 101, 79, 102, 102),
      ::capnp::word(115, 101, 116, 68, 101, 103, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 108, 86, 97, 108),
      ::capnp::word(105, 100, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(82, 97, 116, 101, 68, 101, 103, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 110, 115, 111, 114, 86, 97),
      ::capnp::word(108, 105, 100, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 109, 109, 73, 115, 115, 117),
      ::capnp::word(101, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 101, 110, 101, 116, 86),
      ::capnp::word(97, 108, 105, 100, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 115, 105, 114, 101, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 127, 42, 207, 63, 239, 83, 187),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
      ::capnp::word(103, 101, 83, 116, 97, 116, 101, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(210, 86, 206, 149, 241, 151, 194, 250),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
      ::capnp::word(103, 101, 68, 105, 114, 101, 99, 116),
      ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 211, 186, 188, 17, 99, 57, 247),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 80, 97, 116, 104, 80, 111, 105),
      ::capnp::word(110, 116, 115, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 80, 114, 111, 98, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
      ::capnp::word(101, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
      ::capnp::word(101, 82, 97, 116, 101, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 119, 67, 117, 114, 118, 97),
      ::capnp::word(116, 117, 114, 101, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 119, 67, 117, 114, 118, 97),
      ::capnp::word(116, 117, 114, 101, 82, 97, 116, 101),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 115, 105, 115, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
      ::capnp::word(101, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
      ::capnp::word(101, 82, 97, 116, 101, 115, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 115, 101, 76, 97, 110, 101, 76),
      ::capnp::word(105, 110, 101, 115, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 108, 118, 101, 114, 69, 120),
      ::capnp::word(101, 99, 117, 116, 105, 111, 110, 84),
      ::capnp::word(105, 109, 101, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 108, 77, 111, 110),
      ::capnp::word(111, 84, 105, 109, 101, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 108, 118, 101, 114, 67, 111),
      ::capnp::word(115, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 108, 118, 101, 114, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(198, 33, 112, 91, 103, 124, 202, 253),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <bool as ::capnp::introspect::Introspect>::introspect(),
        10 => <bool as ::capnp::introspect::Introspect>::introspect(),
        11 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        12 => <bool as ::capnp::introspect::Introspect>::introspect(),
        13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        14 => <bool as ::capnp::introspect::Introspect>::introspect(),
        15 => <bool as ::capnp::introspect::Introspect>::introspect(),
        16 => <bool as ::capnp::introspect::Introspect>::introspect(),
        17 => <crate::cereal::log_capnp::lateral_plan::Desire as ::capnp::introspect::Introspect>::introspect(),
        18 => <crate::cereal::log_capnp::lateral_plan::LaneChangeState as ::capnp::introspect::Introspect>::introspect(),
        19 => <crate::cereal::log_capnp::lateral_plan::LaneChangeDirection as ::capnp::introspect::Introspect>::introspect(),
        20 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        21 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        22 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        23 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        24 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        25 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        26 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        27 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        28 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        29 => <bool as ::capnp::introspect::Introspect>::introspect(),
        30 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        31 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        32 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        33 => <crate::cereal::log_capnp::lateral_plan::solver_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[11,2,3,15,22,23,28,27,20,1,21,17,4,5,19,18,0,31,12,9,10,16,26,6,7,24,25,14,32,30,33,8,13,29];
    pub const TYPE_ID: u64 = 0xe1e9_318e_2ae8_b51e;
  }

  pub mod solver_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::list_list::Reader<'a,::capnp::primitive_list::Owned<f32>>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_u(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_u(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::list_list::Builder<'a,::capnp::primitive_list::Owned<f32>>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_x(&mut self, value: ::capnp::list_list::Reader<'_,::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_x(self, size: u32) -> ::capnp::list_list::Builder<'a,::capnp::primitive_list::Owned<f32>> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_u(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_u(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_u(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_u(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 61] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(198, 33, 112, 91, 103, 124, 202, 253),
        ::capnp::word(22, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(30, 181, 232, 42, 142, 49, 233, 225),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 76, 97, 116, 101, 114, 97),
        ::capnp::word(108, 80, 108, 97, 110, 46, 83, 111),
        ::capnp::word(108, 118, 101, 114, 83, 116, 97, 116),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(80, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(77, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(100, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::list_list::Owned<::capnp::primitive_list::Owned<f32>> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,0];
      pub const TYPE_ID: u64 = 0xfdca_7c67_5b70_21c6;
    }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum Desire {
    None = 0,
    TurnLeft = 1,
    TurnRight = 2,
    LaneChangeLeft = 3,
    LaneChangeRight = 4,
    KeepLeft = 5,
    KeepRight = 6,
  }

  impl ::capnp::introspect::Introspect for Desire {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &desire::ENCODED_NODE, annotation_types: desire::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<Desire> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: Desire) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &desire::ENCODED_NODE, annotation_types: desire::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for Desire {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <Desire as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::None),
        1 => ::core::result::Result::Ok(Self::TurnLeft),
        2 => ::core::result::Result::Ok(Self::TurnRight),
        3 => ::core::result::Result::Ok(Self::LaneChangeLeft),
        4 => ::core::result::Result::Ok(Self::LaneChangeRight),
        5 => ::core::result::Result::Ok(Self::KeepLeft),
        6 => ::core::result::Result::Ok(Self::KeepRight),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<Desire> for u16 {
    #[inline]
    fn from(x: Desire) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for Desire {
    const TYPE_ID: u64 = 0xbb53_ef3f_cf2a_7f0du64;
  }
  mod desire {
  pub static ENCODED_NODE: [::capnp::Word; 52] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(13, 127, 42, 207, 63, 239, 83, 187),
    ::capnp::word(22, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(30, 181, 232, 42, 142, 49, 233, 225),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 234, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 175, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 76, 97, 116, 101, 114, 97),
    ::capnp::word(108, 80, 108, 97, 110, 46, 68, 101),
    ::capnp::word(115, 105, 114, 101, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(28, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 0, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 0, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
    ::capnp::word(116, 117, 114, 110, 76, 101, 102, 116),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 117, 114, 110, 82, 105, 103, 104),
    ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
    ::capnp::word(103, 101, 76, 101, 102, 116, 0, 0),
    ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
    ::capnp::word(103, 101, 82, 105, 103, 104, 116, 0),
    ::capnp::word(107, 101, 101, 112, 76, 101, 102, 116),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(107, 101, 101, 112, 82, 105, 103, 104),
    ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum LaneChangeState {
    Off = 0,
    PreLaneChange = 1,
    LaneChangeStarting = 2,
    LaneChangeFinishing = 3,
  }

  impl ::capnp::introspect::Introspect for LaneChangeState {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &lane_change_state::ENCODED_NODE, annotation_types: lane_change_state::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<LaneChangeState> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: LaneChangeState) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &lane_change_state::ENCODED_NODE, annotation_types: lane_change_state::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for LaneChangeState {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <LaneChangeState as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Off),
        1 => ::core::result::Result::Ok(Self::PreLaneChange),
        2 => ::core::result::Result::Ok(Self::LaneChangeStarting),
        3 => ::core::result::Result::Ok(Self::LaneChangeFinishing),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<LaneChangeState> for u16 {
    #[inline]
    fn from(x: LaneChangeState) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for LaneChangeState {
    const TYPE_ID: u64 = 0xfac2_97f1_95ce_56d2u64;
  }
  mod lane_change_state {
  pub static ENCODED_NODE: [::capnp::Word; 40] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(210, 86, 206, 149, 241, 151, 194, 250),
    ::capnp::word(22, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(30, 181, 232, 42, 142, 49, 233, 225),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 50, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 76, 97, 116, 101, 114, 97),
    ::capnp::word(108, 80, 108, 97, 110, 46, 76, 97),
    ::capnp::word(110, 101, 67, 104, 97, 110, 103, 101),
    ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 162, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(111, 102, 102, 0, 0, 0, 0, 0),
    ::capnp::word(112, 114, 101, 76, 97, 110, 101, 67),
    ::capnp::word(104, 97, 110, 103, 101, 0, 0, 0),
    ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
    ::capnp::word(103, 101, 83, 116, 97, 114, 116, 105),
    ::capnp::word(110, 103, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
    ::capnp::word(103, 101, 70, 105, 110, 105, 115, 104),
    ::capnp::word(105, 110, 103, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum LaneChangeDirection {
    None = 0,
    Left = 1,
    Right = 2,
  }

  impl ::capnp::introspect::Introspect for LaneChangeDirection {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &lane_change_direction::ENCODED_NODE, annotation_types: lane_change_direction::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<LaneChangeDirection> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: LaneChangeDirection) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &lane_change_direction::ENCODED_NODE, annotation_types: lane_change_direction::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for LaneChangeDirection {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <LaneChangeDirection as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::None),
        1 => ::core::result::Result::Ok(Self::Left),
        2 => ::core::result::Result::Ok(Self::Right),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<LaneChangeDirection> for u16 {
    #[inline]
    fn from(x: LaneChangeDirection) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for LaneChangeDirection {
    const TYPE_ID: u64 = 0xf739_6311_bcba_d303u64;
  }
  mod lane_change_direction {
  pub static ENCODED_NODE: [::capnp::Word; 32] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(3, 211, 186, 188, 17, 99, 57, 247),
    ::capnp::word(22, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(30, 181, 232, 42, 142, 49, 233, 225),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 82, 1, 0, 0),
    ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 79, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 76, 97, 116, 101, 114, 97),
    ::capnp::word(108, 80, 108, 97, 110, 46, 76, 97),
    ::capnp::word(110, 101, 67, 104, 97, 110, 103, 101),
    ::capnp::word(68, 105, 114, 101, 99, 116, 105, 111),
    ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
    ::capnp::word(108, 101, 102, 116, 0, 0, 0, 0),
    ::capnp::word(114, 105, 103, 104, 116, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}

pub mod live_location_kalman {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_position_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_position_e_c_e_f(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_position_geodetic(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_position_geodetic(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_velocity_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_velocity_e_c_e_f(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_velocity_n_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_velocity_n_e_d(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_velocity_device(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_velocity_device(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_acceleration_device(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_acceleration_device(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_orientation_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_orientation_e_c_e_f(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_orientation_n_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_orientation_n_e_d(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_angular_velocity_device(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_angular_velocity_device(&self) -> bool {
      !self.reader.get_pointer_field(8).is_null()
    }
    #[inline]
    pub fn get_calibrated_orientation_n_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_calibrated_orientation_n_e_d(&self) -> bool {
      !self.reader.get_pointer_field(9).is_null()
    }
    #[inline]
    pub fn get_velocity_calibrated(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_velocity_calibrated(&self) -> bool {
      !self.reader.get_pointer_field(10).is_null()
    }
    #[inline]
    pub fn get_acceleration_calibrated(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(11), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_acceleration_calibrated(&self) -> bool {
      !self.reader.get_pointer_field(11).is_null()
    }
    #[inline]
    pub fn get_angular_velocity_calibrated(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(12), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_angular_velocity_calibrated(&self) -> bool {
      !self.reader.get_pointer_field(12).is_null()
    }
    #[inline]
    pub fn get_gps_week(self) -> i32 {
      self.reader.get_data_field::<i32>(0)
    }
    #[inline]
    pub fn get_gps_time_of_week(self) -> f64 {
      self.reader.get_data_field::<f64>(1)
    }
    #[inline]
    pub fn get_status(self) -> ::core::result::Result<crate::cereal::log_capnp::live_location_kalman::Status,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(2))
    }
    #[inline]
    pub fn get_unix_timestamp_millis(self) -> i64 {
      self.reader.get_data_field::<i64>(2)
    }
    #[inline]
    pub fn get_inputs_o_k(self) -> bool {
      self.reader.get_bool_field_mask(48, true)
    }
    #[inline]
    pub fn get_posenet_o_k(self) -> bool {
      self.reader.get_bool_field_mask(49, true)
    }
    #[inline]
    pub fn get_gps_o_k(self) -> bool {
      self.reader.get_bool_field_mask(50, true)
    }
    #[inline]
    pub fn get_calibrated_orientation_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(13), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_calibrated_orientation_e_c_e_f(&self) -> bool {
      !self.reader.get_pointer_field(13).is_null()
    }
    #[inline]
    pub fn get_sensors_o_k(self) -> bool {
      self.reader.get_bool_field_mask(51, true)
    }
    #[inline]
    pub fn get_device_stable(self) -> bool {
      self.reader.get_bool_field_mask(52, true)
    }
    #[inline]
    pub fn get_time_since_reset(self) -> f64 {
      self.reader.get_data_field::<f64>(3)
    }
    #[inline]
    pub fn get_excessive_resets(self) -> bool {
      self.reader.get_bool_field(53)
    }
    #[inline]
    pub fn get_time_to_first_fix(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn get_filter_state(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(14), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_filter_state(&self) -> bool {
      !self.reader.get_pointer_field(14).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 15 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_position_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_position_e_c_e_f(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_position_e_c_e_f(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_position_e_c_e_f(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_position_geodetic(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_position_geodetic(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_position_geodetic(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_position_geodetic(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_velocity_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_velocity_e_c_e_f(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_velocity_e_c_e_f(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    #[inline]
    pub fn has_velocity_e_c_e_f(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_velocity_n_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_velocity_n_e_d(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_velocity_n_e_d(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    #[inline]
    pub fn has_velocity_n_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_velocity_device(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_velocity_device(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_velocity_device(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), 0)
    }
    #[inline]
    pub fn has_velocity_device(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_acceleration_device(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_acceleration_device(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_acceleration_device(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), 0)
    }
    #[inline]
    pub fn has_acceleration_device(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_orientation_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_orientation_e_c_e_f(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_orientation_e_c_e_f(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), 0)
    }
    #[inline]
    pub fn has_orientation_e_c_e_f(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_orientation_n_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_orientation_n_e_d(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_orientation_n_e_d(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), 0)
    }
    #[inline]
    pub fn has_orientation_n_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(7)
    }
    #[inline]
    pub fn get_angular_velocity_device(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_angular_velocity_device(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(8), value, false)
    }
    #[inline]
    pub fn init_angular_velocity_device(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(8), 0)
    }
    #[inline]
    pub fn has_angular_velocity_device(&self) -> bool {
      !self.builder.is_pointer_field_null(8)
    }
    #[inline]
    pub fn get_calibrated_orientation_n_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_calibrated_orientation_n_e_d(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false)
    }
    #[inline]
    pub fn init_calibrated_orientation_n_e_d(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(9), 0)
    }
    #[inline]
    pub fn has_calibrated_orientation_n_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(9)
    }
    #[inline]
    pub fn get_velocity_calibrated(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_velocity_calibrated(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(10), value, false)
    }
    #[inline]
    pub fn init_velocity_calibrated(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(10), 0)
    }
    #[inline]
    pub fn has_velocity_calibrated(&self) -> bool {
      !self.builder.is_pointer_field_null(10)
    }
    #[inline]
    pub fn get_acceleration_calibrated(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(11), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_acceleration_calibrated(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(11), value, false)
    }
    #[inline]
    pub fn init_acceleration_calibrated(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(11), 0)
    }
    #[inline]
    pub fn has_acceleration_calibrated(&self) -> bool {
      !self.builder.is_pointer_field_null(11)
    }
    #[inline]
    pub fn get_angular_velocity_calibrated(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(12), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_angular_velocity_calibrated(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(12), value, false)
    }
    #[inline]
    pub fn init_angular_velocity_calibrated(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(12), 0)
    }
    #[inline]
    pub fn has_angular_velocity_calibrated(&self) -> bool {
      !self.builder.is_pointer_field_null(12)
    }
    #[inline]
    pub fn get_gps_week(self) -> i32 {
      self.builder.get_data_field::<i32>(0)
    }
    #[inline]
    pub fn set_gps_week(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(0, value);
    }
    #[inline]
    pub fn get_gps_time_of_week(self) -> f64 {
      self.builder.get_data_field::<f64>(1)
    }
    #[inline]
    pub fn set_gps_time_of_week(&mut self, value: f64)  {
      self.builder.set_data_field::<f64>(1, value);
    }
    #[inline]
    pub fn get_status(self) -> ::core::result::Result<crate::cereal::log_capnp::live_location_kalman::Status,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(2))
    }
    #[inline]
    pub fn set_status(&mut self, value: crate::cereal::log_capnp::live_location_kalman::Status)  {
      self.builder.set_data_field::<u16>(2, value as u16);
    }
    #[inline]
    pub fn get_unix_timestamp_millis(self) -> i64 {
      self.builder.get_data_field::<i64>(2)
    }
    #[inline]
    pub fn set_unix_timestamp_millis(&mut self, value: i64)  {
      self.builder.set_data_field::<i64>(2, value);
    }
    #[inline]
    pub fn get_inputs_o_k(self) -> bool {
      self.builder.get_bool_field_mask(48, true)
    }
    #[inline]
    pub fn set_inputs_o_k(&mut self, value: bool)  {
      self.builder.set_bool_field_mask(48, value, true);
    }
    #[inline]
    pub fn get_posenet_o_k(self) -> bool {
      self.builder.get_bool_field_mask(49, true)
    }
    #[inline]
    pub fn set_posenet_o_k(&mut self, value: bool)  {
      self.builder.set_bool_field_mask(49, value, true);
    }
    #[inline]
    pub fn get_gps_o_k(self) -> bool {
      self.builder.get_bool_field_mask(50, true)
    }
    #[inline]
    pub fn set_gps_o_k(&mut self, value: bool)  {
      self.builder.set_bool_field_mask(50, value, true);
    }
    #[inline]
    pub fn get_calibrated_orientation_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(13), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_calibrated_orientation_e_c_e_f(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(13), value, false)
    }
    #[inline]
    pub fn init_calibrated_orientation_e_c_e_f(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(13), 0)
    }
    #[inline]
    pub fn has_calibrated_orientation_e_c_e_f(&self) -> bool {
      !self.builder.is_pointer_field_null(13)
    }
    #[inline]
    pub fn get_sensors_o_k(self) -> bool {
      self.builder.get_bool_field_mask(51, true)
    }
    #[inline]
    pub fn set_sensors_o_k(&mut self, value: bool)  {
      self.builder.set_bool_field_mask(51, value, true);
    }
    #[inline]
    pub fn get_device_stable(self) -> bool {
      self.builder.get_bool_field_mask(52, true)
    }
    #[inline]
    pub fn set_device_stable(&mut self, value: bool)  {
      self.builder.set_bool_field_mask(52, value, true);
    }
    #[inline]
    pub fn get_time_since_reset(self) -> f64 {
      self.builder.get_data_field::<f64>(3)
    }
    #[inline]
    pub fn set_time_since_reset(&mut self, value: f64)  {
      self.builder.set_data_field::<f64>(3, value);
    }
    #[inline]
    pub fn get_excessive_resets(self) -> bool {
      self.builder.get_bool_field(53)
    }
    #[inline]
    pub fn set_excessive_resets(&mut self, value: bool)  {
      self.builder.set_bool_field(53, value);
    }
    #[inline]
    pub fn get_time_to_first_fix(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_time_to_first_fix(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
    #[inline]
    pub fn get_filter_state(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(14), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_filter_state(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(14), value, false)
    }
    #[inline]
    pub fn init_filter_state(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(14), 0)
    }
    #[inline]
    pub fn has_filter_state(&self) -> bool {
      !self.builder.is_pointer_field_null(14)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_position_e_c_e_f(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
    pub fn get_position_geodetic(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_velocity_e_c_e_f(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
    pub fn get_velocity_n_e_d(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
    pub fn get_velocity_device(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(4))
    }
    pub fn get_acceleration_device(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(5))
    }
    pub fn get_orientation_e_c_e_f(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(6))
    }
    pub fn get_orientation_n_e_d(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(7))
    }
    pub fn get_angular_velocity_device(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(8))
    }
    pub fn get_calibrated_orientation_n_e_d(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(9))
    }
    pub fn get_velocity_calibrated(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(10))
    }
    pub fn get_acceleration_calibrated(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(11))
    }
    pub fn get_angular_velocity_calibrated(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(12))
    }
    pub fn get_calibrated_orientation_e_c_e_f(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(13))
    }
    pub fn get_filter_state(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(14))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 466] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(41, 193, 231, 30, 61, 112, 197, 235),
      ::capnp::word(10, 0, 0, 0, 1, 0, 5, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(15, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 234, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 39, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 0, 0, 0, 239, 5, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 105, 118, 101, 76, 111),
      ::capnp::word(99, 97, 116, 105, 111, 110, 75, 97),
      ::capnp::word(108, 109, 97, 110, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(1, 252, 81, 75, 204, 200, 77, 142),
      ::capnp::word(9, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(5, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(83, 116, 97, 116, 117, 115, 0, 0),
      ::capnp::word(77, 101, 97, 115, 117, 114, 101, 109),
      ::capnp::word(101, 110, 116, 0, 0, 0, 0, 0),
      ::capnp::word(108, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 2, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 2, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 2, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 3, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 3, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 3, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 3, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 3, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 3, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 3, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 3, 0, 0, 210, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 3, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 3, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 3, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 3, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 48, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 3, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 49, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 3, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(148, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(160, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 3, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 3, 0, 0, 210, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 51, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 3, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 52, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 53, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 3, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 3, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(112, 111, 115, 105, 116, 105, 111, 110),
      ::capnp::word(69, 67, 69, 70, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 105, 116, 105, 111, 110),
      ::capnp::word(71, 101, 111, 100, 101, 116, 105, 99),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 101, 108, 111, 99, 105, 116, 121),
      ::capnp::word(69, 67, 69, 70, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 101, 108, 111, 99, 105, 116, 121),
      ::capnp::word(78, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 101, 108, 111, 99, 105, 116, 121),
      ::capnp::word(68, 101, 118, 105, 99, 101, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 101, 108, 101, 114, 97),
      ::capnp::word(116, 105, 111, 110, 68, 101, 118, 105),
      ::capnp::word(99, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 105, 101, 110, 116, 97, 116),
      ::capnp::word(105, 111, 110, 69, 67, 69, 70, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 105, 101, 110, 116, 97, 116),
      ::capnp::word(105, 111, 110, 78, 69, 68, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 117, 108, 97, 114, 86),
      ::capnp::word(101, 108, 111, 99, 105, 116, 121, 68),
      ::capnp::word(101, 118, 105, 99, 101, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 105, 98, 114, 97, 116),
      ::capnp::word(101, 100, 79, 114, 105, 101, 110, 116),
      ::capnp::word(97, 116, 105, 111, 110, 78, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 101, 108, 111, 99, 105, 116, 121),
      ::capnp::word(67, 97, 108, 105, 98, 114, 97, 116),
      ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 101, 108, 101, 114, 97),
      ::capnp::word(116, 105, 111, 110, 67, 97, 108, 105),
      ::capnp::word(98, 114, 97, 116, 101, 100, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 117, 108, 97, 114, 86),
      ::capnp::word(101, 108, 111, 99, 105, 116, 121, 67),
      ::capnp::word(97, 108, 105, 98, 114, 97, 116, 101),
      ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 84, 105, 109, 101, 79),
      ::capnp::word(102, 87, 101, 101, 107, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 116, 117, 115, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 252, 81, 75, 204, 200, 77, 142),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 110, 105, 120, 84, 105, 109, 101),
      ::capnp::word(115, 116, 97, 109, 112, 77, 105, 108),
      ::capnp::word(108, 105, 115, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 110, 112, 117, 116, 115, 79, 75),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 101, 110, 101, 116, 79),
      ::capnp::word(75, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 79, 75, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 105, 98, 114, 97, 116),
      ::capnp::word(101, 100, 79, 114, 105, 101, 110, 116),
      ::capnp::word(97, 116, 105, 111, 110, 69, 67, 69),
      ::capnp::word(70, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 110, 115, 111, 114, 115, 79),
      ::capnp::word(75, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 118, 105, 99, 101, 83, 116),
      ::capnp::word(97, 98, 108, 101, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 83, 105, 110, 99),
      ::capnp::word(101, 82, 101, 115, 101, 116, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 120, 99, 101, 115, 115, 105, 118),
      ::capnp::word(101, 82, 101, 115, 101, 116, 115, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 84, 111, 70, 105),
      ::capnp::word(114, 115, 116, 70, 105, 120, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 105, 108, 116, 101, 114, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        1 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        3 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        6 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        7 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        8 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        9 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        10 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        11 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        12 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        13 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        14 => <f64 as ::capnp::introspect::Introspect>::introspect(),
        15 => <crate::cereal::log_capnp::live_location_kalman::Status as ::capnp::introspect::Introspect>::introspect(),
        16 => <i64 as ::capnp::introspect::Introspect>::introspect(),
        17 => <bool as ::capnp::introspect::Introspect>::introspect(),
        18 => <bool as ::capnp::introspect::Introspect>::introspect(),
        19 => <bool as ::capnp::introspect::Introspect>::introspect(),
        20 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        21 => <bool as ::capnp::introspect::Introspect>::introspect(),
        22 => <bool as ::capnp::introspect::Introspect>::introspect(),
        23 => <f64 as ::capnp::introspect::Introspect>::introspect(),
        24 => <bool as ::capnp::introspect::Introspect>::introspect(),
        25 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        26 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[11,5,12,8,20,9,22,24,26,19,14,13,17,6,7,18,0,1,21,15,23,25,16,10,4,2,3];
    pub const TYPE_ID: u64 = 0xebc5_703d_1ee7_c129;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum Status {
    Uninitialized = 0,
    Uncalibrated = 1,
    Valid = 2,
  }

  impl ::capnp::introspect::Introspect for Status {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &status::ENCODED_NODE, annotation_types: status::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<Status> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: Status) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &status::ENCODED_NODE, annotation_types: status::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for Status {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <Status as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Uninitialized),
        1 => ::core::result::Result::Ok(Self::Uncalibrated),
        2 => ::core::result::Result::Ok(Self::Valid),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<Status> for u16 {
    #[inline]
    fn from(x: Status) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for Status {
    const TYPE_ID: u64 = 0x8e4d_c8cc_4b51_fc01u64;
  }
  mod status {
  pub static ENCODED_NODE: [::capnp::Word; 33] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(1, 252, 81, 75, 204, 200, 77, 142),
    ::capnp::word(29, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(41, 193, 231, 30, 61, 112, 197, 235),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 34, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 79, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 76, 105, 118, 101, 76, 111),
    ::capnp::word(99, 97, 116, 105, 111, 110, 75, 97),
    ::capnp::word(108, 109, 97, 110, 46, 83, 116, 97),
    ::capnp::word(116, 117, 115, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 105, 110, 105, 116, 105, 97),
    ::capnp::word(108, 105, 122, 101, 100, 0, 0, 0),
    ::capnp::word(117, 110, 99, 97, 108, 105, 98, 114),
    ::capnp::word(97, 116, 101, 100, 0, 0, 0, 0),
    ::capnp::word(118, 97, 108, 105, 100, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod measurement {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_value(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_std(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_valid(self) -> bool {
        self.reader.get_bool_field(0)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_value(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_value(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_value(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_std(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_valid(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 73] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
        ::capnp::word(29, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(41, 193, 231, 30, 61, 112, 197, 235),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 74, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 175, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 76, 105, 118, 101, 76, 111),
        ::capnp::word(99, 97, 116, 105, 111, 110, 75, 97),
        ::capnp::word(108, 109, 97, 110, 46, 77, 101, 97),
        ::capnp::word(115, 117, 114, 101, 109, 101, 110, 116),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(84, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(112, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(118, 97, 108, 117, 101, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 100, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 97, 108, 105, 100, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          2 => <bool as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,2,0];
      pub const TYPE_ID: u64 = 0xbf23_f9ed_66da_ce1c;
    }
  }
}

pub mod proc_log {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_cpu_times(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::proc_log::c_p_u_times::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_cpu_times(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_mem(self) -> ::capnp::Result<crate::cereal::log_capnp::proc_log::mem::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_mem(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_procs(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::proc_log::process::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_procs(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 3 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_cpu_times(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::proc_log::c_p_u_times::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_cpu_times(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::proc_log::c_p_u_times::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_cpu_times(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::proc_log::c_p_u_times::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_cpu_times(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_mem(self) -> ::capnp::Result<crate::cereal::log_capnp::proc_log::mem::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_mem(&mut self, value: crate::cereal::log_capnp::proc_log::mem::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_mem(self, ) -> crate::cereal::log_capnp::proc_log::mem::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_mem(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_procs(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::proc_log::process::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_procs(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::proc_log::process::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_procs(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::proc_log::process::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_procs(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_mem(&self) -> crate::cereal::log_capnp::proc_log::mem::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 81] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(6, 20, 104, 63, 123, 56, 133, 175),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 55, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 0, 0, 0, 175, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 80, 114, 111, 99, 76, 111),
      ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(40, 109, 158, 241, 19, 86, 184, 176),
      ::capnp::word(17, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(135, 224, 44, 191, 197, 200, 137, 241),
      ::capnp::word(13, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(212, 63, 139, 240, 148, 95, 9, 253),
      ::capnp::word(13, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(80, 114, 111, 99, 101, 115, 115, 0),
      ::capnp::word(67, 80, 85, 84, 105, 109, 101, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 101, 109, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(99, 112, 117, 84, 105, 109, 101, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(135, 224, 44, 191, 197, 200, 137, 241),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 101, 109, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 63, 139, 240, 148, 95, 9, 253),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 111, 99, 115, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 109, 158, 241, 19, 86, 184, 176),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::proc_log::c_p_u_times::Owned> as ::capnp::introspect::Introspect>::introspect(),
        1 => <crate::cereal::log_capnp::proc_log::mem::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::proc_log::process::Owned> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0,1,2];
    pub const TYPE_ID: u64 = 0xaf85_387b_3f68_1406;
  }

  pub mod process {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_pid(self) -> i32 {
        self.reader.get_data_field::<i32>(0)
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_state(self) -> u8 {
        self.reader.get_data_field::<u8>(4)
      }
      #[inline]
      pub fn get_ppid(self) -> i32 {
        self.reader.get_data_field::<i32>(2)
      }
      #[inline]
      pub fn get_cpu_user(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_cpu_system(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_cpu_children_user(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_cpu_children_system(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_priority(self) -> i64 {
        self.reader.get_data_field::<i64>(4)
      }
      #[inline]
      pub fn get_nice(self) -> i32 {
        self.reader.get_data_field::<i32>(7)
      }
      #[inline]
      pub fn get_num_threads(self) -> i32 {
        self.reader.get_data_field::<i32>(10)
      }
      #[inline]
      pub fn get_start_time(self) -> f64 {
        self.reader.get_data_field::<f64>(6)
      }
      #[inline]
      pub fn get_mem_vms(self) -> u64 {
        self.reader.get_data_field::<u64>(7)
      }
      #[inline]
      pub fn get_mem_rss(self) -> u64 {
        self.reader.get_data_field::<u64>(8)
      }
      #[inline]
      pub fn get_processor(self) -> i32 {
        self.reader.get_data_field::<i32>(11)
      }
      #[inline]
      pub fn get_cmdline(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_cmdline(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_exe(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_exe(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 9, pointers: 3 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_pid(self) -> i32 {
        self.builder.get_data_field::<i32>(0)
      }
      #[inline]
      pub fn set_pid(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(0, value);
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_name(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
      }
      #[inline]
      pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_state(self) -> u8 {
        self.builder.get_data_field::<u8>(4)
      }
      #[inline]
      pub fn set_state(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(4, value);
      }
      #[inline]
      pub fn get_ppid(self) -> i32 {
        self.builder.get_data_field::<i32>(2)
      }
      #[inline]
      pub fn set_ppid(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(2, value);
      }
      #[inline]
      pub fn get_cpu_user(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_cpu_user(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_cpu_system(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_cpu_system(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_cpu_children_user(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_cpu_children_user(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_cpu_children_system(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_cpu_children_system(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_priority(self) -> i64 {
        self.builder.get_data_field::<i64>(4)
      }
      #[inline]
      pub fn set_priority(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(4, value);
      }
      #[inline]
      pub fn get_nice(self) -> i32 {
        self.builder.get_data_field::<i32>(7)
      }
      #[inline]
      pub fn set_nice(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(7, value);
      }
      #[inline]
      pub fn get_num_threads(self) -> i32 {
        self.builder.get_data_field::<i32>(10)
      }
      #[inline]
      pub fn set_num_threads(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(10, value);
      }
      #[inline]
      pub fn get_start_time(self) -> f64 {
        self.builder.get_data_field::<f64>(6)
      }
      #[inline]
      pub fn set_start_time(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(6, value);
      }
      #[inline]
      pub fn get_mem_vms(self) -> u64 {
        self.builder.get_data_field::<u64>(7)
      }
      #[inline]
      pub fn set_mem_vms(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(7, value);
      }
      #[inline]
      pub fn get_mem_rss(self) -> u64 {
        self.builder.get_data_field::<u64>(8)
      }
      #[inline]
      pub fn set_mem_rss(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(8, value);
      }
      #[inline]
      pub fn get_processor(self) -> i32 {
        self.builder.get_data_field::<i32>(11)
      }
      #[inline]
      pub fn set_processor(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(11, value);
      }
      #[inline]
      pub fn get_cmdline(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_cmdline(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text_list::Owned>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_cmdline(self, size: u32) -> ::capnp::text_list::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_cmdline(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_exe(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_exe(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
      }
      #[inline]
      pub fn init_exe(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      #[inline]
      pub fn has_exe(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 285] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(40, 109, 158, 241, 19, 86, 184, 176),
        ::capnp::word(18, 0, 0, 0, 1, 0, 9, 0),
        ::capnp::word(6, 20, 104, 63, 123, 56, 133, 175),
        ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 210, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 191, 3, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 80, 114, 111, 99, 76, 111),
        ::capnp::word(103, 46, 80, 114, 111, 99, 101, 115),
        ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(68, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 1, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(200, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(212, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 1, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 1, 0, 0, 146, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(244, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(0, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(253, 1, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 2, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 2, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(17, 2, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 2, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(20, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(32, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 2, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 2, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 2, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 2, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(112, 105, 100, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 97, 116, 101, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 112, 105, 100, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 112, 117, 85, 115, 101, 114, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 112, 117, 83, 121, 115, 116, 101),
        ::capnp::word(109, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 112, 117, 67, 104, 105, 108, 100),
        ::capnp::word(114, 101, 110, 85, 115, 101, 114, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 112, 117, 67, 104, 105, 108, 100),
        ::capnp::word(114, 101, 110, 83, 121, 115, 116, 101),
        ::capnp::word(109, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 114, 105, 111, 114, 105, 116, 121),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 105, 99, 101, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 117, 109, 84, 104, 114, 101, 97),
        ::capnp::word(100, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 97, 114, 116, 84, 105, 109),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 101, 109, 86, 109, 115, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 101, 109, 82, 115, 115, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 114, 111, 99, 101, 115, 115, 111),
        ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 109, 100, 108, 105, 110, 101, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 120, 101, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          2 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          3 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <i64 as ::capnp::introspect::Introspect>::introspect(),
          9 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          10 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          11 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          12 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          13 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          14 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          15 => <::capnp::text_list::Owned as ::capnp::introspect::Introspect>::introspect(),
          16 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[15,7,6,5,4,16,13,12,1,9,10,0,3,8,14,11,2];
      pub const TYPE_ID: u64 = 0xb0b8_5613_f19e_6d28;
    }
  }

  pub mod c_p_u_times {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_cpu_num(self) -> i64 {
        self.reader.get_data_field::<i64>(0)
      }
      #[inline]
      pub fn get_user(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_nice(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_system(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_idle(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_iowait(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_irq(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_softirq(self) -> f32 {
        self.reader.get_data_field::<f32>(8)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_cpu_num(self) -> i64 {
        self.builder.get_data_field::<i64>(0)
      }
      #[inline]
      pub fn set_cpu_num(&mut self, value: i64)  {
        self.builder.set_data_field::<i64>(0, value);
      }
      #[inline]
      pub fn get_user(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_user(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_nice(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_nice(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_system(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_system(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_idle(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_idle(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_iowait(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_iowait(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_irq(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_irq(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_softirq(self) -> f32 {
        self.builder.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn set_softirq(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(8, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 138] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(135, 224, 44, 191, 197, 200, 137, 241),
        ::capnp::word(18, 0, 0, 0, 1, 0, 5, 0),
        ::capnp::word(6, 20, 104, 63, 123, 56, 133, 175),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 218, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 199, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 80, 114, 111, 99, 76, 111),
        ::capnp::word(103, 46, 67, 80, 85, 84, 105, 109),
        ::capnp::word(101, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(32, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(99, 112, 117, 78, 117, 109, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 115, 101, 114, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 105, 99, 101, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 121, 115, 116, 101, 109, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 100, 108, 101, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 119, 97, 105, 116, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 114, 113, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 111, 102, 116, 105, 114, 113, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <i64 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,4,5,6,2,7,3,1];
      pub const TYPE_ID: u64 = 0xf189_c8c5_bf2c_e087;
    }
  }

  pub mod mem {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_total(self) -> u64 {
        self.reader.get_data_field::<u64>(0)
      }
      #[inline]
      pub fn get_free(self) -> u64 {
        self.reader.get_data_field::<u64>(1)
      }
      #[inline]
      pub fn get_available(self) -> u64 {
        self.reader.get_data_field::<u64>(2)
      }
      #[inline]
      pub fn get_buffers(self) -> u64 {
        self.reader.get_data_field::<u64>(3)
      }
      #[inline]
      pub fn get_cached(self) -> u64 {
        self.reader.get_data_field::<u64>(4)
      }
      #[inline]
      pub fn get_active(self) -> u64 {
        self.reader.get_data_field::<u64>(5)
      }
      #[inline]
      pub fn get_inactive(self) -> u64 {
        self.reader.get_data_field::<u64>(6)
      }
      #[inline]
      pub fn get_shared(self) -> u64 {
        self.reader.get_data_field::<u64>(7)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 8, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_total(self) -> u64 {
        self.builder.get_data_field::<u64>(0)
      }
      #[inline]
      pub fn set_total(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(0, value);
      }
      #[inline]
      pub fn get_free(self) -> u64 {
        self.builder.get_data_field::<u64>(1)
      }
      #[inline]
      pub fn set_free(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(1, value);
      }
      #[inline]
      pub fn get_available(self) -> u64 {
        self.builder.get_data_field::<u64>(2)
      }
      #[inline]
      pub fn set_available(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(2, value);
      }
      #[inline]
      pub fn get_buffers(self) -> u64 {
        self.builder.get_data_field::<u64>(3)
      }
      #[inline]
      pub fn set_buffers(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(3, value);
      }
      #[inline]
      pub fn get_cached(self) -> u64 {
        self.builder.get_data_field::<u64>(4)
      }
      #[inline]
      pub fn set_cached(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(4, value);
      }
      #[inline]
      pub fn get_active(self) -> u64 {
        self.builder.get_data_field::<u64>(5)
      }
      #[inline]
      pub fn set_active(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(5, value);
      }
      #[inline]
      pub fn get_inactive(self) -> u64 {
        self.builder.get_data_field::<u64>(6)
      }
      #[inline]
      pub fn set_inactive(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(6, value);
      }
      #[inline]
      pub fn get_shared(self) -> u64 {
        self.builder.get_data_field::<u64>(7)
      }
      #[inline]
      pub fn set_shared(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(7, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 139] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(212, 63, 139, 240, 148, 95, 9, 253),
        ::capnp::word(18, 0, 0, 0, 1, 0, 8, 0),
        ::capnp::word(6, 20, 104, 63, 123, 56, 133, 175),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 178, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 0, 0, 0, 199, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 80, 114, 111, 99, 76, 111),
        ::capnp::word(103, 46, 77, 101, 109, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(32, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(236, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(248, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(245, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(116, 111, 116, 97, 108, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 101, 101, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 118, 97, 105, 108, 97, 98, 108),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 117, 102, 102, 101, 114, 115, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 99, 104, 101, 100, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 110, 97, 99, 116, 105, 118, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 104, 97, 114, 101, 100, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          2 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          3 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          4 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          5 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          6 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          7 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[5,2,3,4,1,6,7,0];
      pub const TYPE_ID: u64 = 0xfd09_5f94_f08b_3fd4;
    }
  }
}

pub mod gnss_measurements {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_meas_time(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_gps_week(self) -> i16 {
      self.reader.get_data_field::<i16>(4)
    }
    #[inline]
    pub fn get_gps_time_of_week(self) -> f64 {
      self.reader.get_data_field::<f64>(2)
    }
    #[inline]
    pub fn get_corrected_measurements(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::gnss_measurements::corrected_measurement::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_corrected_measurements(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_kalman_position_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_kalman_position_e_c_e_f(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_kalman_velocity_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_kalman_velocity_e_c_e_f(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_position_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_position_e_c_e_f(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_velocity_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_velocity_e_c_e_f(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_time_to_first_fix(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_ephemeris_statuses(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::gnss_measurements::ephemeris_status::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_ephemeris_statuses(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 6 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_meas_time(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_meas_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_gps_week(self) -> i16 {
      self.builder.get_data_field::<i16>(4)
    }
    #[inline]
    pub fn set_gps_week(&mut self, value: i16)  {
      self.builder.set_data_field::<i16>(4, value);
    }
    #[inline]
    pub fn get_gps_time_of_week(self) -> f64 {
      self.builder.get_data_field::<f64>(2)
    }
    #[inline]
    pub fn set_gps_time_of_week(&mut self, value: f64)  {
      self.builder.set_data_field::<f64>(2, value);
    }
    #[inline]
    pub fn get_corrected_measurements(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::gnss_measurements::corrected_measurement::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_corrected_measurements(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::gnss_measurements::corrected_measurement::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_corrected_measurements(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::gnss_measurements::corrected_measurement::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_corrected_measurements(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_kalman_position_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_kalman_position_e_c_e_f(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_kalman_position_e_c_e_f(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_kalman_position_e_c_e_f(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_kalman_velocity_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_kalman_velocity_e_c_e_f(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_kalman_velocity_e_c_e_f(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    #[inline]
    pub fn has_kalman_velocity_e_c_e_f(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_position_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_position_e_c_e_f(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_position_e_c_e_f(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    #[inline]
    pub fn has_position_e_c_e_f(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_velocity_e_c_e_f(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_velocity_e_c_e_f(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_velocity_e_c_e_f(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), 0)
    }
    #[inline]
    pub fn has_velocity_e_c_e_f(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_time_to_first_fix(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_time_to_first_fix(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_ephemeris_statuses(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::gnss_measurements::ephemeris_status::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_ephemeris_statuses(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::gnss_measurements::ephemeris_status::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_ephemeris_statuses(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::gnss_measurements::ephemeris_status::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_ephemeris_statuses(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_kalman_position_e_c_e_f(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_kalman_velocity_e_c_e_f(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
    pub fn get_position_e_c_e_f(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
    pub fn get_velocity_e_c_e_f(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(4))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 216] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(9, 157, 14, 87, 22, 112, 212, 175),
      ::capnp::word(10, 0, 0, 0, 1, 0, 3, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 218, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 103, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 0, 0, 0, 55, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 71, 110, 115, 115, 77, 101),
      ::capnp::word(97, 115, 117, 114, 101, 109, 101, 110),
      ::capnp::word(116, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(96, 184, 191, 168, 230, 107, 40, 243),
      ::capnp::word(41, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(176, 118, 172, 134, 125, 161, 164, 234),
      ::capnp::word(41, 0, 0, 0, 170, 0, 0, 0),
      ::capnp::word(133, 173, 192, 135, 80, 239, 194, 188),
      ::capnp::word(45, 0, 0, 0, 210, 0, 0, 0),
      ::capnp::word(119, 8, 69, 168, 46, 156, 7, 130),
      ::capnp::word(53, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(147, 141, 176, 4, 24, 188, 153, 194),
      ::capnp::word(53, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(246, 153, 166, 150, 51, 155, 227, 246),
      ::capnp::word(53, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(69, 112, 104, 101, 109, 101, 114, 105),
      ::capnp::word(115, 83, 116, 97, 116, 117, 115, 0),
      ::capnp::word(67, 111, 114, 114, 101, 99, 116, 101),
      ::capnp::word(100, 77, 101, 97, 115, 117, 114, 101),
      ::capnp::word(109, 101, 110, 116, 0, 0, 0, 0),
      ::capnp::word(69, 112, 104, 101, 109, 101, 114, 105),
      ::capnp::word(115, 83, 111, 117, 114, 99, 101, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(67, 111, 110, 115, 116, 101, 108, 108),
      ::capnp::word(97, 116, 105, 111, 110, 73, 100, 0),
      ::capnp::word(69, 112, 104, 101, 109, 101, 114, 105),
      ::capnp::word(115, 84, 121, 112, 101, 0, 0, 0),
      ::capnp::word(69, 112, 104, 101, 109, 101, 114, 105),
      ::capnp::word(115, 83, 111, 117, 114, 99, 101, 0),
      ::capnp::word(40, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 1, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 1, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 1, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 1, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 1, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 1, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(109, 101, 97, 115, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 84, 105, 109, 101, 79),
      ::capnp::word(102, 87, 101, 101, 107, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 114, 114, 101, 99, 116, 101),
      ::capnp::word(100, 77, 101, 97, 115, 117, 114, 101),
      ::capnp::word(109, 101, 110, 116, 115, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 118, 172, 134, 125, 161, 164, 234),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(107, 97, 108, 109, 97, 110, 80, 111),
      ::capnp::word(115, 105, 116, 105, 111, 110, 69, 67),
      ::capnp::word(69, 70, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(107, 97, 108, 109, 97, 110, 86, 101),
      ::capnp::word(108, 111, 99, 105, 116, 121, 69, 67),
      ::capnp::word(69, 70, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 105, 116, 105, 111, 110),
      ::capnp::word(69, 67, 69, 70, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 101, 108, 111, 99, 105, 116, 121),
      ::capnp::word(69, 67, 69, 70, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 84, 111, 70, 105),
      ::capnp::word(114, 115, 116, 70, 105, 120, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 112, 104, 101, 109, 101, 114, 105),
      ::capnp::word(115, 83, 116, 97, 116, 117, 115, 101),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 184, 191, 168, 230, 107, 40, 243),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <i16 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f64 as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::gnss_measurements::corrected_measurement::Owned> as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        6 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        7 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::gnss_measurements::ephemeris_status::Owned> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[3,9,2,1,4,5,0,6,8,7];
    pub const TYPE_ID: u64 = 0xafd4_7016_570e_9d09;
  }

  pub mod ephemeris_status {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_constellation_id(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::ConstellationId,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_sv_id(self) -> u8 {
        self.reader.get_data_field::<u8>(2)
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::EphemerisType,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(2))
      }
      #[inline]
      pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::EphemerisSource,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(3))
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.reader.get_data_field::<u16>(4)
      }
      #[inline]
      pub fn get_tow(self) -> f64 {
        self.reader.get_data_field::<f64>(2)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_constellation_id(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::ConstellationId,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_constellation_id(&mut self, value: crate::cereal::log_capnp::gnss_measurements::ConstellationId)  {
        self.builder.set_data_field::<u16>(0, value as u16);
      }
      #[inline]
      pub fn get_sv_id(self) -> u8 {
        self.builder.get_data_field::<u8>(2)
      }
      #[inline]
      pub fn set_sv_id(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(2, value);
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::EphemerisType,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(2))
      }
      #[inline]
      pub fn set_type(&mut self, value: crate::cereal::log_capnp::gnss_measurements::EphemerisType)  {
        self.builder.set_data_field::<u16>(2, value as u16);
      }
      #[inline]
      pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::EphemerisSource,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(3))
      }
      #[inline]
      pub fn set_source(&mut self, value: crate::cereal::log_capnp::gnss_measurements::EphemerisSource)  {
        self.builder.set_data_field::<u16>(3, value as u16);
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.builder.get_data_field::<u16>(4)
      }
      #[inline]
      pub fn set_gps_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(4, value);
      }
      #[inline]
      pub fn get_tow(self) -> f64 {
        self.builder.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn set_tow(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(2, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 111] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(96, 184, 191, 168, 230, 107, 40, 243),
        ::capnp::word(27, 0, 0, 0, 1, 0, 3, 0),
        ::capnp::word(9, 157, 14, 87, 22, 112, 212, 175),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 90, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 87, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 71, 110, 115, 115, 77, 101),
        ::capnp::word(97, 115, 117, 114, 101, 109, 101, 110),
        ::capnp::word(116, 115, 46, 69, 112, 104, 101, 109),
        ::capnp::word(101, 114, 105, 115, 83, 116, 97, 116),
        ::capnp::word(117, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(24, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(153, 0, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(176, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(173, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(99, 111, 110, 115, 116, 101, 108, 108),
        ::capnp::word(97, 116, 105, 111, 110, 73, 100, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(119, 8, 69, 168, 46, 156, 7, 130),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 73, 100, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(147, 141, 176, 4, 24, 188, 153, 194),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 111, 117, 114, 99, 101, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(246, 153, 166, 150, 51, 155, 227, 246),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 119, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <crate::cereal::log_capnp::gnss_measurements::ConstellationId as ::capnp::introspect::Introspect>::introspect(),
          1 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          2 => <crate::cereal::log_capnp::gnss_measurements::EphemerisType as ::capnp::introspect::Introspect>::introspect(),
          3 => <crate::cereal::log_capnp::gnss_measurements::EphemerisSource as ::capnp::introspect::Introspect>::introspect(),
          4 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,4,3,1,5,2];
      pub const TYPE_ID: u64 = 0xf328_6be6_a8bf_b860;
    }
  }

  pub mod corrected_measurement {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_constellation_id(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::ConstellationId,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_sv_id(self) -> u8 {
        self.reader.get_data_field::<u8>(2)
      }
      #[inline]
      pub fn get_glonass_frequency(self) -> i8 {
        self.reader.get_data_field::<i8>(3)
      }
      #[inline]
      pub fn get_pseudorange(self) -> f64 {
        self.reader.get_data_field::<f64>(1)
      }
      #[inline]
      pub fn get_pseudorange_std(self) -> f64 {
        self.reader.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn get_pseudorange_rate(self) -> f64 {
        self.reader.get_data_field::<f64>(3)
      }
      #[inline]
      pub fn get_pseudorange_rate_std(self) -> f64 {
        self.reader.get_data_field::<f64>(4)
      }
      #[inline]
      pub fn get_sat_pos(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_sat_pos(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_sat_vel(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_sat_vel(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_ephemeris_source_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::gnss_measurements::ephemeris_source_d_e_p_r_e_c_a_t_e_d::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_ephemeris_source_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 3 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_constellation_id(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::ConstellationId,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_constellation_id(&mut self, value: crate::cereal::log_capnp::gnss_measurements::ConstellationId)  {
        self.builder.set_data_field::<u16>(0, value as u16);
      }
      #[inline]
      pub fn get_sv_id(self) -> u8 {
        self.builder.get_data_field::<u8>(2)
      }
      #[inline]
      pub fn set_sv_id(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(2, value);
      }
      #[inline]
      pub fn get_glonass_frequency(self) -> i8 {
        self.builder.get_data_field::<i8>(3)
      }
      #[inline]
      pub fn set_glonass_frequency(&mut self, value: i8)  {
        self.builder.set_data_field::<i8>(3, value);
      }
      #[inline]
      pub fn get_pseudorange(self) -> f64 {
        self.builder.get_data_field::<f64>(1)
      }
      #[inline]
      pub fn set_pseudorange(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(1, value);
      }
      #[inline]
      pub fn get_pseudorange_std(self) -> f64 {
        self.builder.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn set_pseudorange_std(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(2, value);
      }
      #[inline]
      pub fn get_pseudorange_rate(self) -> f64 {
        self.builder.get_data_field::<f64>(3)
      }
      #[inline]
      pub fn set_pseudorange_rate(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(3, value);
      }
      #[inline]
      pub fn get_pseudorange_rate_std(self) -> f64 {
        self.builder.get_data_field::<f64>(4)
      }
      #[inline]
      pub fn set_pseudorange_rate_std(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(4, value);
      }
      #[inline]
      pub fn get_sat_pos(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_sat_pos(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_sat_pos(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_sat_pos(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_sat_vel(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_sat_vel(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_sat_vel(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_sat_vel(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_ephemeris_source_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::log_capnp::gnss_measurements::ephemeris_source_d_e_p_r_e_c_a_t_e_d::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_ephemeris_source_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::gnss_measurements::ephemeris_source_d_e_p_r_e_c_a_t_e_d::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_ephemeris_source_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::gnss_measurements::ephemeris_source_d_e_p_r_e_c_a_t_e_d::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
      }
      #[inline]
      pub fn has_ephemeris_source_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
      pub fn get_ephemeris_source_d_e_p_r_e_c_a_t_e_d(&self) -> crate::cereal::log_capnp::gnss_measurements::ephemeris_source_d_e_p_r_e_c_a_t_e_d::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
      }
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 189] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(176, 118, 172, 134, 125, 161, 164, 234),
        ::capnp::word(27, 0, 0, 0, 1, 0, 5, 0),
        ::capnp::word(9, 157, 14, 87, 22, 112, 212, 175),
        ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 130, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 55, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 71, 110, 115, 115, 77, 101),
        ::capnp::word(97, 115, 117, 114, 101, 109, 101, 110),
        ::capnp::word(116, 115, 46, 67, 111, 114, 114, 101),
        ::capnp::word(99, 116, 101, 100, 77, 101, 97, 115),
        ::capnp::word(117, 114, 101, 109, 101, 110, 116, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(17, 1, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(24, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 1, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 1, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(49, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(48, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(60, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(57, 1, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(60, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(72, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(84, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(112, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 1, 0, 0, 210, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(128, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(99, 111, 110, 115, 116, 101, 108, 108),
        ::capnp::word(97, 116, 105, 111, 110, 73, 100, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(119, 8, 69, 168, 46, 156, 7, 130),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 73, 100, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 70),
        ::capnp::word(114, 101, 113, 117, 101, 110, 99, 121),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 115, 101, 117, 100, 111, 114, 97),
        ::capnp::word(110, 103, 101, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 115, 101, 117, 100, 111, 114, 97),
        ::capnp::word(110, 103, 101, 83, 116, 100, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 115, 101, 117, 100, 111, 114, 97),
        ::capnp::word(110, 103, 101, 82, 97, 116, 101, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 115, 101, 117, 100, 111, 114, 97),
        ::capnp::word(110, 103, 101, 82, 97, 116, 101, 83),
        ::capnp::word(116, 100, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 80, 111, 115, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 86, 101, 108, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 112, 104, 101, 109, 101, 114, 105),
        ::capnp::word(115, 83, 111, 117, 114, 99, 101, 68),
        ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
        ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(133, 173, 192, 135, 80, 239, 194, 188),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <crate::cereal::log_capnp::gnss_measurements::ConstellationId as ::capnp::introspect::Introspect>::introspect(),
          1 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          2 => <i8 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          7 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          8 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          9 => <crate::cereal::log_capnp::gnss_measurements::ephemeris_source_d_e_p_r_e_c_a_t_e_d::Owned as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,9,2,3,5,6,4,7,8,1];
      pub const TYPE_ID: u64 = 0xeaa4_a17d_86ac_76b0;
    }
  }

  pub mod ephemeris_source_d_e_p_r_e_c_a_t_e_d {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::EphemerisType,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_gps_week(self) -> i16 {
        self.reader.get_data_field::<i16>(1)
      }
      #[inline]
      pub fn get_gps_time_of_week(self) -> i32 {
        self.reader.get_data_field::<i32>(1)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::cereal::log_capnp::gnss_measurements::EphemerisType,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_type(&mut self, value: crate::cereal::log_capnp::gnss_measurements::EphemerisType)  {
        self.builder.set_data_field::<u16>(0, value as u16);
      }
      #[inline]
      pub fn get_gps_week(self) -> i16 {
        self.builder.get_data_field::<i16>(1)
      }
      #[inline]
      pub fn set_gps_week(&mut self, value: i16)  {
        self.builder.set_data_field::<i16>(1, value);
      }
      #[inline]
      pub fn get_gps_time_of_week(self) -> i32 {
        self.builder.get_data_field::<i32>(1)
      }
      #[inline]
      pub fn set_gps_time_of_week(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(1, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 67] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(133, 173, 192, 135, 80, 239, 194, 188),
        ::capnp::word(27, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(9, 157, 14, 87, 22, 112, 212, 175),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 170, 1, 0, 0),
        ::capnp::word(45, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 175, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 71, 110, 115, 115, 77, 101),
        ::capnp::word(97, 115, 117, 114, 101, 109, 101, 110),
        ::capnp::word(116, 115, 46, 69, 112, 104, 101, 109),
        ::capnp::word(101, 114, 105, 115, 83, 111, 117, 114),
        ::capnp::word(99, 101, 68, 69, 80, 82, 69, 67),
        ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(76, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(73, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(80, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(77, 0, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(76, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(88, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(147, 141, 176, 4, 24, 188, 153, 194),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 105, 109, 101, 79),
        ::capnp::word(102, 87, 101, 101, 107, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <crate::cereal::log_capnp::gnss_measurements::EphemerisType as ::capnp::introspect::Introspect>::introspect(),
          1 => <i16 as ::capnp::introspect::Introspect>::introspect(),
          2 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[2,1,0];
      pub const TYPE_ID: u64 = 0xbcc2_ef50_87c0_ad85;
    }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum ConstellationId {
    Gps = 0,
    Sbas = 1,
    Galileo = 2,
    Beidou = 3,
    Imes = 4,
    Qznss = 5,
    Glonass = 6,
  }

  impl ::capnp::introspect::Introspect for ConstellationId {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &constellation_id::ENCODED_NODE, annotation_types: constellation_id::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<ConstellationId> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: ConstellationId) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &constellation_id::ENCODED_NODE, annotation_types: constellation_id::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for ConstellationId {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <ConstellationId as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Gps),
        1 => ::core::result::Result::Ok(Self::Sbas),
        2 => ::core::result::Result::Ok(Self::Galileo),
        3 => ::core::result::Result::Ok(Self::Beidou),
        4 => ::core::result::Result::Ok(Self::Imes),
        5 => ::core::result::Result::Ok(Self::Qznss),
        6 => ::core::result::Result::Ok(Self::Glonass),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<ConstellationId> for u16 {
    #[inline]
    fn from(x: ConstellationId) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for ConstellationId {
    const TYPE_ID: u64 = 0x8207_9c2e_a845_0877u64;
  }
  mod constellation_id {
  pub static ENCODED_NODE: [::capnp::Word; 48] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(119, 8, 69, 168, 46, 156, 7, 130),
    ::capnp::word(27, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(9, 157, 14, 87, 22, 112, 212, 175),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 90, 1, 0, 0),
    ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 175, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 71, 110, 115, 115, 77, 101),
    ::capnp::word(97, 115, 117, 114, 101, 109, 101, 110),
    ::capnp::word(116, 115, 46, 67, 111, 110, 115, 116),
    ::capnp::word(101, 108, 108, 97, 116, 105, 111, 110),
    ::capnp::word(73, 100, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(28, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 112, 115, 0, 0, 0, 0, 0),
    ::capnp::word(115, 98, 97, 115, 0, 0, 0, 0),
    ::capnp::word(103, 97, 108, 105, 108, 101, 111, 0),
    ::capnp::word(98, 101, 105, 100, 111, 117, 0, 0),
    ::capnp::word(105, 109, 101, 115, 0, 0, 0, 0),
    ::capnp::word(113, 122, 110, 115, 115, 0, 0, 0),
    ::capnp::word(103, 108, 111, 110, 97, 115, 115, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum EphemerisType {
    Nav = 0,
    NasaUltraRapid = 1,
    GlonassIacUltraRapid = 2,
    Qcom = 3,
  }

  impl ::capnp::introspect::Introspect for EphemerisType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &ephemeris_type::ENCODED_NODE, annotation_types: ephemeris_type::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<EphemerisType> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: EphemerisType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &ephemeris_type::ENCODED_NODE, annotation_types: ephemeris_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for EphemerisType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <EphemerisType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Nav),
        1 => ::core::result::Result::Ok(Self::NasaUltraRapid),
        2 => ::core::result::Result::Ok(Self::GlonassIacUltraRapid),
        3 => ::core::result::Result::Ok(Self::Qcom),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<EphemerisType> for u16 {
    #[inline]
    fn from(x: EphemerisType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for EphemerisType {
    const TYPE_ID: u64 = 0xc299_bc18_04b0_8d93u64;
  }
  mod ephemeris_type {
  pub static ENCODED_NODE: [::capnp::Word; 39] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(147, 141, 176, 4, 24, 188, 153, 194),
    ::capnp::word(27, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(9, 157, 14, 87, 22, 112, 212, 175),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 74, 1, 0, 0),
    ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 71, 110, 115, 115, 77, 101),
    ::capnp::word(97, 115, 117, 114, 101, 109, 101, 110),
    ::capnp::word(116, 115, 46, 69, 112, 104, 101, 109),
    ::capnp::word(101, 114, 105, 115, 84, 121, 112, 101),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 170, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 97, 118, 0, 0, 0, 0, 0),
    ::capnp::word(110, 97, 115, 97, 85, 108, 116, 114),
    ::capnp::word(97, 82, 97, 112, 105, 100, 0, 0),
    ::capnp::word(103, 108, 111, 110, 97, 115, 115, 73),
    ::capnp::word(97, 99, 85, 108, 116, 114, 97, 82),
    ::capnp::word(97, 112, 105, 100, 0, 0, 0, 0),
    ::capnp::word(113, 99, 111, 109, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum EphemerisSource {
    GnssChip = 0,
    Internet = 1,
    Cache = 2,
    Unknown = 3,
  }

  impl ::capnp::introspect::Introspect for EphemerisSource {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &ephemeris_source::ENCODED_NODE, annotation_types: ephemeris_source::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<EphemerisSource> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: EphemerisSource) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &ephemeris_source::ENCODED_NODE, annotation_types: ephemeris_source::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for EphemerisSource {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <EphemerisSource as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::GnssChip),
        1 => ::core::result::Result::Ok(Self::Internet),
        2 => ::core::result::Result::Ok(Self::Cache),
        3 => ::core::result::Result::Ok(Self::Unknown),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<EphemerisSource> for u16 {
    #[inline]
    fn from(x: EphemerisSource) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for EphemerisSource {
    const TYPE_ID: u64 = 0xf6e3_9b33_96a6_99f6u64;
  }
  mod ephemeris_source {
  pub static ENCODED_NODE: [::capnp::Word; 38] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(246, 153, 166, 150, 51, 155, 227, 246),
    ::capnp::word(27, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(9, 157, 14, 87, 22, 112, 212, 175),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 90, 1, 0, 0),
    ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 71, 110, 115, 115, 77, 101),
    ::capnp::word(97, 115, 117, 114, 101, 109, 101, 110),
    ::capnp::word(116, 115, 46, 69, 112, 104, 101, 109),
    ::capnp::word(101, 114, 105, 115, 83, 111, 117, 114),
    ::capnp::word(99, 101, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 110, 115, 115, 67, 104, 105, 112),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 110, 101, 116),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 99, 104, 101, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}

pub mod ublox_gnss {
  pub use self::Which::{MeasurementReport,Ephemeris,IonoData,HwStatus,HwStatus2,GlonassEphemeris,SatReport};

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn has_measurement_report(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 0 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_ephemeris(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_iono_data(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 2 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_hw_status(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 3 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_hw_status2(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 4 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_glonass_ephemeris(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 5 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_sat_report(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 6 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(MeasurementReport(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(Ephemeris(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(IonoData(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(HwStatus(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(HwStatus2(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(GlonassEphemeris(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        6 => {
          ::core::result::Result::Ok(SatReport(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn set_measurement_report(&mut self, value: crate::cereal::log_capnp::ublox_gnss::measurement_report::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_measurement_report(self, ) -> crate::cereal::log_capnp::ublox_gnss::measurement_report::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_measurement_report(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 0 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_ephemeris(&mut self, value: crate::cereal::log_capnp::ublox_gnss::ephemeris::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_ephemeris(self, ) -> crate::cereal::log_capnp::ublox_gnss::ephemeris::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_ephemeris(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 1 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_iono_data(&mut self, value: crate::cereal::log_capnp::ublox_gnss::iono_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 2);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_iono_data(self, ) -> crate::cereal::log_capnp::ublox_gnss::iono_data::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 2);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_iono_data(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 2 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_hw_status(&mut self, value: crate::cereal::log_capnp::ublox_gnss::hw_status::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 3);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_hw_status(self, ) -> crate::cereal::log_capnp::ublox_gnss::hw_status::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 3);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_hw_status(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 3 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_hw_status2(&mut self, value: crate::cereal::log_capnp::ublox_gnss::hw_status2::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 4);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_hw_status2(self, ) -> crate::cereal::log_capnp::ublox_gnss::hw_status2::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 4);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_hw_status2(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 4 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_glonass_ephemeris(&mut self, value: crate::cereal::log_capnp::ublox_gnss::glonass_ephemeris::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 5);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_glonass_ephemeris(self, ) -> crate::cereal::log_capnp::ublox_gnss::glonass_ephemeris::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 5);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_glonass_ephemeris(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 5 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_sat_report(&mut self, value: crate::cereal::log_capnp::ublox_gnss::sat_report::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 6);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_sat_report(self, ) -> crate::cereal::log_capnp::ublox_gnss::sat_report::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 6);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_sat_report(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 6 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(MeasurementReport(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(Ephemeris(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(IonoData(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(HwStatus(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(HwStatus2(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(GlonassEphemeris(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        6 => {
          ::core::result::Result::Ok(SatReport(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 161] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(93, 250, 206, 230, 124, 221, 221, 133),
      ::capnp::word(10, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 7, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 119, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 0, 0, 0, 143, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
      ::capnp::word(110, 115, 115, 0, 0, 0, 0, 0),
      ::capnp::word(28, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(83, 143, 104, 118, 255, 42, 100, 187),
      ::capnp::word(49, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(244, 32, 152, 162, 70, 165, 59, 167),
      ::capnp::word(49, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(92, 248, 24, 129, 120, 140, 65, 216),
      ::capnp::word(53, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(38, 74, 154, 81, 222, 168, 163, 195),
      ::capnp::word(53, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(168, 90, 39, 20, 177, 54, 176, 235),
      ::capnp::word(53, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(198, 83, 14, 185, 16, 180, 25, 249),
      ::capnp::word(53, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(12, 142, 56, 152, 17, 145, 197, 185),
      ::capnp::word(53, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(83, 97, 116, 82, 101, 112, 111, 114),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 101, 97, 115, 117, 114, 101, 109),
      ::capnp::word(101, 110, 116, 82, 101, 112, 111, 114),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 112, 104, 101, 109, 101, 114, 105),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 111, 110, 111, 68, 97, 116, 97),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 119, 83, 116, 97, 116, 117, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 119, 83, 116, 97, 116, 117, 115),
      ::capnp::word(50, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(71, 108, 111, 110, 97, 115, 115, 69),
      ::capnp::word(112, 104, 101, 109, 101, 114, 105, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 255, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 254, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 253, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 252, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 251, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 250, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 249, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(109, 101, 97, 115, 117, 114, 101, 109),
      ::capnp::word(101, 110, 116, 82, 101, 112, 111, 114),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 32, 152, 162, 70, 165, 59, 167),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 112, 104, 101, 109, 101, 114, 105),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 248, 24, 129, 120, 140, 65, 216),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 111, 110, 111, 68, 97, 116, 97),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(38, 74, 154, 81, 222, 168, 163, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 119, 83, 116, 97, 116, 117, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 90, 39, 20, 177, 54, 176, 235),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 119, 83, 116, 97, 116, 117, 115),
      ::capnp::word(50, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(198, 83, 14, 185, 16, 180, 25, 249),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 108, 111, 110, 97, 115, 115, 69),
      ::capnp::word(112, 104, 101, 109, 101, 114, 105, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 142, 56, 152, 17, 145, 197, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 116, 82, 101, 112, 111, 114),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(83, 143, 104, 118, 255, 42, 100, 187),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <crate::cereal::log_capnp::ublox_gnss::measurement_report::Owned as ::capnp::introspect::Introspect>::introspect(),
        1 => <crate::cereal::log_capnp::ublox_gnss::ephemeris::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <crate::cereal::log_capnp::ublox_gnss::iono_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        3 => <crate::cereal::log_capnp::ublox_gnss::hw_status::Owned as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::ublox_gnss::hw_status2::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <crate::cereal::log_capnp::ublox_gnss::glonass_ephemeris::Owned as ::capnp::introspect::Introspect>::introspect(),
        6 => <crate::cereal::log_capnp::ublox_gnss::sat_report::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[0,1,2,3,4,5,6];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,5,3,4,2,0,6];
    pub const TYPE_ID: u64 = 0x85dd_dd7c_e6ce_fa5d;
  }
  pub enum Which<A0,A1,A2,A3,A4,A5,A6> {
    MeasurementReport(A0),
    Ephemeris(A1),
    IonoData(A2),
    HwStatus(A3),
    HwStatus2(A4),
    GlonassEphemeris(A5),
    SatReport(A6),
  }
  pub type WhichReader<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::ublox_gnss::measurement_report::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::ephemeris::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::iono_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::hw_status::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::hw_status2::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::glonass_ephemeris::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::sat_report::Reader<'a>>>;
  pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::ublox_gnss::measurement_report::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::ephemeris::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::iono_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::hw_status::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::hw_status2::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::glonass_ephemeris::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::sat_report::Builder<'a>>>;

  pub mod sat_report {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_i_tow(self) -> u32 {
        self.reader.get_data_field::<u32>(0)
      }
      #[inline]
      pub fn get_svs(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::ublox_gnss::sat_report::sat_info::Owned>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_svs(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 1 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_i_tow(self) -> u32 {
        self.builder.get_data_field::<u32>(0)
      }
      #[inline]
      pub fn set_i_tow(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(0, value);
      }
      #[inline]
      pub fn get_svs(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::ublox_gnss::sat_report::sat_info::Owned>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_svs(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::ublox_gnss::sat_report::sat_info::Owned>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_svs(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::ublox_gnss::sat_report::sat_info::Owned> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_svs(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 55] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(83, 143, 104, 118, 255, 42, 100, 187),
        ::capnp::word(20, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(93, 250, 206, 230, 124, 221, 221, 133),
        ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
        ::capnp::word(110, 115, 115, 46, 83, 97, 116, 82),
        ::capnp::word(101, 112, 111, 114, 116, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(67, 158, 215, 206, 2, 206, 157, 232),
        ::capnp::word(1, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(83, 97, 116, 73, 110, 102, 111, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(105, 84, 111, 119, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 115, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(67, 158, 215, 206, 2, 206, 157, 232),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::ublox_gnss::sat_report::sat_info::Owned> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
      pub const TYPE_ID: u64 = 0xbb64_2aff_7668_8f53;
    }

    pub mod sat_info {
      #[derive(Copy, Clone)]
      pub struct Owned(());
      impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
      impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

      pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
      impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
      impl <'a,> ::core::clone::Clone for Reader<'a,>  {
        fn clone(&self) -> Self { *self }
      }

      impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
          Self { reader,  }
        }
      }

      impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
        fn from(reader: Reader<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
          core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
        }
      }

      impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
        fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
          self.reader
        }
      }

      impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
          self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
      }

      impl <'a,> Reader<'a,>  {
        pub fn reborrow(&self) -> Reader<'_,> {
          Self { .. *self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.reader.total_size()
        }
        #[inline]
        pub fn get_sv_id(self) -> u8 {
          self.reader.get_data_field::<u8>(0)
        }
        #[inline]
        pub fn get_gnss_id(self) -> u8 {
          self.reader.get_data_field::<u8>(1)
        }
        #[inline]
        pub fn get_flags_bitfield(self) -> u32 {
          self.reader.get_data_field::<u32>(1)
        }
      }

      pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
      impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
      }
      impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
          Self { builder,  }
        }
      }

      impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
        fn from(builder: Builder<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
          self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
      }

      impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
          builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
        }
        fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
        fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
      }

      impl <'a,> Builder<'a,>  {
        pub fn into_reader(self) -> Reader<'a,> {
          self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_,> {
          Builder { builder: self.builder.reborrow() }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_,> {
          self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_sv_id(self) -> u8 {
          self.builder.get_data_field::<u8>(0)
        }
        #[inline]
        pub fn set_sv_id(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(0, value);
        }
        #[inline]
        pub fn get_gnss_id(self) -> u8 {
          self.builder.get_data_field::<u8>(1)
        }
        #[inline]
        pub fn set_gnss_id(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(1, value);
        }
        #[inline]
        pub fn get_flags_bitfield(self) -> u32 {
          self.builder.get_data_field::<u32>(1)
        }
        #[inline]
        pub fn set_flags_bitfield(&mut self, value: u32)  {
          self.builder.set_data_field::<u32>(1, value);
        }
      }

      pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
      impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
          Self { _typeless: typeless,  }
        }
      }
      impl Pipeline  {
      }
      mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 65] = [
          ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
          ::capnp::word(67, 158, 215, 206, 2, 206, 157, 232),
          ::capnp::word(30, 0, 0, 0, 1, 0, 1, 0),
          ::capnp::word(83, 143, 104, 118, 255, 42, 100, 187),
          ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(21, 0, 0, 0, 50, 1, 0, 0),
          ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(33, 0, 0, 0, 175, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
          ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
          ::capnp::word(110, 115, 115, 46, 83, 97, 116, 82),
          ::capnp::word(101, 112, 111, 114, 116, 46, 83, 97),
          ::capnp::word(116, 73, 110, 102, 111, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
          ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(69, 0, 0, 0, 42, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(64, 0, 0, 0, 3, 0, 1, 0),
          ::capnp::word(76, 0, 0, 0, 2, 0, 1, 0),
          ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(73, 0, 0, 0, 58, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
          ::capnp::word(80, 0, 0, 0, 2, 0, 1, 0),
          ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(77, 0, 0, 0, 114, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(76, 0, 0, 0, 3, 0, 1, 0),
          ::capnp::word(88, 0, 0, 0, 2, 0, 1, 0),
          ::capnp::word(115, 118, 73, 100, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 110, 115, 115, 73, 100, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 108, 97, 103, 115, 66, 105, 116),
          ::capnp::word(102, 105, 101, 108, 100, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
          match index {
            0 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            1 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            2 => <u32 as ::capnp::introspect::Introspect>::introspect(),
            _ => panic!("invalid field index {}", index),
          }
        }
        pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
          panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
          encoded_node: &ENCODED_NODE,
          nonunion_members: NONUNION_MEMBERS,
          members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
          members_by_name: MEMBERS_BY_NAME,
        };
        pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
        pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
        pub static MEMBERS_BY_NAME : &[u16] = &[2,1,0];
        pub const TYPE_ID: u64 = 0xe89d_ce02_ced7_9e43;
      }
    }
  }

  pub mod measurement_report {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_rcv_tow(self) -> f64 {
        self.reader.get_data_field::<f64>(0)
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.reader.get_data_field::<u16>(4)
      }
      #[inline]
      pub fn get_leap_seconds(self) -> u16 {
        self.reader.get_data_field::<u16>(5)
      }
      #[inline]
      pub fn get_receiver_status(self) -> ::capnp::Result<crate::cereal::log_capnp::ublox_gnss::measurement_report::receiver_status::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_receiver_status(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_num_meas(self) -> u8 {
        self.reader.get_data_field::<u8>(12)
      }
      #[inline]
      pub fn get_measurements(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::Owned>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_measurements(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_rcv_tow(self) -> f64 {
        self.builder.get_data_field::<f64>(0)
      }
      #[inline]
      pub fn set_rcv_tow(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(0, value);
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.builder.get_data_field::<u16>(4)
      }
      #[inline]
      pub fn set_gps_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(4, value);
      }
      #[inline]
      pub fn get_leap_seconds(self) -> u16 {
        self.builder.get_data_field::<u16>(5)
      }
      #[inline]
      pub fn set_leap_seconds(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(5, value);
      }
      #[inline]
      pub fn get_receiver_status(self) -> ::capnp::Result<crate::cereal::log_capnp::ublox_gnss::measurement_report::receiver_status::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_receiver_status(&mut self, value: crate::cereal::log_capnp::ublox_gnss::measurement_report::receiver_status::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_receiver_status(self, ) -> crate::cereal::log_capnp::ublox_gnss::measurement_report::receiver_status::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
      }
      #[inline]
      pub fn has_receiver_status(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_num_meas(self) -> u8 {
        self.builder.get_data_field::<u8>(12)
      }
      #[inline]
      pub fn set_num_meas(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(12, value);
      }
      #[inline]
      pub fn get_measurements(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::Owned>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_measurements(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::Owned>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_measurements(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::Owned> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_measurements(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
      pub fn get_receiver_status(&self) -> crate::cereal::log_capnp::ublox_gnss::measurement_report::receiver_status::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
      }
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 124] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(244, 32, 152, 162, 70, 165, 59, 167),
        ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(93, 250, 206, 230, 124, 221, 221, 133),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 50, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 39, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 0, 0, 0, 87, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
        ::capnp::word(110, 115, 115, 46, 77, 101, 97, 115),
        ::capnp::word(117, 114, 101, 109, 101, 110, 116, 82),
        ::capnp::word(101, 112, 111, 114, 116, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(182, 170, 96, 81, 214, 56, 184, 251),
        ::capnp::word(9, 0, 0, 0, 122, 0, 0, 0),
        ::capnp::word(1, 100, 50, 94, 95, 101, 138, 143),
        ::capnp::word(9, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(82, 101, 99, 101, 105, 118, 101, 114),
        ::capnp::word(83, 116, 97, 116, 117, 115, 0, 0),
        ::capnp::word(77, 101, 97, 115, 117, 114, 101, 109),
        ::capnp::word(101, 110, 116, 0, 0, 0, 0, 0),
        ::capnp::word(24, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(153, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(148, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(160, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(157, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 0, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(114, 99, 118, 84, 111, 119, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 101, 97, 112, 83, 101, 99, 111),
        ::capnp::word(110, 100, 115, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 101, 99, 101, 105, 118, 101, 114),
        ::capnp::word(83, 116, 97, 116, 117, 115, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(182, 170, 96, 81, 214, 56, 184, 251),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 117, 109, 77, 101, 97, 115, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 101, 97, 115, 117, 114, 101, 109),
        ::capnp::word(101, 110, 116, 115, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 100, 50, 94, 95, 101, 138, 143),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          1 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          2 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          3 => <crate::cereal::log_capnp::ublox_gnss::measurement_report::receiver_status::Owned as ::capnp::introspect::Introspect>::introspect(),
          4 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::Owned> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,2,5,4,0,3];
      pub const TYPE_ID: u64 = 0xa73b_a546_a298_20f4;
    }

    pub mod receiver_status {
      #[derive(Copy, Clone)]
      pub struct Owned(());
      impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
      impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

      pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
      impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
      impl <'a,> ::core::clone::Clone for Reader<'a,>  {
        fn clone(&self) -> Self { *self }
      }

      impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
          Self { reader,  }
        }
      }

      impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
        fn from(reader: Reader<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
          core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
        }
      }

      impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
        fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
          self.reader
        }
      }

      impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
          self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
      }

      impl <'a,> Reader<'a,>  {
        pub fn reborrow(&self) -> Reader<'_,> {
          Self { .. *self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.reader.total_size()
        }
        #[inline]
        pub fn get_leap_sec_valid(self) -> bool {
          self.reader.get_bool_field(0)
        }
        #[inline]
        pub fn get_clk_reset(self) -> bool {
          self.reader.get_bool_field(1)
        }
      }

      pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
      impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
      }
      impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
          Self { builder,  }
        }
      }

      impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
        fn from(builder: Builder<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
          self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
      }

      impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
          builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
        }
        fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
        fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
      }

      impl <'a,> Builder<'a,>  {
        pub fn into_reader(self) -> Reader<'a,> {
          self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_,> {
          Builder { builder: self.builder.reborrow() }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_,> {
          self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_leap_sec_valid(self) -> bool {
          self.builder.get_bool_field(0)
        }
        #[inline]
        pub fn set_leap_sec_valid(&mut self, value: bool)  {
          self.builder.set_bool_field(0, value);
        }
        #[inline]
        pub fn get_clk_reset(self) -> bool {
          self.builder.get_bool_field(1)
        }
        #[inline]
        pub fn set_clk_reset(&mut self, value: bool)  {
          self.builder.set_bool_field(1, value);
        }
      }

      pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
      impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
          Self { _typeless: typeless,  }
        }
      }
      impl Pipeline  {
      }
      mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 53] = [
          ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
          ::capnp::word(182, 170, 96, 81, 214, 56, 184, 251),
          ::capnp::word(38, 0, 0, 0, 1, 0, 1, 0),
          ::capnp::word(244, 32, 152, 162, 70, 165, 59, 167),
          ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(21, 0, 0, 0, 170, 1, 0, 0),
          ::capnp::word(45, 0, 0, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(41, 0, 0, 0, 119, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
          ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
          ::capnp::word(110, 115, 115, 46, 77, 101, 97, 115),
          ::capnp::word(117, 114, 101, 109, 101, 110, 116, 82),
          ::capnp::word(101, 112, 111, 114, 116, 46, 82, 101),
          ::capnp::word(99, 101, 105, 118, 101, 114, 83, 116),
          ::capnp::word(97, 116, 117, 115, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
          ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(41, 0, 0, 0, 106, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
          ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
          ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(49, 0, 0, 0, 74, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(48, 0, 0, 0, 3, 0, 1, 0),
          ::capnp::word(60, 0, 0, 0, 2, 0, 1, 0),
          ::capnp::word(108, 101, 97, 112, 83, 101, 99, 86),
          ::capnp::word(97, 108, 105, 100, 0, 0, 0, 0),
          ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 108, 107, 82, 101, 115, 101, 116),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
          match index {
            0 => <bool as ::capnp::introspect::Introspect>::introspect(),
            1 => <bool as ::capnp::introspect::Introspect>::introspect(),
            _ => panic!("invalid field index {}", index),
          }
        }
        pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
          panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
          encoded_node: &ENCODED_NODE,
          nonunion_members: NONUNION_MEMBERS,
          members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
          members_by_name: MEMBERS_BY_NAME,
        };
        pub static NONUNION_MEMBERS : &[u16] = &[0,1];
        pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
        pub static MEMBERS_BY_NAME : &[u16] = &[1,0];
        pub const TYPE_ID: u64 = 0xfbb8_38d6_5160_aab6;
      }
    }

    pub mod measurement {
      #[derive(Copy, Clone)]
      pub struct Owned(());
      impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
      impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

      pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
      impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
      impl <'a,> ::core::clone::Clone for Reader<'a,>  {
        fn clone(&self) -> Self { *self }
      }

      impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
          Self { reader,  }
        }
      }

      impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
        fn from(reader: Reader<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
          core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
        }
      }

      impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
        fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
          self.reader
        }
      }

      impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
          self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
      }

      impl <'a,> Reader<'a,>  {
        pub fn reborrow(&self) -> Reader<'_,> {
          Self { .. *self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.reader.total_size()
        }
        #[inline]
        pub fn get_sv_id(self) -> u8 {
          self.reader.get_data_field::<u8>(0)
        }
        #[inline]
        pub fn get_tracking_status(self) -> ::capnp::Result<crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::tracking_status::Reader<'a>> {
          ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
        }
        #[inline]
        pub fn has_tracking_status(&self) -> bool {
          !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_pseudorange(self) -> f64 {
          self.reader.get_data_field::<f64>(1)
        }
        #[inline]
        pub fn get_carrier_cycles(self) -> f64 {
          self.reader.get_data_field::<f64>(2)
        }
        #[inline]
        pub fn get_doppler(self) -> f32 {
          self.reader.get_data_field::<f32>(1)
        }
        #[inline]
        pub fn get_gnss_id(self) -> u8 {
          self.reader.get_data_field::<u8>(1)
        }
        #[inline]
        pub fn get_glonass_frequency_index(self) -> u8 {
          self.reader.get_data_field::<u8>(2)
        }
        #[inline]
        pub fn get_locktime(self) -> u16 {
          self.reader.get_data_field::<u16>(12)
        }
        #[inline]
        pub fn get_cno(self) -> u8 {
          self.reader.get_data_field::<u8>(3)
        }
        #[inline]
        pub fn get_pseudorange_stdev(self) -> f32 {
          self.reader.get_data_field::<f32>(7)
        }
        #[inline]
        pub fn get_carrier_phase_stdev(self) -> f32 {
          self.reader.get_data_field::<f32>(8)
        }
        #[inline]
        pub fn get_doppler_stdev(self) -> f32 {
          self.reader.get_data_field::<f32>(9)
        }
        #[inline]
        pub fn get_sig_id(self) -> u8 {
          self.reader.get_data_field::<u8>(26)
        }
      }

      pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
      impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 1 };
      }
      impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
          Self { builder,  }
        }
      }

      impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
        fn from(builder: Builder<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
          self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
      }

      impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
          builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
        }
        fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
        fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
      }

      impl <'a,> Builder<'a,>  {
        pub fn into_reader(self) -> Reader<'a,> {
          self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_,> {
          Builder { builder: self.builder.reborrow() }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_,> {
          self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_sv_id(self) -> u8 {
          self.builder.get_data_field::<u8>(0)
        }
        #[inline]
        pub fn set_sv_id(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(0, value);
        }
        #[inline]
        pub fn get_tracking_status(self) -> ::capnp::Result<crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::tracking_status::Builder<'a>> {
          ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
        }
        #[inline]
        pub fn set_tracking_status(&mut self, value: crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::tracking_status::Reader<'_>) -> ::capnp::Result<()> {
          ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
        }
        #[inline]
        pub fn init_tracking_status(self, ) -> crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::tracking_status::Builder<'a> {
          ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
        }
        #[inline]
        pub fn has_tracking_status(&self) -> bool {
          !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_pseudorange(self) -> f64 {
          self.builder.get_data_field::<f64>(1)
        }
        #[inline]
        pub fn set_pseudorange(&mut self, value: f64)  {
          self.builder.set_data_field::<f64>(1, value);
        }
        #[inline]
        pub fn get_carrier_cycles(self) -> f64 {
          self.builder.get_data_field::<f64>(2)
        }
        #[inline]
        pub fn set_carrier_cycles(&mut self, value: f64)  {
          self.builder.set_data_field::<f64>(2, value);
        }
        #[inline]
        pub fn get_doppler(self) -> f32 {
          self.builder.get_data_field::<f32>(1)
        }
        #[inline]
        pub fn set_doppler(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(1, value);
        }
        #[inline]
        pub fn get_gnss_id(self) -> u8 {
          self.builder.get_data_field::<u8>(1)
        }
        #[inline]
        pub fn set_gnss_id(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(1, value);
        }
        #[inline]
        pub fn get_glonass_frequency_index(self) -> u8 {
          self.builder.get_data_field::<u8>(2)
        }
        #[inline]
        pub fn set_glonass_frequency_index(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(2, value);
        }
        #[inline]
        pub fn get_locktime(self) -> u16 {
          self.builder.get_data_field::<u16>(12)
        }
        #[inline]
        pub fn set_locktime(&mut self, value: u16)  {
          self.builder.set_data_field::<u16>(12, value);
        }
        #[inline]
        pub fn get_cno(self) -> u8 {
          self.builder.get_data_field::<u8>(3)
        }
        #[inline]
        pub fn set_cno(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(3, value);
        }
        #[inline]
        pub fn get_pseudorange_stdev(self) -> f32 {
          self.builder.get_data_field::<f32>(7)
        }
        #[inline]
        pub fn set_pseudorange_stdev(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(7, value);
        }
        #[inline]
        pub fn get_carrier_phase_stdev(self) -> f32 {
          self.builder.get_data_field::<f32>(8)
        }
        #[inline]
        pub fn set_carrier_phase_stdev(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(8, value);
        }
        #[inline]
        pub fn get_doppler_stdev(self) -> f32 {
          self.builder.get_data_field::<f32>(9)
        }
        #[inline]
        pub fn set_doppler_stdev(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(9, value);
        }
        #[inline]
        pub fn get_sig_id(self) -> u8 {
          self.builder.get_data_field::<u8>(26)
        }
        #[inline]
        pub fn set_sig_id(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(26, value);
        }
      }

      pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
      impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
          Self { _typeless: typeless,  }
        }
      }
      impl Pipeline  {
        pub fn get_tracking_status(&self) -> crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::tracking_status::Pipeline {
          ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
        }
      }
      mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 231] = [
          ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
          ::capnp::word(1, 100, 50, 94, 95, 101, 138, 143),
          ::capnp::word(38, 0, 0, 0, 1, 0, 5, 0),
          ::capnp::word(244, 32, 152, 162, 70, 165, 59, 167),
          ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(21, 0, 0, 0, 146, 1, 0, 0),
          ::capnp::word(45, 0, 0, 0, 23, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(57, 0, 0, 0, 223, 2, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
          ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
          ::capnp::word(110, 115, 115, 46, 77, 101, 97, 115),
          ::capnp::word(117, 114, 101, 109, 101, 110, 116, 82),
          ::capnp::word(101, 112, 111, 114, 116, 46, 77, 101),
          ::capnp::word(97, 115, 117, 114, 101, 109, 101, 110),
          ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
          ::capnp::word(178, 153, 178, 2, 168, 179, 239, 232),
          ::capnp::word(1, 0, 0, 0, 122, 0, 0, 0),
          ::capnp::word(84, 114, 97, 99, 107, 105, 110, 103),
          ::capnp::word(83, 116, 97, 116, 117, 115, 0, 0),
          ::capnp::word(52, 0, 0, 0, 3, 0, 4, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(93, 1, 0, 0, 42, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(88, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(100, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(97, 1, 0, 0, 122, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(96, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(108, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(105, 1, 0, 0, 98, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(104, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(116, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(113, 1, 0, 0, 114, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(112, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(124, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(121, 1, 0, 0, 66, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(116, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(128, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(125, 1, 0, 0, 58, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(120, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(132, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(6, 0, 0, 0, 2, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(129, 1, 0, 0, 178, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(132, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(144, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(7, 0, 0, 0, 12, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(141, 1, 0, 0, 74, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(140, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(152, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(8, 0, 0, 0, 3, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(149, 1, 0, 0, 34, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(144, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(156, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(9, 0, 0, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(153, 1, 0, 0, 138, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(156, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(168, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(10, 0, 0, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(165, 1, 0, 0, 146, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(168, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(180, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(11, 0, 0, 0, 9, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(177, 1, 0, 0, 106, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(176, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(188, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(12, 0, 0, 0, 26, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(185, 1, 0, 0, 50, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(180, 1, 0, 0, 3, 0, 1, 0),
          ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
          ::capnp::word(115, 118, 73, 100, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(116, 114, 97, 99, 107, 105, 110, 103),
          ::capnp::word(83, 116, 97, 116, 117, 115, 0, 0),
          ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(178, 153, 178, 2, 168, 179, 239, 232),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(112, 115, 101, 117, 100, 111, 114, 97),
          ::capnp::word(110, 103, 101, 0, 0, 0, 0, 0),
          ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 97, 114, 114, 105, 101, 114, 67),
          ::capnp::word(121, 99, 108, 101, 115, 0, 0, 0),
          ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(100, 111, 112, 112, 108, 101, 114, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 110, 115, 115, 73, 100, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 108, 111, 110, 97, 115, 115, 70),
          ::capnp::word(114, 101, 113, 117, 101, 110, 99, 121),
          ::capnp::word(73, 110, 100, 101, 120, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(108, 111, 99, 107, 116, 105, 109, 101),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 110, 111, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(112, 115, 101, 117, 100, 111, 114, 97),
          ::capnp::word(110, 103, 101, 83, 116, 100, 101, 118),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 97, 114, 114, 105, 101, 114, 80),
          ::capnp::word(104, 97, 115, 101, 83, 116, 100, 101),
          ::capnp::word(118, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(100, 111, 112, 112, 108, 101, 114, 83),
          ::capnp::word(116, 100, 101, 118, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(115, 105, 103, 73, 100, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
          match index {
            0 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            1 => <crate::cereal::log_capnp::ublox_gnss::measurement_report::measurement::tracking_status::Owned as ::capnp::introspect::Introspect>::introspect(),
            2 => <f64 as ::capnp::introspect::Introspect>::introspect(),
            3 => <f64 as ::capnp::introspect::Introspect>::introspect(),
            4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            5 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            6 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            7 => <u16 as ::capnp::introspect::Introspect>::introspect(),
            8 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            11 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            12 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            _ => panic!("invalid field index {}", index),
          }
        }
        pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
          panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
          encoded_node: &ENCODED_NODE,
          nonunion_members: NONUNION_MEMBERS,
          members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
          members_by_name: MEMBERS_BY_NAME,
        };
        pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12];
        pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
        pub static MEMBERS_BY_NAME : &[u16] = &[3,10,8,4,11,6,5,7,2,9,12,0,1];
        pub const TYPE_ID: u64 = 0x8f8a_655f_5e32_6401;
      }

      pub mod tracking_status {
        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
        impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
        impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
        impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

        pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
        impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
        impl <'a,> ::core::clone::Clone for Reader<'a,>  {
          fn clone(&self) -> Self { *self }
        }

        impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
          const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
          fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader,  }
          }
        }

        impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
          fn from(reader: Reader<'a,>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
          }
        }

        impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
          }
        }

        impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
          fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
          }
        }

        impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
          fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
          }
        }

        impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
          fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
          }
        }

        impl <'a,> Reader<'a,>  {
          pub fn reborrow(&self) -> Reader<'_,> {
            Self { .. *self }
          }

          pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
          }
          #[inline]
          pub fn get_pseudorange_valid(self) -> bool {
            self.reader.get_bool_field(0)
          }
          #[inline]
          pub fn get_carrier_phase_valid(self) -> bool {
            self.reader.get_bool_field(1)
          }
          #[inline]
          pub fn get_half_cycle_valid(self) -> bool {
            self.reader.get_bool_field(2)
          }
          #[inline]
          pub fn get_half_cycle_subtracted(self) -> bool {
            self.reader.get_bool_field(3)
          }
        }

        pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
        impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
          const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
        }
        impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
          const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
          fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder,  }
          }
        }

        impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
          fn from(builder: Builder<'a,>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
          }
        }

        impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
          fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
          }
        }

        impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
          fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
          }
          fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
          }
        }

        impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
          fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
        }

        impl <'a,> Builder<'a,>  {
          pub fn into_reader(self) -> Reader<'a,> {
            self.builder.into_reader().into()
          }
          pub fn reborrow(&mut self) -> Builder<'_,> {
            Builder { builder: self.builder.reborrow() }
          }
          pub fn reborrow_as_reader(&self) -> Reader<'_,> {
            self.builder.as_reader().into()
          }

          pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
          }
          #[inline]
          pub fn get_pseudorange_valid(self) -> bool {
            self.builder.get_bool_field(0)
          }
          #[inline]
          pub fn set_pseudorange_valid(&mut self, value: bool)  {
            self.builder.set_bool_field(0, value);
          }
          #[inline]
          pub fn get_carrier_phase_valid(self) -> bool {
            self.builder.get_bool_field(1)
          }
          #[inline]
          pub fn set_carrier_phase_valid(&mut self, value: bool)  {
            self.builder.set_bool_field(1, value);
          }
          #[inline]
          pub fn get_half_cycle_valid(self) -> bool {
            self.builder.get_bool_field(2)
          }
          #[inline]
          pub fn set_half_cycle_valid(&mut self, value: bool)  {
            self.builder.set_bool_field(2, value);
          }
          #[inline]
          pub fn get_half_cycle_subtracted(self) -> bool {
            self.builder.get_bool_field(3)
          }
          #[inline]
          pub fn set_half_cycle_subtracted(&mut self, value: bool)  {
            self.builder.set_bool_field(3, value);
          }
        }

        pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
          fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self { _typeless: typeless,  }
          }
        }
        impl Pipeline  {
        }
        mod _private {
          pub static ENCODED_NODE: [::capnp::Word; 90] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(178, 153, 178, 2, 168, 179, 239, 232),
            ::capnp::word(50, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(1, 100, 50, 94, 95, 101, 138, 143),
            ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 10, 2, 0, 0),
            ::capnp::word(53, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(49, 0, 0, 0, 231, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
            ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
            ::capnp::word(110, 115, 115, 46, 77, 101, 97, 115),
            ::capnp::word(117, 114, 101, 109, 101, 110, 116, 82),
            ::capnp::word(101, 112, 111, 114, 116, 46, 77, 101),
            ::capnp::word(97, 115, 117, 114, 101, 109, 101, 110),
            ::capnp::word(116, 46, 84, 114, 97, 99, 107, 105),
            ::capnp::word(110, 103, 83, 116, 97, 116, 117, 115),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(97, 0, 0, 0, 138, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(100, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(112, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 0, 0, 0, 146, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(112, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(124, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(121, 0, 0, 0, 122, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(120, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(132, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(129, 0, 0, 0, 162, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(132, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(144, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(112, 115, 101, 117, 100, 111, 114, 97),
            ::capnp::word(110, 103, 101, 86, 97, 108, 105, 100),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(99, 97, 114, 114, 105, 101, 114, 80),
            ::capnp::word(104, 97, 115, 101, 86, 97, 108, 105),
            ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(104, 97, 108, 102, 67, 121, 99, 108),
            ::capnp::word(101, 86, 97, 108, 105, 100, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(104, 97, 108, 102, 67, 121, 99, 108),
            ::capnp::word(101, 83, 117, 98, 116, 114, 97, 99),
            ::capnp::word(116, 101, 100, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ];
          pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
              0 => <bool as ::capnp::introspect::Introspect>::introspect(),
              1 => <bool as ::capnp::introspect::Introspect>::introspect(),
              2 => <bool as ::capnp::introspect::Introspect>::introspect(),
              3 => <bool as ::capnp::introspect::Introspect>::introspect(),
              _ => panic!("invalid field index {}", index),
            }
          }
          pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
          }
          pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
            encoded_node: &ENCODED_NODE,
            nonunion_members: NONUNION_MEMBERS,
            members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            members_by_name: MEMBERS_BY_NAME,
          };
          pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
          pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
          pub static MEMBERS_BY_NAME : &[u16] = &[1,3,2,0];
          pub const TYPE_ID: u64 = 0xe8ef_b3a8_02b2_99b2;
        }
      }
    }
  }

  pub mod ephemeris {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_sv_id(self) -> u16 {
        self.reader.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn get_year(self) -> u16 {
        self.reader.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn get_month(self) -> u16 {
        self.reader.get_data_field::<u16>(2)
      }
      #[inline]
      pub fn get_day(self) -> u16 {
        self.reader.get_data_field::<u16>(3)
      }
      #[inline]
      pub fn get_hour(self) -> u16 {
        self.reader.get_data_field::<u16>(4)
      }
      #[inline]
      pub fn get_minute(self) -> u16 {
        self.reader.get_data_field::<u16>(5)
      }
      #[inline]
      pub fn get_second(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_af0(self) -> f64 {
        self.reader.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn get_af1(self) -> f64 {
        self.reader.get_data_field::<f64>(3)
      }
      #[inline]
      pub fn get_af2(self) -> f64 {
        self.reader.get_data_field::<f64>(4)
      }
      #[inline]
      pub fn get_iode(self) -> f64 {
        self.reader.get_data_field::<f64>(5)
      }
      #[inline]
      pub fn get_crs(self) -> f64 {
        self.reader.get_data_field::<f64>(6)
      }
      #[inline]
      pub fn get_delta_n(self) -> f64 {
        self.reader.get_data_field::<f64>(7)
      }
      #[inline]
      pub fn get_m0(self) -> f64 {
        self.reader.get_data_field::<f64>(8)
      }
      #[inline]
      pub fn get_cuc(self) -> f64 {
        self.reader.get_data_field::<f64>(9)
      }
      #[inline]
      pub fn get_ecc(self) -> f64 {
        self.reader.get_data_field::<f64>(10)
      }
      #[inline]
      pub fn get_cus(self) -> f64 {
        self.reader.get_data_field::<f64>(11)
      }
      #[inline]
      pub fn get_a(self) -> f64 {
        self.reader.get_data_field::<f64>(12)
      }
      #[inline]
      pub fn get_toe(self) -> f64 {
        self.reader.get_data_field::<f64>(13)
      }
      #[inline]
      pub fn get_cic(self) -> f64 {
        self.reader.get_data_field::<f64>(14)
      }
      #[inline]
      pub fn get_omega0(self) -> f64 {
        self.reader.get_data_field::<f64>(15)
      }
      #[inline]
      pub fn get_cis(self) -> f64 {
        self.reader.get_data_field::<f64>(16)
      }
      #[inline]
      pub fn get_i0(self) -> f64 {
        self.reader.get_data_field::<f64>(17)
      }
      #[inline]
      pub fn get_crc(self) -> f64 {
        self.reader.get_data_field::<f64>(18)
      }
      #[inline]
      pub fn get_omega(self) -> f64 {
        self.reader.get_data_field::<f64>(19)
      }
      #[inline]
      pub fn get_omega_dot(self) -> f64 {
        self.reader.get_data_field::<f64>(20)
      }
      #[inline]
      pub fn get_i_dot(self) -> f64 {
        self.reader.get_data_field::<f64>(21)
      }
      #[inline]
      pub fn get_codes_l2(self) -> f64 {
        self.reader.get_data_field::<f64>(22)
      }
      #[inline]
      pub fn get_gps_week_d_e_p_r_e_c_a_t_e_d(self) -> f64 {
        self.reader.get_data_field::<f64>(23)
      }
      #[inline]
      pub fn get_l2(self) -> f64 {
        self.reader.get_data_field::<f64>(24)
      }
      #[inline]
      pub fn get_sv_acc(self) -> f64 {
        self.reader.get_data_field::<f64>(25)
      }
      #[inline]
      pub fn get_sv_health(self) -> f64 {
        self.reader.get_data_field::<f64>(26)
      }
      #[inline]
      pub fn get_tgd(self) -> f64 {
        self.reader.get_data_field::<f64>(27)
      }
      #[inline]
      pub fn get_iodc(self) -> f64 {
        self.reader.get_data_field::<f64>(28)
      }
      #[inline]
      pub fn get_transmission_time(self) -> f64 {
        self.reader.get_data_field::<f64>(29)
      }
      #[inline]
      pub fn get_fit_interval(self) -> f64 {
        self.reader.get_data_field::<f64>(30)
      }
      #[inline]
      pub fn get_toc(self) -> f64 {
        self.reader.get_data_field::<f64>(31)
      }
      #[inline]
      pub fn get_iono_coeffs_valid(self) -> bool {
        self.reader.get_bool_field(2048)
      }
      #[inline]
      pub fn get_iono_alpha(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_iono_alpha(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_iono_beta(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_iono_beta(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_tow_count(self) -> u32 {
        self.reader.get_data_field::<u32>(65)
      }
      #[inline]
      pub fn get_toe_week(self) -> u16 {
        self.reader.get_data_field::<u16>(129)
      }
      #[inline]
      pub fn get_toc_week(self) -> u16 {
        self.reader.get_data_field::<u16>(132)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 34, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_sv_id(self) -> u16 {
        self.builder.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn set_sv_id(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(0, value);
      }
      #[inline]
      pub fn get_year(self) -> u16 {
        self.builder.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn set_year(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(1, value);
      }
      #[inline]
      pub fn get_month(self) -> u16 {
        self.builder.get_data_field::<u16>(2)
      }
      #[inline]
      pub fn set_month(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(2, value);
      }
      #[inline]
      pub fn get_day(self) -> u16 {
        self.builder.get_data_field::<u16>(3)
      }
      #[inline]
      pub fn set_day(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(3, value);
      }
      #[inline]
      pub fn get_hour(self) -> u16 {
        self.builder.get_data_field::<u16>(4)
      }
      #[inline]
      pub fn set_hour(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(4, value);
      }
      #[inline]
      pub fn get_minute(self) -> u16 {
        self.builder.get_data_field::<u16>(5)
      }
      #[inline]
      pub fn set_minute(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(5, value);
      }
      #[inline]
      pub fn get_second(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_second(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_af0(self) -> f64 {
        self.builder.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn set_af0(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(2, value);
      }
      #[inline]
      pub fn get_af1(self) -> f64 {
        self.builder.get_data_field::<f64>(3)
      }
      #[inline]
      pub fn set_af1(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(3, value);
      }
      #[inline]
      pub fn get_af2(self) -> f64 {
        self.builder.get_data_field::<f64>(4)
      }
      #[inline]
      pub fn set_af2(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(4, value);
      }
      #[inline]
      pub fn get_iode(self) -> f64 {
        self.builder.get_data_field::<f64>(5)
      }
      #[inline]
      pub fn set_iode(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(5, value);
      }
      #[inline]
      pub fn get_crs(self) -> f64 {
        self.builder.get_data_field::<f64>(6)
      }
      #[inline]
      pub fn set_crs(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(6, value);
      }
      #[inline]
      pub fn get_delta_n(self) -> f64 {
        self.builder.get_data_field::<f64>(7)
      }
      #[inline]
      pub fn set_delta_n(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(7, value);
      }
      #[inline]
      pub fn get_m0(self) -> f64 {
        self.builder.get_data_field::<f64>(8)
      }
      #[inline]
      pub fn set_m0(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(8, value);
      }
      #[inline]
      pub fn get_cuc(self) -> f64 {
        self.builder.get_data_field::<f64>(9)
      }
      #[inline]
      pub fn set_cuc(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(9, value);
      }
      #[inline]
      pub fn get_ecc(self) -> f64 {
        self.builder.get_data_field::<f64>(10)
      }
      #[inline]
      pub fn set_ecc(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(10, value);
      }
      #[inline]
      pub fn get_cus(self) -> f64 {
        self.builder.get_data_field::<f64>(11)
      }
      #[inline]
      pub fn set_cus(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(11, value);
      }
      #[inline]
      pub fn get_a(self) -> f64 {
        self.builder.get_data_field::<f64>(12)
      }
      #[inline]
      pub fn set_a(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(12, value);
      }
      #[inline]
      pub fn get_toe(self) -> f64 {
        self.builder.get_data_field::<f64>(13)
      }
      #[inline]
      pub fn set_toe(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(13, value);
      }
      #[inline]
      pub fn get_cic(self) -> f64 {
        self.builder.get_data_field::<f64>(14)
      }
      #[inline]
      pub fn set_cic(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(14, value);
      }
      #[inline]
      pub fn get_omega0(self) -> f64 {
        self.builder.get_data_field::<f64>(15)
      }
      #[inline]
      pub fn set_omega0(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(15, value);
      }
      #[inline]
      pub fn get_cis(self) -> f64 {
        self.builder.get_data_field::<f64>(16)
      }
      #[inline]
      pub fn set_cis(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(16, value);
      }
      #[inline]
      pub fn get_i0(self) -> f64 {
        self.builder.get_data_field::<f64>(17)
      }
      #[inline]
      pub fn set_i0(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(17, value);
      }
      #[inline]
      pub fn get_crc(self) -> f64 {
        self.builder.get_data_field::<f64>(18)
      }
      #[inline]
      pub fn set_crc(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(18, value);
      }
      #[inline]
      pub fn get_omega(self) -> f64 {
        self.builder.get_data_field::<f64>(19)
      }
      #[inline]
      pub fn set_omega(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(19, value);
      }
      #[inline]
      pub fn get_omega_dot(self) -> f64 {
        self.builder.get_data_field::<f64>(20)
      }
      #[inline]
      pub fn set_omega_dot(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(20, value);
      }
      #[inline]
      pub fn get_i_dot(self) -> f64 {
        self.builder.get_data_field::<f64>(21)
      }
      #[inline]
      pub fn set_i_dot(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(21, value);
      }
      #[inline]
      pub fn get_codes_l2(self) -> f64 {
        self.builder.get_data_field::<f64>(22)
      }
      #[inline]
      pub fn set_codes_l2(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(22, value);
      }
      #[inline]
      pub fn get_gps_week_d_e_p_r_e_c_a_t_e_d(self) -> f64 {
        self.builder.get_data_field::<f64>(23)
      }
      #[inline]
      pub fn set_gps_week_d_e_p_r_e_c_a_t_e_d(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(23, value);
      }
      #[inline]
      pub fn get_l2(self) -> f64 {
        self.builder.get_data_field::<f64>(24)
      }
      #[inline]
      pub fn set_l2(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(24, value);
      }
      #[inline]
      pub fn get_sv_acc(self) -> f64 {
        self.builder.get_data_field::<f64>(25)
      }
      #[inline]
      pub fn set_sv_acc(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(25, value);
      }
      #[inline]
      pub fn get_sv_health(self) -> f64 {
        self.builder.get_data_field::<f64>(26)
      }
      #[inline]
      pub fn set_sv_health(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(26, value);
      }
      #[inline]
      pub fn get_tgd(self) -> f64 {
        self.builder.get_data_field::<f64>(27)
      }
      #[inline]
      pub fn set_tgd(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(27, value);
      }
      #[inline]
      pub fn get_iodc(self) -> f64 {
        self.builder.get_data_field::<f64>(28)
      }
      #[inline]
      pub fn set_iodc(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(28, value);
      }
      #[inline]
      pub fn get_transmission_time(self) -> f64 {
        self.builder.get_data_field::<f64>(29)
      }
      #[inline]
      pub fn set_transmission_time(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(29, value);
      }
      #[inline]
      pub fn get_fit_interval(self) -> f64 {
        self.builder.get_data_field::<f64>(30)
      }
      #[inline]
      pub fn set_fit_interval(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(30, value);
      }
      #[inline]
      pub fn get_toc(self) -> f64 {
        self.builder.get_data_field::<f64>(31)
      }
      #[inline]
      pub fn set_toc(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(31, value);
      }
      #[inline]
      pub fn get_iono_coeffs_valid(self) -> bool {
        self.builder.get_bool_field(2048)
      }
      #[inline]
      pub fn set_iono_coeffs_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(2048, value);
      }
      #[inline]
      pub fn get_iono_alpha(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_iono_alpha(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_iono_alpha(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_iono_alpha(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_iono_beta(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_iono_beta(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_iono_beta(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_iono_beta(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_tow_count(self) -> u32 {
        self.builder.get_data_field::<u32>(65)
      }
      #[inline]
      pub fn set_tow_count(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(65, value);
      }
      #[inline]
      pub fn get_toe_week(self) -> u16 {
        self.builder.get_data_field::<u16>(129)
      }
      #[inline]
      pub fn set_toe_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(129, value);
      }
      #[inline]
      pub fn get_toc_week(self) -> u16 {
        self.builder.get_data_field::<u16>(132)
      }
      #[inline]
      pub fn set_toc_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(132, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 682] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(92, 248, 24, 129, 120, 140, 65, 216),
        ::capnp::word(20, 0, 0, 0, 1, 0, 34, 0),
        ::capnp::word(93, 250, 206, 230, 124, 221, 221, 133),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 111, 9, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
        ::capnp::word(110, 115, 115, 46, 69, 112, 104, 101),
        ::capnp::word(109, 101, 114, 105, 115, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(172, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 4, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 4, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(176, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(173, 4, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 4, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 4, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 4, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(192, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(201, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 4, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(200, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(212, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 4, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 4, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(17, 0, 0, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 4, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(18, 0, 0, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(19, 0, 0, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(236, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(248, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(245, 4, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(21, 0, 0, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 4, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(244, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(0, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(22, 0, 0, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(253, 4, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(248, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(23, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 5, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(24, 0, 0, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 5, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(25, 0, 0, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 5, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(26, 0, 0, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(17, 5, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(24, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(27, 0, 0, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 5, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 5, 0, 0, 146, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(28, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(40, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(29, 0, 0, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 5, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(30, 0, 0, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 5, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(31, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 5, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(32, 0, 0, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 5, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(48, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(60, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(33, 0, 0, 0, 28, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(57, 5, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(52, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(34, 0, 0, 0, 29, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 5, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(76, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(35, 0, 0, 0, 30, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 35, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(73, 5, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(36, 0, 0, 0, 31, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 36, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(81, 5, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(76, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(88, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(37, 0, 0, 0, 0, 8, 0, 0),
        ::capnp::word(0, 0, 1, 0, 37, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(85, 5, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(84, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(96, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(38, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 38, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(93, 5, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(39, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 39, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 5, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(40, 0, 0, 0, 65, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 40, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 5, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(41, 0, 0, 0, 129, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 41, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(149, 5, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(144, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(156, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(42, 0, 0, 0, 132, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(153, 5, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(148, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(160, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 118, 73, 100, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 101, 97, 114, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 111, 110, 116, 104, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 97, 121, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 111, 117, 114, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 105, 110, 117, 116, 101, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 101, 99, 111, 110, 100, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 102, 48, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 102, 49, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 102, 50, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 100, 101, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 114, 115, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 108, 116, 97, 78, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 48, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 117, 99, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 99, 99, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 117, 115, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 101, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 105, 99, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 109, 101, 103, 97, 48, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 105, 115, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 48, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 114, 99, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 109, 101, 103, 97, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 109, 101, 103, 97, 68, 111, 116),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 68, 111, 116, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 111, 100, 101, 115, 76, 50, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 87, 101, 101, 107, 68),
        ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
        ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 50, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 65, 99, 99, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 72, 101, 97, 108, 116, 104),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 103, 100, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 100, 99, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 114, 97, 110, 115, 109, 105, 115),
        ::capnp::word(115, 105, 111, 110, 84, 105, 109, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 105, 116, 73, 110, 116, 101, 114),
        ::capnp::word(118, 97, 108, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 99, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 110, 111, 67, 111, 101, 102),
        ::capnp::word(102, 115, 86, 97, 108, 105, 100, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 110, 111, 65, 108, 112, 104),
        ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 110, 111, 66, 101, 116, 97),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 119, 67, 111, 117, 110, 116),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 101, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 99, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          1 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          2 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          3 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          4 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          5 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          8 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          9 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          10 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          11 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          12 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          13 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          14 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          15 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          16 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          17 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          18 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          19 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          20 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          21 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          22 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          23 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          24 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          25 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          26 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          27 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          28 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          29 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          30 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          31 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          32 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          33 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          34 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          35 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          36 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          37 => <bool as ::capnp::introspect::Introspect>::introspect(),
          38 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          39 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          40 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          41 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          42 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[17,7,8,9,19,21,27,23,11,14,16,3,12,15,35,28,4,22,26,33,10,38,39,37,29,13,5,2,24,20,25,6,30,31,0,32,36,42,18,41,40,34,1];
      pub const TYPE_ID: u64 = 0xd841_8c78_8118_f85c;
    }
  }

  pub mod iono_data {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_sv_health(self) -> u32 {
        self.reader.get_data_field::<u32>(0)
      }
      #[inline]
      pub fn get_tow(self) -> f64 {
        self.reader.get_data_field::<f64>(1)
      }
      #[inline]
      pub fn get_gps_week(self) -> f64 {
        self.reader.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn get_iono_alpha(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_iono_alpha(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_iono_beta(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_iono_beta(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_health_valid(self) -> bool {
        self.reader.get_bool_field(32)
      }
      #[inline]
      pub fn get_iono_coeffs_valid(self) -> bool {
        self.reader.get_bool_field(33)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_sv_health(self) -> u32 {
        self.builder.get_data_field::<u32>(0)
      }
      #[inline]
      pub fn set_sv_health(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(0, value);
      }
      #[inline]
      pub fn get_tow(self) -> f64 {
        self.builder.get_data_field::<f64>(1)
      }
      #[inline]
      pub fn set_tow(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(1, value);
      }
      #[inline]
      pub fn get_gps_week(self) -> f64 {
        self.builder.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn set_gps_week(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(2, value);
      }
      #[inline]
      pub fn get_iono_alpha(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_iono_alpha(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_iono_alpha(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_iono_alpha(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_iono_beta(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_iono_beta(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_iono_beta(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_iono_beta(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_health_valid(self) -> bool {
        self.builder.get_bool_field(32)
      }
      #[inline]
      pub fn set_health_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(32, value);
      }
      #[inline]
      pub fn get_iono_coeffs_valid(self) -> bool {
        self.builder.get_bool_field(33)
      }
      #[inline]
      pub fn set_iono_coeffs_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(33, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 136] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(38, 74, 154, 81, 222, 168, 163, 195),
        ::capnp::word(20, 0, 0, 0, 1, 0, 3, 0),
        ::capnp::word(93, 250, 206, 230, 124, 221, 221, 133),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 234, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 143, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
        ::capnp::word(110, 115, 115, 46, 73, 111, 110, 111),
        ::capnp::word(68, 97, 116, 97, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(248, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 32, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(245, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(244, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(0, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 33, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(253, 0, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 118, 72, 101, 97, 108, 116, 104),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 119, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 110, 111, 65, 108, 112, 104),
        ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 110, 111, 66, 101, 116, 97),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 101, 97, 108, 116, 104, 86, 97),
        ::capnp::word(108, 105, 100, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 110, 111, 67, 111, 101, 102),
        ::capnp::word(102, 115, 86, 97, 108, 105, 100, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          5 => <bool as ::capnp::introspect::Introspect>::introspect(),
          6 => <bool as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[2,5,3,4,6,0,1];
      pub const TYPE_ID: u64 = 0xc3a3_a8de_519a_4a26;
    }
  }

  pub mod hw_status {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_noise_per_m_s(self) -> u16 {
        self.reader.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn get_agc_cnt(self) -> u16 {
        self.reader.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn get_a_status(self) -> ::core::result::Result<crate::cereal::log_capnp::ublox_gnss::hw_status::AntennaSupervisorState,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(2))
      }
      #[inline]
      pub fn get_a_power(self) -> ::core::result::Result<crate::cereal::log_capnp::ublox_gnss::hw_status::AntennaPowerStatus,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(3))
      }
      #[inline]
      pub fn get_jam_ind(self) -> u8 {
        self.reader.get_data_field::<u8>(8)
      }
      #[inline]
      pub fn get_flags(self) -> u8 {
        self.reader.get_data_field::<u8>(9)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_noise_per_m_s(self) -> u16 {
        self.builder.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn set_noise_per_m_s(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(0, value);
      }
      #[inline]
      pub fn get_agc_cnt(self) -> u16 {
        self.builder.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn set_agc_cnt(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(1, value);
      }
      #[inline]
      pub fn get_a_status(self) -> ::core::result::Result<crate::cereal::log_capnp::ublox_gnss::hw_status::AntennaSupervisorState,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(2))
      }
      #[inline]
      pub fn set_a_status(&mut self, value: crate::cereal::log_capnp::ublox_gnss::hw_status::AntennaSupervisorState)  {
        self.builder.set_data_field::<u16>(2, value as u16);
      }
      #[inline]
      pub fn get_a_power(self) -> ::core::result::Result<crate::cereal::log_capnp::ublox_gnss::hw_status::AntennaPowerStatus,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(3))
      }
      #[inline]
      pub fn set_a_power(&mut self, value: crate::cereal::log_capnp::ublox_gnss::hw_status::AntennaPowerStatus)  {
        self.builder.set_data_field::<u16>(3, value as u16);
      }
      #[inline]
      pub fn get_jam_ind(self) -> u8 {
        self.builder.get_data_field::<u8>(8)
      }
      #[inline]
      pub fn set_jam_ind(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(8, value);
      }
      #[inline]
      pub fn get_flags(self) -> u8 {
        self.builder.get_data_field::<u8>(9)
      }
      #[inline]
      pub fn set_flags(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(9, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 119] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(168, 90, 39, 20, 177, 54, 176, 235),
        ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(93, 250, 206, 230, 124, 221, 221, 133),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 234, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 39, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 0, 0, 0, 87, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
        ::capnp::word(110, 115, 115, 46, 72, 119, 83, 116),
        ::capnp::word(97, 116, 117, 115, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(83, 91, 77, 171, 40, 17, 62, 194),
        ::capnp::word(9, 0, 0, 0, 186, 0, 0, 0),
        ::capnp::word(89, 101, 228, 36, 169, 81, 59, 254),
        ::capnp::word(13, 0, 0, 0, 154, 0, 0, 0),
        ::capnp::word(65, 110, 116, 101, 110, 110, 97, 83),
        ::capnp::word(117, 112, 101, 114, 118, 105, 115, 111),
        ::capnp::word(114, 83, 116, 97, 116, 101, 0, 0),
        ::capnp::word(65, 110, 116, 101, 110, 110, 97, 80),
        ::capnp::word(111, 119, 101, 114, 83, 116, 97, 116),
        ::capnp::word(117, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(153, 0, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(176, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(173, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(110, 111, 105, 115, 101, 80, 101, 114),
        ::capnp::word(77, 83, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 103, 99, 67, 110, 116, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 83, 116, 97, 116, 117, 115, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(83, 91, 77, 171, 40, 17, 62, 194),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 80, 111, 119, 101, 114, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 101, 228, 36, 169, 81, 59, 254),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(106, 97, 109, 73, 110, 100, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 108, 97, 103, 115, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          1 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          2 => <crate::cereal::log_capnp::ublox_gnss::hw_status::AntennaSupervisorState as ::capnp::introspect::Introspect>::introspect(),
          3 => <crate::cereal::log_capnp::ublox_gnss::hw_status::AntennaPowerStatus as ::capnp::introspect::Introspect>::introspect(),
          4 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          5 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[3,2,1,5,4,0];
      pub const TYPE_ID: u64 = 0xebb0_36b1_1427_5aa8;
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum AntennaSupervisorState {
      Init = 0,
      Dontknow = 1,
      Ok = 2,
      Short = 3,
      Open = 4,
    }

    impl ::capnp::introspect::Introspect for AntennaSupervisorState {
      fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &antenna_supervisor_state::ENCODED_NODE, annotation_types: antenna_supervisor_state::get_annotation_types }).into() }
    }
    impl <'a> ::core::convert::From<AntennaSupervisorState> for ::capnp::dynamic_value::Reader<'a> {
      fn from(e: AntennaSupervisorState) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &antenna_supervisor_state::ENCODED_NODE, annotation_types: antenna_supervisor_state::get_annotation_types }.into()).into() }
    }
    impl ::core::convert::TryFrom<u16> for AntennaSupervisorState {
      type Error = ::capnp::NotInSchema;
      fn try_from(value: u16) -> ::core::result::Result<Self, <AntennaSupervisorState as ::core::convert::TryFrom<u16>>::Error> {
        match value {
          0 => ::core::result::Result::Ok(Self::Init),
          1 => ::core::result::Result::Ok(Self::Dontknow),
          2 => ::core::result::Result::Ok(Self::Ok),
          3 => ::core::result::Result::Ok(Self::Short),
          4 => ::core::result::Result::Ok(Self::Open),
          n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
        }
      }
    }
    impl From<AntennaSupervisorState> for u16 {
      #[inline]
      fn from(x: AntennaSupervisorState) -> u16 { x as u16 }
    }
    impl ::capnp::traits::HasTypeId for AntennaSupervisorState {
      const TYPE_ID: u64 = 0xc23e_1128_ab4d_5b53u64;
    }
    mod antenna_supervisor_state {
    pub static ENCODED_NODE: [::capnp::Word; 42] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(83, 91, 77, 171, 40, 17, 62, 194),
      ::capnp::word(29, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(168, 90, 39, 20, 177, 54, 176, 235),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 162, 1, 0, 0),
      ::capnp::word(45, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 127, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
      ::capnp::word(110, 115, 115, 46, 72, 119, 83, 116),
      ::capnp::word(97, 116, 117, 115, 46, 65, 110, 116),
      ::capnp::word(101, 110, 110, 97, 83, 117, 112, 101),
      ::capnp::word(114, 118, 105, 115, 111, 114, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 110, 105, 116, 0, 0, 0, 0),
      ::capnp::word(100, 111, 110, 116, 107, 110, 111, 119),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 107, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 104, 111, 114, 116, 0, 0, 0),
      ::capnp::word(111, 112, 101, 110, 0, 0, 0, 0),
    ];
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum AntennaPowerStatus {
      Off = 0,
      On = 1,
      Dontknow = 2,
    }

    impl ::capnp::introspect::Introspect for AntennaPowerStatus {
      fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &antenna_power_status::ENCODED_NODE, annotation_types: antenna_power_status::get_annotation_types }).into() }
    }
    impl <'a> ::core::convert::From<AntennaPowerStatus> for ::capnp::dynamic_value::Reader<'a> {
      fn from(e: AntennaPowerStatus) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &antenna_power_status::ENCODED_NODE, annotation_types: antenna_power_status::get_annotation_types }.into()).into() }
    }
    impl ::core::convert::TryFrom<u16> for AntennaPowerStatus {
      type Error = ::capnp::NotInSchema;
      fn try_from(value: u16) -> ::core::result::Result<Self, <AntennaPowerStatus as ::core::convert::TryFrom<u16>>::Error> {
        match value {
          0 => ::core::result::Result::Ok(Self::Off),
          1 => ::core::result::Result::Ok(Self::On),
          2 => ::core::result::Result::Ok(Self::Dontknow),
          n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
        }
      }
    }
    impl From<AntennaPowerStatus> for u16 {
      #[inline]
      fn from(x: AntennaPowerStatus) -> u16 { x as u16 }
    }
    impl ::capnp::traits::HasTypeId for AntennaPowerStatus {
      const TYPE_ID: u64 = 0xfe3b_51a9_24e4_6559u64;
    }
    mod antenna_power_status {
    pub static ENCODED_NODE: [::capnp::Word; 33] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(89, 101, 228, 36, 169, 81, 59, 254),
      ::capnp::word(29, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(168, 90, 39, 20, 177, 54, 176, 235),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 130, 1, 0, 0),
      ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 0, 0, 0, 79, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
      ::capnp::word(110, 115, 115, 46, 72, 119, 83, 116),
      ::capnp::word(97, 116, 117, 115, 46, 65, 110, 116),
      ::capnp::word(101, 110, 110, 97, 80, 111, 119, 101),
      ::capnp::word(114, 83, 116, 97, 116, 117, 115, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 102, 102, 0, 0, 0, 0, 0),
      ::capnp::word(111, 110, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 111, 110, 116, 107, 110, 111, 119),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    }
  }

  pub mod hw_status2 {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_ofs_i(self) -> i8 {
        self.reader.get_data_field::<i8>(0)
      }
      #[inline]
      pub fn get_mag_i(self) -> u8 {
        self.reader.get_data_field::<u8>(1)
      }
      #[inline]
      pub fn get_ofs_q(self) -> i8 {
        self.reader.get_data_field::<i8>(2)
      }
      #[inline]
      pub fn get_mag_q(self) -> u8 {
        self.reader.get_data_field::<u8>(3)
      }
      #[inline]
      pub fn get_cfg_source(self) -> ::core::result::Result<crate::cereal::log_capnp::ublox_gnss::hw_status2::ConfigSource,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(2))
      }
      #[inline]
      pub fn get_low_lev_cfg(self) -> u32 {
        self.reader.get_data_field::<u32>(2)
      }
      #[inline]
      pub fn get_post_status(self) -> u32 {
        self.reader.get_data_field::<u32>(3)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_ofs_i(self) -> i8 {
        self.builder.get_data_field::<i8>(0)
      }
      #[inline]
      pub fn set_ofs_i(&mut self, value: i8)  {
        self.builder.set_data_field::<i8>(0, value);
      }
      #[inline]
      pub fn get_mag_i(self) -> u8 {
        self.builder.get_data_field::<u8>(1)
      }
      #[inline]
      pub fn set_mag_i(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(1, value);
      }
      #[inline]
      pub fn get_ofs_q(self) -> i8 {
        self.builder.get_data_field::<i8>(2)
      }
      #[inline]
      pub fn set_ofs_q(&mut self, value: i8)  {
        self.builder.set_data_field::<i8>(2, value);
      }
      #[inline]
      pub fn get_mag_q(self) -> u8 {
        self.builder.get_data_field::<u8>(3)
      }
      #[inline]
      pub fn set_mag_q(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(3, value);
      }
      #[inline]
      pub fn get_cfg_source(self) -> ::core::result::Result<crate::cereal::log_capnp::ublox_gnss::hw_status2::ConfigSource,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(2))
      }
      #[inline]
      pub fn set_cfg_source(&mut self, value: crate::cereal::log_capnp::ublox_gnss::hw_status2::ConfigSource)  {
        self.builder.set_data_field::<u16>(2, value as u16);
      }
      #[inline]
      pub fn get_low_lev_cfg(self) -> u32 {
        self.builder.get_data_field::<u32>(2)
      }
      #[inline]
      pub fn set_low_lev_cfg(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(2, value);
      }
      #[inline]
      pub fn get_post_status(self) -> u32 {
        self.builder.get_data_field::<u32>(3)
      }
      #[inline]
      pub fn set_post_status(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(3, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 130] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(198, 83, 14, 185, 16, 180, 25, 249),
        ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(93, 250, 206, 230, 124, 221, 221, 133),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 0, 0, 0, 143, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
        ::capnp::word(110, 115, 115, 46, 72, 119, 83, 116),
        ::capnp::word(97, 116, 117, 115, 50, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(185, 151, 28, 181, 94, 152, 208, 178),
        ::capnp::word(1, 0, 0, 0, 106, 0, 0, 0),
        ::capnp::word(67, 111, 110, 102, 105, 103, 83, 111),
        ::capnp::word(117, 114, 99, 101, 0, 0, 0, 0),
        ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 0, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(111, 102, 115, 73, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 97, 103, 73, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 102, 115, 81, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 97, 103, 81, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 102, 103, 83, 111, 117, 114, 99),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 151, 28, 181, 94, 152, 208, 178),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 119, 76, 101, 118, 67, 102),
        ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 111, 115, 116, 83, 116, 97, 116),
        ::capnp::word(117, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <i8 as ::capnp::introspect::Introspect>::introspect(),
          1 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          2 => <i8 as ::capnp::introspect::Introspect>::introspect(),
          3 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          4 => <crate::cereal::log_capnp::ublox_gnss::hw_status2::ConfigSource as ::capnp::introspect::Introspect>::introspect(),
          5 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[4,5,1,3,0,2,6];
      pub const TYPE_ID: u64 = 0xf919_b410_b90e_53c6;
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum ConfigSource {
      Undefined = 0,
      Rom = 1,
      Otp = 2,
      Configpins = 3,
      Flash = 4,
    }

    impl ::capnp::introspect::Introspect for ConfigSource {
      fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &config_source::ENCODED_NODE, annotation_types: config_source::get_annotation_types }).into() }
    }
    impl <'a> ::core::convert::From<ConfigSource> for ::capnp::dynamic_value::Reader<'a> {
      fn from(e: ConfigSource) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &config_source::ENCODED_NODE, annotation_types: config_source::get_annotation_types }.into()).into() }
    }
    impl ::core::convert::TryFrom<u16> for ConfigSource {
      type Error = ::capnp::NotInSchema;
      fn try_from(value: u16) -> ::core::result::Result<Self, <ConfigSource as ::core::convert::TryFrom<u16>>::Error> {
        match value {
          0 => ::core::result::Result::Ok(Self::Undefined),
          1 => ::core::result::Result::Ok(Self::Rom),
          2 => ::core::result::Result::Ok(Self::Otp),
          3 => ::core::result::Result::Ok(Self::Configpins),
          4 => ::core::result::Result::Ok(Self::Flash),
          n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
        }
      }
    }
    impl From<ConfigSource> for u16 {
      #[inline]
      fn from(x: ConfigSource) -> u16 { x as u16 }
    }
    impl ::capnp::traits::HasTypeId for ConfigSource {
      const TYPE_ID: u64 = 0xb2d0_985e_b51c_97b9u64;
    }
    mod config_source {
    pub static ENCODED_NODE: [::capnp::Word; 42] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(185, 151, 28, 181, 94, 152, 208, 178),
      ::capnp::word(30, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(198, 83, 14, 185, 16, 180, 25, 249),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 90, 1, 0, 0),
      ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 0, 0, 0, 127, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
      ::capnp::word(110, 115, 115, 46, 72, 119, 83, 116),
      ::capnp::word(97, 116, 117, 115, 50, 46, 67, 111),
      ::capnp::word(110, 102, 105, 103, 83, 111, 117, 114),
      ::capnp::word(99, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 110, 100, 101, 102, 105, 110, 101),
      ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 109, 0, 0, 0, 0, 0),
      ::capnp::word(111, 116, 112, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 110, 102, 105, 103, 112, 105),
      ::capnp::word(110, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 108, 97, 115, 104, 0, 0, 0),
    ];
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    }
  }

  pub mod glonass_ephemeris {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_sv_id(self) -> u16 {
        self.reader.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn get_year(self) -> u16 {
        self.reader.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn get_day_in_year(self) -> u16 {
        self.reader.get_data_field::<u16>(2)
      }
      #[inline]
      pub fn get_hour(self) -> u16 {
        self.reader.get_data_field::<u16>(3)
      }
      #[inline]
      pub fn get_minute(self) -> u16 {
        self.reader.get_data_field::<u16>(4)
      }
      #[inline]
      pub fn get_second(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_x(self) -> f64 {
        self.reader.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn get_x_vel(self) -> f64 {
        self.reader.get_data_field::<f64>(3)
      }
      #[inline]
      pub fn get_x_accel(self) -> f64 {
        self.reader.get_data_field::<f64>(4)
      }
      #[inline]
      pub fn get_y(self) -> f64 {
        self.reader.get_data_field::<f64>(5)
      }
      #[inline]
      pub fn get_y_vel(self) -> f64 {
        self.reader.get_data_field::<f64>(6)
      }
      #[inline]
      pub fn get_y_accel(self) -> f64 {
        self.reader.get_data_field::<f64>(7)
      }
      #[inline]
      pub fn get_z(self) -> f64 {
        self.reader.get_data_field::<f64>(8)
      }
      #[inline]
      pub fn get_z_vel(self) -> f64 {
        self.reader.get_data_field::<f64>(9)
      }
      #[inline]
      pub fn get_z_accel(self) -> f64 {
        self.reader.get_data_field::<f64>(10)
      }
      #[inline]
      pub fn get_sv_type(self) -> u8 {
        self.reader.get_data_field::<u8>(10)
      }
      #[inline]
      pub fn get_sv_u_r_a(self) -> f32 {
        self.reader.get_data_field::<f32>(22)
      }
      #[inline]
      pub fn get_age(self) -> u8 {
        self.reader.get_data_field::<u8>(11)
      }
      #[inline]
      pub fn get_sv_health(self) -> u8 {
        self.reader.get_data_field::<u8>(92)
      }
      #[inline]
      pub fn get_tk_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
        self.reader.get_data_field::<u16>(47)
      }
      #[inline]
      pub fn get_tb(self) -> u16 {
        self.reader.get_data_field::<u16>(48)
      }
      #[inline]
      pub fn get_tau_n(self) -> f64 {
        self.reader.get_data_field::<f64>(13)
      }
      #[inline]
      pub fn get_delta_tau_n(self) -> f64 {
        self.reader.get_data_field::<f64>(14)
      }
      #[inline]
      pub fn get_gamma_n(self) -> f64 {
        self.reader.get_data_field::<f64>(15)
      }
      #[inline]
      pub fn get_p1(self) -> u8 {
        self.reader.get_data_field::<u8>(93)
      }
      #[inline]
      pub fn get_p2(self) -> u8 {
        self.reader.get_data_field::<u8>(98)
      }
      #[inline]
      pub fn get_p3(self) -> u8 {
        self.reader.get_data_field::<u8>(99)
      }
      #[inline]
      pub fn get_p4(self) -> u8 {
        self.reader.get_data_field::<u8>(100)
      }
      #[inline]
      pub fn get_freq_num_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
        self.reader.get_data_field::<u32>(32)
      }
      #[inline]
      pub fn get_n4(self) -> u8 {
        self.reader.get_data_field::<u8>(101)
      }
      #[inline]
      pub fn get_nt(self) -> u16 {
        self.reader.get_data_field::<u16>(51)
      }
      #[inline]
      pub fn get_freq_num(self) -> i16 {
        self.reader.get_data_field::<i16>(66)
      }
      #[inline]
      pub fn get_tk_seconds(self) -> u32 {
        self.reader.get_data_field::<u32>(34)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 18, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_sv_id(self) -> u16 {
        self.builder.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn set_sv_id(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(0, value);
      }
      #[inline]
      pub fn get_year(self) -> u16 {
        self.builder.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn set_year(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(1, value);
      }
      #[inline]
      pub fn get_day_in_year(self) -> u16 {
        self.builder.get_data_field::<u16>(2)
      }
      #[inline]
      pub fn set_day_in_year(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(2, value);
      }
      #[inline]
      pub fn get_hour(self) -> u16 {
        self.builder.get_data_field::<u16>(3)
      }
      #[inline]
      pub fn set_hour(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(3, value);
      }
      #[inline]
      pub fn get_minute(self) -> u16 {
        self.builder.get_data_field::<u16>(4)
      }
      #[inline]
      pub fn set_minute(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(4, value);
      }
      #[inline]
      pub fn get_second(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_second(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_x(self) -> f64 {
        self.builder.get_data_field::<f64>(2)
      }
      #[inline]
      pub fn set_x(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(2, value);
      }
      #[inline]
      pub fn get_x_vel(self) -> f64 {
        self.builder.get_data_field::<f64>(3)
      }
      #[inline]
      pub fn set_x_vel(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(3, value);
      }
      #[inline]
      pub fn get_x_accel(self) -> f64 {
        self.builder.get_data_field::<f64>(4)
      }
      #[inline]
      pub fn set_x_accel(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(4, value);
      }
      #[inline]
      pub fn get_y(self) -> f64 {
        self.builder.get_data_field::<f64>(5)
      }
      #[inline]
      pub fn set_y(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(5, value);
      }
      #[inline]
      pub fn get_y_vel(self) -> f64 {
        self.builder.get_data_field::<f64>(6)
      }
      #[inline]
      pub fn set_y_vel(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(6, value);
      }
      #[inline]
      pub fn get_y_accel(self) -> f64 {
        self.builder.get_data_field::<f64>(7)
      }
      #[inline]
      pub fn set_y_accel(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(7, value);
      }
      #[inline]
      pub fn get_z(self) -> f64 {
        self.builder.get_data_field::<f64>(8)
      }
      #[inline]
      pub fn set_z(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(8, value);
      }
      #[inline]
      pub fn get_z_vel(self) -> f64 {
        self.builder.get_data_field::<f64>(9)
      }
      #[inline]
      pub fn set_z_vel(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(9, value);
      }
      #[inline]
      pub fn get_z_accel(self) -> f64 {
        self.builder.get_data_field::<f64>(10)
      }
      #[inline]
      pub fn set_z_accel(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(10, value);
      }
      #[inline]
      pub fn get_sv_type(self) -> u8 {
        self.builder.get_data_field::<u8>(10)
      }
      #[inline]
      pub fn set_sv_type(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(10, value);
      }
      #[inline]
      pub fn get_sv_u_r_a(self) -> f32 {
        self.builder.get_data_field::<f32>(22)
      }
      #[inline]
      pub fn set_sv_u_r_a(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(22, value);
      }
      #[inline]
      pub fn get_age(self) -> u8 {
        self.builder.get_data_field::<u8>(11)
      }
      #[inline]
      pub fn set_age(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(11, value);
      }
      #[inline]
      pub fn get_sv_health(self) -> u8 {
        self.builder.get_data_field::<u8>(92)
      }
      #[inline]
      pub fn set_sv_health(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(92, value);
      }
      #[inline]
      pub fn get_tk_d_e_p_r_e_c_a_t_e_d(self) -> u16 {
        self.builder.get_data_field::<u16>(47)
      }
      #[inline]
      pub fn set_tk_d_e_p_r_e_c_a_t_e_d(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(47, value);
      }
      #[inline]
      pub fn get_tb(self) -> u16 {
        self.builder.get_data_field::<u16>(48)
      }
      #[inline]
      pub fn set_tb(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(48, value);
      }
      #[inline]
      pub fn get_tau_n(self) -> f64 {
        self.builder.get_data_field::<f64>(13)
      }
      #[inline]
      pub fn set_tau_n(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(13, value);
      }
      #[inline]
      pub fn get_delta_tau_n(self) -> f64 {
        self.builder.get_data_field::<f64>(14)
      }
      #[inline]
      pub fn set_delta_tau_n(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(14, value);
      }
      #[inline]
      pub fn get_gamma_n(self) -> f64 {
        self.builder.get_data_field::<f64>(15)
      }
      #[inline]
      pub fn set_gamma_n(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(15, value);
      }
      #[inline]
      pub fn get_p1(self) -> u8 {
        self.builder.get_data_field::<u8>(93)
      }
      #[inline]
      pub fn set_p1(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(93, value);
      }
      #[inline]
      pub fn get_p2(self) -> u8 {
        self.builder.get_data_field::<u8>(98)
      }
      #[inline]
      pub fn set_p2(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(98, value);
      }
      #[inline]
      pub fn get_p3(self) -> u8 {
        self.builder.get_data_field::<u8>(99)
      }
      #[inline]
      pub fn set_p3(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(99, value);
      }
      #[inline]
      pub fn get_p4(self) -> u8 {
        self.builder.get_data_field::<u8>(100)
      }
      #[inline]
      pub fn set_p4(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(100, value);
      }
      #[inline]
      pub fn get_freq_num_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
        self.builder.get_data_field::<u32>(32)
      }
      #[inline]
      pub fn set_freq_num_d_e_p_r_e_c_a_t_e_d(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(32, value);
      }
      #[inline]
      pub fn get_n4(self) -> u8 {
        self.builder.get_data_field::<u8>(101)
      }
      #[inline]
      pub fn set_n4(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(101, value);
      }
      #[inline]
      pub fn get_nt(self) -> u16 {
        self.builder.get_data_field::<u16>(51)
      }
      #[inline]
      pub fn set_nt(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(51, value);
      }
      #[inline]
      pub fn get_freq_num(self) -> i16 {
        self.builder.get_data_field::<i16>(66)
      }
      #[inline]
      pub fn set_freq_num(&mut self, value: i16)  {
        self.builder.set_data_field::<i16>(66, value);
      }
      #[inline]
      pub fn get_tk_seconds(self) -> u32 {
        self.builder.get_data_field::<u32>(34)
      }
      #[inline]
      pub fn set_tk_seconds(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(34, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 521] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(12, 142, 56, 152, 17, 145, 197, 185),
        ::capnp::word(20, 0, 0, 0, 1, 0, 18, 0),
        ::capnp::word(93, 250, 206, 230, 124, 221, 221, 133),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 63, 7, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 85, 98, 108, 111, 120, 71),
        ::capnp::word(110, 115, 115, 46, 71, 108, 111, 110),
        ::capnp::word(97, 115, 115, 69, 112, 104, 101, 109),
        ::capnp::word(101, 114, 105, 115, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(132, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 3, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(136, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 3, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(149, 3, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(148, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(160, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(157, 3, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 3, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(176, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(173, 3, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 3, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 3, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 3, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 3, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(192, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(201, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(200, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(212, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 3, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(17, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 3, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(18, 0, 0, 0, 92, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 3, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(19, 0, 0, 0, 47, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 3, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 48, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 3, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(21, 0, 0, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 3, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(22, 0, 0, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 3, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(23, 0, 0, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(244, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(0, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(24, 0, 0, 0, 93, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(253, 3, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(248, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(25, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 4, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(26, 0, 0, 0, 99, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 4, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(27, 0, 0, 0, 100, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 4, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 32, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 4, 0, 0, 146, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(29, 0, 0, 0, 101, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 4, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(20, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(32, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(30, 0, 0, 0, 51, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 4, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(31, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 4, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(28, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(40, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(32, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 4, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 118, 73, 100, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 101, 97, 114, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 97, 121, 73, 110, 89, 101, 97),
        ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 111, 117, 114, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 105, 110, 117, 116, 101, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 101, 99, 111, 110, 100, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 86, 101, 108, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 65, 99, 99, 101, 108, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 86, 101, 108, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 65, 99, 99, 101, 108, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(122, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(122, 86, 101, 108, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(122, 65, 99, 99, 101, 108, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 84, 121, 112, 101, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 85, 82, 65, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 103, 101, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 72, 101, 97, 108, 116, 104),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 107, 68, 69, 80, 82, 69, 67),
        ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 98, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 97, 117, 78, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 108, 116, 97, 84, 97, 117),
        ::capnp::word(78, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 109, 109, 97, 78, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 49, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 50, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 51, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 52, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 101, 113, 78, 117, 109, 68),
        ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
        ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 52, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 101, 113, 78, 117, 109, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 107, 83, 101, 99, 111, 110, 100),
        ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          1 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          2 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          3 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          4 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          8 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          9 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          10 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          11 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          12 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          13 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          14 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          15 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          16 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          17 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          18 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          19 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          20 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          21 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          22 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          23 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          24 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          25 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          26 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          27 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          28 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          29 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          30 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          31 => <i16 as ::capnp::introspect::Introspect>::introspect(),
          32 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[17,2,22,31,28,23,3,4,29,30,24,25,26,27,5,18,0,15,16,21,20,19,32,6,8,7,9,11,10,1,12,14,13];
      pub const TYPE_ID: u64 = 0xb9c5_9111_9838_8e0c;
    }
  }
}

pub mod qcom_gnss {
  pub use self::Which::{MeasurementReport,ClockReport,DrMeasurementReport,DrSvPoly,RawLog};

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_log_ts(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn has_measurement_report(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 0 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_clock_report(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_dr_measurement_report(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 2 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_dr_sv_poly(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 3 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_raw_log(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 4 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(4) {
        0 => {
          ::core::result::Result::Ok(MeasurementReport(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(ClockReport(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(DrMeasurementReport(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(DrSvPoly(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(RawLog(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_log_ts(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_log_ts(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn set_measurement_report(&mut self, value: crate::cereal::log_capnp::qcom_gnss::measurement_report::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 0);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_measurement_report(self, ) -> crate::cereal::log_capnp::qcom_gnss::measurement_report::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 0);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_measurement_report(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 0 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_clock_report(&mut self, value: crate::cereal::log_capnp::qcom_gnss::clock_report::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 1);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_clock_report(self, ) -> crate::cereal::log_capnp::qcom_gnss::clock_report::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 1);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_clock_report(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 1 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_dr_measurement_report(&mut self, value: crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 2);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_dr_measurement_report(self, ) -> crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 2);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_dr_measurement_report(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 2 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_dr_sv_poly(&mut self, value: crate::cereal::log_capnp::qcom_gnss::dr_sv_poly_report::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 3);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_dr_sv_poly(self, ) -> crate::cereal::log_capnp::qcom_gnss::dr_sv_poly_report::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 3);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_dr_sv_poly(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 3 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_raw_log(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.set_data_field::<u16>(4, 4);
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_raw_log(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 4);
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_raw_log(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 4 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(4) {
        0 => {
          ::core::result::Result::Ok(MeasurementReport(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(ClockReport(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(DrMeasurementReport(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(DrSvPoly(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(RawLog(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 146] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(193, 81, 174, 7, 75, 103, 148, 222),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 5, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 119, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 0, 0, 0, 87, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
      ::capnp::word(115, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(238, 167, 173, 250, 182, 18, 26, 215),
      ::capnp::word(49, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(233, 131, 108, 13, 154, 130, 30, 232),
      ::capnp::word(53, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(59, 232, 202, 27, 14, 1, 1, 229),
      ::capnp::word(57, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(146, 134, 123, 107, 216, 215, 128, 245),
      ::capnp::word(61, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(11, 79, 143, 221, 74, 94, 150, 202),
      ::capnp::word(65, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(92, 199, 198, 69, 148, 195, 83, 128),
      ::capnp::word(65, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(112, 50, 103, 26, 129, 128, 251, 177),
      ::capnp::word(69, 0, 0, 0, 122, 0, 0, 0),
      ::capnp::word(77, 101, 97, 115, 117, 114, 101, 109),
      ::capnp::word(101, 110, 116, 83, 111, 117, 114, 99),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(83, 86, 79, 98, 115, 101, 114, 118),
      ::capnp::word(97, 116, 105, 111, 110, 83, 116, 97),
      ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 101, 97, 115, 117, 114, 101, 109),
      ::capnp::word(101, 110, 116, 83, 116, 97, 116, 117),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 101, 97, 115, 117, 114, 101, 109),
      ::capnp::word(101, 110, 116, 82, 101, 112, 111, 114),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(67, 108, 111, 99, 107, 82, 101, 112),
      ::capnp::word(111, 114, 116, 0, 0, 0, 0, 0),
      ::capnp::word(68, 114, 77, 101, 97, 115, 117, 114),
      ::capnp::word(101, 109, 101, 110, 116, 82, 101, 112),
      ::capnp::word(111, 114, 116, 0, 0, 0, 0, 0),
      ::capnp::word(68, 114, 83, 118, 80, 111, 108, 121),
      ::capnp::word(82, 101, 112, 111, 114, 116, 0, 0),
      ::capnp::word(24, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(148, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(160, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 255, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 254, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 253, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 252, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 251, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(108, 111, 103, 84, 115, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 101, 97, 115, 117, 114, 101, 109),
      ::capnp::word(101, 110, 116, 82, 101, 112, 111, 114),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(146, 134, 123, 107, 216, 215, 128, 245),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 108, 111, 99, 107, 82, 101, 112),
      ::capnp::word(111, 114, 116, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 79, 143, 221, 74, 94, 150, 202),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 77, 101, 97, 115, 117, 114),
      ::capnp::word(101, 109, 101, 110, 116, 82, 101, 112),
      ::capnp::word(111, 114, 116, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 199, 198, 69, 148, 195, 83, 128),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 83, 118, 80, 111, 108, 121),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 50, 103, 26, 129, 128, 251, 177),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 119, 76, 111, 103, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <crate::cereal::log_capnp::qcom_gnss::measurement_report::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <crate::cereal::log_capnp::qcom_gnss::clock_report::Owned as ::capnp::introspect::Introspect>::introspect(),
        3 => <crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::Owned as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::qcom_gnss::dr_sv_poly_report::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[1,2,3,4,5];
    pub static MEMBERS_BY_NAME : &[u16] = &[2,3,4,0,1,5];
    pub const TYPE_ID: u64 = 0xde94_674b_07ae_51c1;
  }
  pub enum Which<A0,A1,A2,A3,A4> {
    MeasurementReport(A0),
    ClockReport(A1),
    DrMeasurementReport(A2),
    DrSvPoly(A3),
    RawLog(A4),
  }
  pub type WhichReader<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::qcom_gnss::measurement_report::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::qcom_gnss::clock_report::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::qcom_gnss::dr_sv_poly_report::Reader<'a>>,::capnp::Result<::capnp::data::Reader<'a>>>;
  pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::qcom_gnss::measurement_report::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::qcom_gnss::clock_report::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::qcom_gnss::dr_sv_poly_report::Builder<'a>>,::capnp::Result<::capnp::data::Builder<'a>>>;

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum MeasurementSource {
    Gps = 0,
    Glonass = 1,
    Beidou = 2,
    Unknown3 = 3,
    Unknown4 = 4,
    Unknown5 = 5,
    Sbas = 6,
  }

  impl ::capnp::introspect::Introspect for MeasurementSource {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &measurement_source::ENCODED_NODE, annotation_types: measurement_source::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<MeasurementSource> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: MeasurementSource) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &measurement_source::ENCODED_NODE, annotation_types: measurement_source::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for MeasurementSource {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <MeasurementSource as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Gps),
        1 => ::core::result::Result::Ok(Self::Glonass),
        2 => ::core::result::Result::Ok(Self::Beidou),
        3 => ::core::result::Result::Ok(Self::Unknown3),
        4 => ::core::result::Result::Ok(Self::Unknown4),
        5 => ::core::result::Result::Ok(Self::Unknown5),
        6 => ::core::result::Result::Ok(Self::Sbas),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<MeasurementSource> for u16 {
    #[inline]
    fn from(x: MeasurementSource) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for MeasurementSource {
    const TYPE_ID: u64 = 0xd71a_12b6_faad_a7eeu64;
  }
  mod measurement_source {
  pub static ENCODED_NODE: [::capnp::Word; 50] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(238, 167, 173, 250, 182, 18, 26, 215),
    ::capnp::word(19, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(193, 81, 174, 7, 75, 103, 148, 222),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 175, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
    ::capnp::word(115, 115, 46, 77, 101, 97, 115, 117),
    ::capnp::word(114, 101, 109, 101, 110, 116, 83, 111),
    ::capnp::word(117, 114, 99, 101, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(28, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 112, 115, 0, 0, 0, 0, 0),
    ::capnp::word(103, 108, 111, 110, 97, 115, 115, 0),
    ::capnp::word(98, 101, 105, 100, 111, 117, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 51),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 52),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 53),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 98, 97, 115, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum SVObservationState {
    Idle = 0,
    Search = 1,
    SearchVerify = 2,
    BitEdge = 3,
    TrackVerify = 4,
    Track = 5,
    Restart = 6,
    Dpo = 7,
    Glo10msBe = 8,
    Glo10msAt = 9,
  }

  impl ::capnp::introspect::Introspect for SVObservationState {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &s_v_observation_state::ENCODED_NODE, annotation_types: s_v_observation_state::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<SVObservationState> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: SVObservationState) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &s_v_observation_state::ENCODED_NODE, annotation_types: s_v_observation_state::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for SVObservationState {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <SVObservationState as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Idle),
        1 => ::core::result::Result::Ok(Self::Search),
        2 => ::core::result::Result::Ok(Self::SearchVerify),
        3 => ::core::result::Result::Ok(Self::BitEdge),
        4 => ::core::result::Result::Ok(Self::TrackVerify),
        5 => ::core::result::Result::Ok(Self::Track),
        6 => ::core::result::Result::Ok(Self::Restart),
        7 => ::core::result::Result::Ok(Self::Dpo),
        8 => ::core::result::Result::Ok(Self::Glo10msBe),
        9 => ::core::result::Result::Ok(Self::Glo10msAt),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<SVObservationState> for u16 {
    #[inline]
    fn from(x: SVObservationState) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for SVObservationState {
    const TYPE_ID: u64 = 0xe81e_829a_0d6c_83e9u64;
  }
  mod s_v_observation_state {
  pub static ENCODED_NODE: [::capnp::Word; 63] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(233, 131, 108, 13, 154, 130, 30, 232),
    ::capnp::word(19, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(193, 81, 174, 7, 75, 103, 148, 222),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 50, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 247, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
    ::capnp::word(115, 115, 46, 83, 86, 79, 98, 115),
    ::capnp::word(101, 114, 118, 97, 116, 105, 111, 110),
    ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(40, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(113, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 0, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 100, 108, 101, 0, 0, 0, 0),
    ::capnp::word(115, 101, 97, 114, 99, 104, 0, 0),
    ::capnp::word(115, 101, 97, 114, 99, 104, 86, 101),
    ::capnp::word(114, 105, 102, 121, 0, 0, 0, 0),
    ::capnp::word(98, 105, 116, 69, 100, 103, 101, 0),
    ::capnp::word(116, 114, 97, 99, 107, 86, 101, 114),
    ::capnp::word(105, 102, 121, 0, 0, 0, 0, 0),
    ::capnp::word(116, 114, 97, 99, 107, 0, 0, 0),
    ::capnp::word(114, 101, 115, 116, 97, 114, 116, 0),
    ::capnp::word(100, 112, 111, 0, 0, 0, 0, 0),
    ::capnp::word(103, 108, 111, 49, 48, 109, 115, 66),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 108, 111, 49, 48, 109, 115, 65),
    ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod measurement_status {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_sub_millisecond_is_valid(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_sub_bit_time_is_known(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_satellite_time_is_known(self) -> bool {
        self.reader.get_bool_field(2)
      }
      #[inline]
      pub fn get_bit_edge_confirmed_from_signal(self) -> bool {
        self.reader.get_bool_field(3)
      }
      #[inline]
      pub fn get_measured_velocity(self) -> bool {
        self.reader.get_bool_field(4)
      }
      #[inline]
      pub fn get_fine_or_coarse_velocity(self) -> bool {
        self.reader.get_bool_field(5)
      }
      #[inline]
      pub fn get_lock_point_valid(self) -> bool {
        self.reader.get_bool_field(6)
      }
      #[inline]
      pub fn get_lock_point_positive(self) -> bool {
        self.reader.get_bool_field(7)
      }
      #[inline]
      pub fn get_last_update_from_difference(self) -> bool {
        self.reader.get_bool_field(8)
      }
      #[inline]
      pub fn get_last_update_from_velocity_difference(self) -> bool {
        self.reader.get_bool_field(9)
      }
      #[inline]
      pub fn get_strong_indication_of_cross_corelation(self) -> bool {
        self.reader.get_bool_field(10)
      }
      #[inline]
      pub fn get_tentative_measurement(self) -> bool {
        self.reader.get_bool_field(11)
      }
      #[inline]
      pub fn get_measurement_not_usable(self) -> bool {
        self.reader.get_bool_field(12)
      }
      #[inline]
      pub fn get_sir_check_is_needed(self) -> bool {
        self.reader.get_bool_field(13)
      }
      #[inline]
      pub fn get_probation_mode(self) -> bool {
        self.reader.get_bool_field(14)
      }
      #[inline]
      pub fn get_glonass_meander_bit_edge_valid(self) -> bool {
        self.reader.get_bool_field(15)
      }
      #[inline]
      pub fn get_glonass_time_mark_valid(self) -> bool {
        self.reader.get_bool_field(16)
      }
      #[inline]
      pub fn get_gps_round_robin_rx_diversity(self) -> bool {
        self.reader.get_bool_field(17)
      }
      #[inline]
      pub fn get_gps_rx_diversity(self) -> bool {
        self.reader.get_bool_field(18)
      }
      #[inline]
      pub fn get_gps_low_bandwidth_rx_diversity_combined(self) -> bool {
        self.reader.get_bool_field(19)
      }
      #[inline]
      pub fn get_gps_high_bandwidth_nu4(self) -> bool {
        self.reader.get_bool_field(20)
      }
      #[inline]
      pub fn get_gps_high_bandwidth_nu8(self) -> bool {
        self.reader.get_bool_field(21)
      }
      #[inline]
      pub fn get_gps_high_bandwidth_uniform(self) -> bool {
        self.reader.get_bool_field(22)
      }
      #[inline]
      pub fn get_multipath_indicator(self) -> bool {
        self.reader.get_bool_field(23)
      }
      #[inline]
      pub fn get_imd_jamming_indicator(self) -> bool {
        self.reader.get_bool_field(24)
      }
      #[inline]
      pub fn get_lte_b13_tx_jamming_indicator(self) -> bool {
        self.reader.get_bool_field(25)
      }
      #[inline]
      pub fn get_fresh_measurement_indicator(self) -> bool {
        self.reader.get_bool_field(26)
      }
      #[inline]
      pub fn get_multipath_estimate_is_valid(self) -> bool {
        self.reader.get_bool_field(27)
      }
      #[inline]
      pub fn get_direction_is_valid(self) -> bool {
        self.reader.get_bool_field(28)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_sub_millisecond_is_valid(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_sub_millisecond_is_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_sub_bit_time_is_known(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_sub_bit_time_is_known(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_satellite_time_is_known(self) -> bool {
        self.builder.get_bool_field(2)
      }
      #[inline]
      pub fn set_satellite_time_is_known(&mut self, value: bool)  {
        self.builder.set_bool_field(2, value);
      }
      #[inline]
      pub fn get_bit_edge_confirmed_from_signal(self) -> bool {
        self.builder.get_bool_field(3)
      }
      #[inline]
      pub fn set_bit_edge_confirmed_from_signal(&mut self, value: bool)  {
        self.builder.set_bool_field(3, value);
      }
      #[inline]
      pub fn get_measured_velocity(self) -> bool {
        self.builder.get_bool_field(4)
      }
      #[inline]
      pub fn set_measured_velocity(&mut self, value: bool)  {
        self.builder.set_bool_field(4, value);
      }
      #[inline]
      pub fn get_fine_or_coarse_velocity(self) -> bool {
        self.builder.get_bool_field(5)
      }
      #[inline]
      pub fn set_fine_or_coarse_velocity(&mut self, value: bool)  {
        self.builder.set_bool_field(5, value);
      }
      #[inline]
      pub fn get_lock_point_valid(self) -> bool {
        self.builder.get_bool_field(6)
      }
      #[inline]
      pub fn set_lock_point_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(6, value);
      }
      #[inline]
      pub fn get_lock_point_positive(self) -> bool {
        self.builder.get_bool_field(7)
      }
      #[inline]
      pub fn set_lock_point_positive(&mut self, value: bool)  {
        self.builder.set_bool_field(7, value);
      }
      #[inline]
      pub fn get_last_update_from_difference(self) -> bool {
        self.builder.get_bool_field(8)
      }
      #[inline]
      pub fn set_last_update_from_difference(&mut self, value: bool)  {
        self.builder.set_bool_field(8, value);
      }
      #[inline]
      pub fn get_last_update_from_velocity_difference(self) -> bool {
        self.builder.get_bool_field(9)
      }
      #[inline]
      pub fn set_last_update_from_velocity_difference(&mut self, value: bool)  {
        self.builder.set_bool_field(9, value);
      }
      #[inline]
      pub fn get_strong_indication_of_cross_corelation(self) -> bool {
        self.builder.get_bool_field(10)
      }
      #[inline]
      pub fn set_strong_indication_of_cross_corelation(&mut self, value: bool)  {
        self.builder.set_bool_field(10, value);
      }
      #[inline]
      pub fn get_tentative_measurement(self) -> bool {
        self.builder.get_bool_field(11)
      }
      #[inline]
      pub fn set_tentative_measurement(&mut self, value: bool)  {
        self.builder.set_bool_field(11, value);
      }
      #[inline]
      pub fn get_measurement_not_usable(self) -> bool {
        self.builder.get_bool_field(12)
      }
      #[inline]
      pub fn set_measurement_not_usable(&mut self, value: bool)  {
        self.builder.set_bool_field(12, value);
      }
      #[inline]
      pub fn get_sir_check_is_needed(self) -> bool {
        self.builder.get_bool_field(13)
      }
      #[inline]
      pub fn set_sir_check_is_needed(&mut self, value: bool)  {
        self.builder.set_bool_field(13, value);
      }
      #[inline]
      pub fn get_probation_mode(self) -> bool {
        self.builder.get_bool_field(14)
      }
      #[inline]
      pub fn set_probation_mode(&mut self, value: bool)  {
        self.builder.set_bool_field(14, value);
      }
      #[inline]
      pub fn get_glonass_meander_bit_edge_valid(self) -> bool {
        self.builder.get_bool_field(15)
      }
      #[inline]
      pub fn set_glonass_meander_bit_edge_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(15, value);
      }
      #[inline]
      pub fn get_glonass_time_mark_valid(self) -> bool {
        self.builder.get_bool_field(16)
      }
      #[inline]
      pub fn set_glonass_time_mark_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(16, value);
      }
      #[inline]
      pub fn get_gps_round_robin_rx_diversity(self) -> bool {
        self.builder.get_bool_field(17)
      }
      #[inline]
      pub fn set_gps_round_robin_rx_diversity(&mut self, value: bool)  {
        self.builder.set_bool_field(17, value);
      }
      #[inline]
      pub fn get_gps_rx_diversity(self) -> bool {
        self.builder.get_bool_field(18)
      }
      #[inline]
      pub fn set_gps_rx_diversity(&mut self, value: bool)  {
        self.builder.set_bool_field(18, value);
      }
      #[inline]
      pub fn get_gps_low_bandwidth_rx_diversity_combined(self) -> bool {
        self.builder.get_bool_field(19)
      }
      #[inline]
      pub fn set_gps_low_bandwidth_rx_diversity_combined(&mut self, value: bool)  {
        self.builder.set_bool_field(19, value);
      }
      #[inline]
      pub fn get_gps_high_bandwidth_nu4(self) -> bool {
        self.builder.get_bool_field(20)
      }
      #[inline]
      pub fn set_gps_high_bandwidth_nu4(&mut self, value: bool)  {
        self.builder.set_bool_field(20, value);
      }
      #[inline]
      pub fn get_gps_high_bandwidth_nu8(self) -> bool {
        self.builder.get_bool_field(21)
      }
      #[inline]
      pub fn set_gps_high_bandwidth_nu8(&mut self, value: bool)  {
        self.builder.set_bool_field(21, value);
      }
      #[inline]
      pub fn get_gps_high_bandwidth_uniform(self) -> bool {
        self.builder.get_bool_field(22)
      }
      #[inline]
      pub fn set_gps_high_bandwidth_uniform(&mut self, value: bool)  {
        self.builder.set_bool_field(22, value);
      }
      #[inline]
      pub fn get_multipath_indicator(self) -> bool {
        self.builder.get_bool_field(23)
      }
      #[inline]
      pub fn set_multipath_indicator(&mut self, value: bool)  {
        self.builder.set_bool_field(23, value);
      }
      #[inline]
      pub fn get_imd_jamming_indicator(self) -> bool {
        self.builder.get_bool_field(24)
      }
      #[inline]
      pub fn set_imd_jamming_indicator(&mut self, value: bool)  {
        self.builder.set_bool_field(24, value);
      }
      #[inline]
      pub fn get_lte_b13_tx_jamming_indicator(self) -> bool {
        self.builder.get_bool_field(25)
      }
      #[inline]
      pub fn set_lte_b13_tx_jamming_indicator(&mut self, value: bool)  {
        self.builder.set_bool_field(25, value);
      }
      #[inline]
      pub fn get_fresh_measurement_indicator(self) -> bool {
        self.builder.get_bool_field(26)
      }
      #[inline]
      pub fn set_fresh_measurement_indicator(&mut self, value: bool)  {
        self.builder.set_bool_field(26, value);
      }
      #[inline]
      pub fn get_multipath_estimate_is_valid(self) -> bool {
        self.builder.get_bool_field(27)
      }
      #[inline]
      pub fn set_multipath_estimate_is_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(27, value);
      }
      #[inline]
      pub fn get_direction_is_valid(self) -> bool {
        self.builder.get_bool_field(28)
      }
      #[inline]
      pub fn set_direction_is_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(28, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 522] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(59, 232, 202, 27, 14, 1, 1, 229),
        ::capnp::word(19, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(193, 81, 174, 7, 75, 103, 148, 222),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 95, 6, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
        ::capnp::word(115, 115, 46, 77, 101, 97, 115, 117),
        ::capnp::word(114, 101, 109, 101, 110, 116, 83, 116),
        ::capnp::word(97, 116, 117, 115, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(116, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 3, 0, 0, 178, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 3, 0, 0, 146, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 3, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 3, 0, 0, 218, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(81, 3, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(84, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(96, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(93, 3, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 3, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(113, 3, 0, 0, 146, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(128, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(125, 3, 0, 0, 202, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(132, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 3, 0, 0, 10, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 3, 0, 0, 18, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 3, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 3, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 3, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 3, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 3, 0, 0, 218, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 3, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(244, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(0, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(17, 0, 0, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(253, 3, 0, 0, 202, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(18, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 4, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(24, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(19, 0, 0, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 4, 0, 0, 26, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 4, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(21, 0, 0, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 4, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(22, 0, 0, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 4, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(68, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(80, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(23, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(77, 4, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(80, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(24, 0, 0, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 4, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(25, 0, 0, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 4, 0, 0, 202, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(26, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 4, 0, 0, 210, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(136, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(27, 0, 0, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(133, 4, 0, 0, 202, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 28, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(149, 4, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 117, 98, 77, 105, 108, 108, 105),
        ::capnp::word(115, 101, 99, 111, 110, 100, 73, 115),
        ::capnp::word(86, 97, 108, 105, 100, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 117, 98, 66, 105, 116, 84, 105),
        ::capnp::word(109, 101, 73, 115, 75, 110, 111, 119),
        ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 116, 101, 108, 108, 105, 116),
        ::capnp::word(101, 84, 105, 109, 101, 73, 115, 75),
        ::capnp::word(110, 111, 119, 110, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 105, 116, 69, 100, 103, 101, 67),
        ::capnp::word(111, 110, 102, 105, 114, 109, 101, 100),
        ::capnp::word(70, 114, 111, 109, 83, 105, 103, 110),
        ::capnp::word(97, 108, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 101, 97, 115, 117, 114, 101, 100),
        ::capnp::word(86, 101, 108, 111, 99, 105, 116, 121),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 105, 110, 101, 79, 114, 67, 111),
        ::capnp::word(97, 114, 115, 101, 86, 101, 108, 111),
        ::capnp::word(99, 105, 116, 121, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 99, 107, 80, 111, 105, 110),
        ::capnp::word(116, 86, 97, 108, 105, 100, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 99, 107, 80, 111, 105, 110),
        ::capnp::word(116, 80, 111, 115, 105, 116, 105, 118),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 115, 116, 85, 112, 100, 97),
        ::capnp::word(116, 101, 70, 114, 111, 109, 68, 105),
        ::capnp::word(102, 102, 101, 114, 101, 110, 99, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 115, 116, 85, 112, 100, 97),
        ::capnp::word(116, 101, 70, 114, 111, 109, 86, 101),
        ::capnp::word(108, 111, 99, 105, 116, 121, 68, 105),
        ::capnp::word(102, 102, 101, 114, 101, 110, 99, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 114, 111, 110, 103, 73, 110),
        ::capnp::word(100, 105, 99, 97, 116, 105, 111, 110),
        ::capnp::word(79, 102, 67, 114, 111, 115, 115, 67),
        ::capnp::word(111, 114, 101, 108, 97, 116, 105, 111),
        ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 101, 110, 116, 97, 116, 105, 118),
        ::capnp::word(101, 77, 101, 97, 115, 117, 114, 101),
        ::capnp::word(109, 101, 110, 116, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 101, 97, 115, 117, 114, 101, 109),
        ::capnp::word(101, 110, 116, 78, 111, 116, 85, 115),
        ::capnp::word(97, 98, 108, 101, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 105, 114, 67, 104, 101, 99, 107),
        ::capnp::word(73, 115, 78, 101, 101, 100, 101, 100),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 114, 111, 98, 97, 116, 105, 111),
        ::capnp::word(110, 77, 111, 100, 101, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 77),
        ::capnp::word(101, 97, 110, 100, 101, 114, 66, 105),
        ::capnp::word(116, 69, 100, 103, 101, 86, 97, 108),
        ::capnp::word(105, 100, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 84),
        ::capnp::word(105, 109, 101, 77, 97, 114, 107, 86),
        ::capnp::word(97, 108, 105, 100, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 82, 111, 117, 110, 100),
        ::capnp::word(82, 111, 98, 105, 110, 82, 120, 68),
        ::capnp::word(105, 118, 101, 114, 115, 105, 116, 121),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 82, 120, 68, 105, 118),
        ::capnp::word(101, 114, 115, 105, 116, 121, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 76, 111, 119, 66, 97),
        ::capnp::word(110, 100, 119, 105, 100, 116, 104, 82),
        ::capnp::word(120, 68, 105, 118, 101, 114, 115, 105),
        ::capnp::word(116, 121, 67, 111, 109, 98, 105, 110),
        ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 72, 105, 103, 104, 66),
        ::capnp::word(97, 110, 100, 119, 105, 100, 116, 104),
        ::capnp::word(78, 117, 52, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 72, 105, 103, 104, 66),
        ::capnp::word(97, 110, 100, 119, 105, 100, 116, 104),
        ::capnp::word(78, 117, 56, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 72, 105, 103, 104, 66),
        ::capnp::word(97, 110, 100, 119, 105, 100, 116, 104),
        ::capnp::word(85, 110, 105, 102, 111, 114, 109, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 117, 108, 116, 105, 112, 97, 116),
        ::capnp::word(104, 73, 110, 100, 105, 99, 97, 116),
        ::capnp::word(111, 114, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 109, 100, 74, 97, 109, 109, 105),
        ::capnp::word(110, 103, 73, 110, 100, 105, 99, 97),
        ::capnp::word(116, 111, 114, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 116, 101, 66, 49, 51, 84, 120),
        ::capnp::word(74, 97, 109, 109, 105, 110, 103, 73),
        ::capnp::word(110, 100, 105, 99, 97, 116, 111, 114),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 101, 115, 104, 77, 101, 97),
        ::capnp::word(115, 117, 114, 101, 109, 101, 110, 116),
        ::capnp::word(73, 110, 100, 105, 99, 97, 116, 111),
        ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 117, 108, 116, 105, 112, 97, 116),
        ::capnp::word(104, 69, 115, 116, 105, 109, 97, 116),
        ::capnp::word(101, 73, 115, 86, 97, 108, 105, 100),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 105, 114, 101, 99, 116, 105, 111),
        ::capnp::word(110, 73, 115, 86, 97, 108, 105, 100),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <bool as ::capnp::introspect::Introspect>::introspect(),
          2 => <bool as ::capnp::introspect::Introspect>::introspect(),
          3 => <bool as ::capnp::introspect::Introspect>::introspect(),
          4 => <bool as ::capnp::introspect::Introspect>::introspect(),
          5 => <bool as ::capnp::introspect::Introspect>::introspect(),
          6 => <bool as ::capnp::introspect::Introspect>::introspect(),
          7 => <bool as ::capnp::introspect::Introspect>::introspect(),
          8 => <bool as ::capnp::introspect::Introspect>::introspect(),
          9 => <bool as ::capnp::introspect::Introspect>::introspect(),
          10 => <bool as ::capnp::introspect::Introspect>::introspect(),
          11 => <bool as ::capnp::introspect::Introspect>::introspect(),
          12 => <bool as ::capnp::introspect::Introspect>::introspect(),
          13 => <bool as ::capnp::introspect::Introspect>::introspect(),
          14 => <bool as ::capnp::introspect::Introspect>::introspect(),
          15 => <bool as ::capnp::introspect::Introspect>::introspect(),
          16 => <bool as ::capnp::introspect::Introspect>::introspect(),
          17 => <bool as ::capnp::introspect::Introspect>::introspect(),
          18 => <bool as ::capnp::introspect::Introspect>::introspect(),
          19 => <bool as ::capnp::introspect::Introspect>::introspect(),
          20 => <bool as ::capnp::introspect::Introspect>::introspect(),
          21 => <bool as ::capnp::introspect::Introspect>::introspect(),
          22 => <bool as ::capnp::introspect::Introspect>::introspect(),
          23 => <bool as ::capnp::introspect::Introspect>::introspect(),
          24 => <bool as ::capnp::introspect::Introspect>::introspect(),
          25 => <bool as ::capnp::introspect::Introspect>::introspect(),
          26 => <bool as ::capnp::introspect::Introspect>::introspect(),
          27 => <bool as ::capnp::introspect::Introspect>::introspect(),
          28 => <bool as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[3,28,5,26,15,16,20,21,22,19,17,18,24,8,9,7,6,25,4,12,27,23,14,2,13,10,1,0,11];
      pub const TYPE_ID: u64 = 0xe501_010e_1bca_e83b;
    }
  }

  pub mod measurement_report {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::qcom_gnss::MeasurementSource,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_f_count(self) -> u32 {
        self.reader.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.reader.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn get_glonass_cycle_number(self) -> u8 {
        self.reader.get_data_field::<u8>(8)
      }
      #[inline]
      pub fn get_glonass_number_of_days(self) -> u16 {
        self.reader.get_data_field::<u16>(5)
      }
      #[inline]
      pub fn get_milliseconds(self) -> u32 {
        self.reader.get_data_field::<u32>(3)
      }
      #[inline]
      pub fn get_time_bias(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_clock_time_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_clock_frequency_bias(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_clock_frequency_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_sv(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::qcom_gnss::measurement_report::s_v::Owned>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_sv(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 4, pointers: 1 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::qcom_gnss::MeasurementSource,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_source(&mut self, value: crate::cereal::log_capnp::qcom_gnss::MeasurementSource)  {
        self.builder.set_data_field::<u16>(0, value as u16);
      }
      #[inline]
      pub fn get_f_count(self) -> u32 {
        self.builder.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn set_f_count(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(1, value);
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.builder.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn set_gps_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(1, value);
      }
      #[inline]
      pub fn get_glonass_cycle_number(self) -> u8 {
        self.builder.get_data_field::<u8>(8)
      }
      #[inline]
      pub fn set_glonass_cycle_number(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(8, value);
      }
      #[inline]
      pub fn get_glonass_number_of_days(self) -> u16 {
        self.builder.get_data_field::<u16>(5)
      }
      #[inline]
      pub fn set_glonass_number_of_days(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(5, value);
      }
      #[inline]
      pub fn get_milliseconds(self) -> u32 {
        self.builder.get_data_field::<u32>(3)
      }
      #[inline]
      pub fn set_milliseconds(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(3, value);
      }
      #[inline]
      pub fn get_time_bias(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_time_bias(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_clock_time_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_clock_time_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_clock_frequency_bias(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_clock_frequency_bias(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_clock_frequency_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_clock_frequency_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_sv(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::qcom_gnss::measurement_report::s_v::Owned>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_sv(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::qcom_gnss::measurement_report::s_v::Owned>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_sv(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::qcom_gnss::measurement_report::s_v::Owned> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_sv(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 204] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(146, 134, 123, 107, 216, 215, 128, 245),
        ::capnp::word(19, 0, 0, 0, 1, 0, 4, 0),
        ::capnp::word(193, 81, 174, 7, 75, 103, 148, 222),
        ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 0, 0, 0, 111, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
        ::capnp::word(115, 115, 46, 77, 101, 97, 115, 117),
        ::capnp::word(114, 101, 109, 101, 110, 116, 82, 101),
        ::capnp::word(112, 111, 114, 116, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(39, 44, 187, 231, 90, 89, 12, 241),
        ::capnp::word(1, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(83, 86, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 1, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 1, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(49, 1, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(52, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 1, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(76, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(73, 1, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(81, 1, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(80, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 1, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 1, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(113, 1, 0, 0, 210, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 1, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 111, 117, 114, 99, 101, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(238, 167, 173, 250, 182, 18, 26, 215),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 67, 111, 117, 110, 116, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 67),
        ::capnp::word(121, 99, 108, 101, 78, 117, 109, 98),
        ::capnp::word(101, 114, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 78),
        ::capnp::word(117, 109, 98, 101, 114, 79, 102, 68),
        ::capnp::word(97, 121, 115, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 108, 111, 99, 107, 84, 105, 109),
        ::capnp::word(101, 85, 110, 99, 101, 114, 116, 97),
        ::capnp::word(105, 110, 116, 121, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 108, 111, 99, 107, 70, 114, 101),
        ::capnp::word(113, 117, 101, 110, 99, 121, 66, 105),
        ::capnp::word(97, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 108, 111, 99, 107, 70, 114, 101),
        ::capnp::word(113, 117, 101, 110, 99, 121, 85, 110),
        ::capnp::word(99, 101, 114, 116, 97, 105, 110, 116),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(39, 44, 187, 231, 90, 89, 12, 241),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <crate::cereal::log_capnp::qcom_gnss::MeasurementSource as ::capnp::introspect::Introspect>::introspect(),
          1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          3 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          4 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          5 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          10 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::qcom_gnss::measurement_report::s_v::Owned> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[8,9,7,1,3,4,2,5,0,10,6];
      pub const TYPE_ID: u64 = 0xf580_d7d8_6b7b_8692;
    }

    pub mod s_v {
      #[derive(Copy, Clone)]
      pub struct Owned(());
      impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
      impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

      pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
      impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
      impl <'a,> ::core::clone::Clone for Reader<'a,>  {
        fn clone(&self) -> Self { *self }
      }

      impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
          Self { reader,  }
        }
      }

      impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
        fn from(reader: Reader<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
          core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
        }
      }

      impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
        fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
          self.reader
        }
      }

      impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
          self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
      }

      impl <'a,> Reader<'a,>  {
        pub fn reborrow(&self) -> Reader<'_,> {
          Self { .. *self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.reader.total_size()
        }
        #[inline]
        pub fn get_sv_id(self) -> u8 {
          self.reader.get_data_field::<u8>(0)
        }
        #[inline]
        pub fn get_glonass_frequency_index(self) -> i8 {
          self.reader.get_data_field::<i8>(1)
        }
        #[inline]
        pub fn get_observation_state(self) -> ::core::result::Result<crate::cereal::log_capnp::qcom_gnss::SVObservationState,::capnp::NotInSchema> {
          ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
        }
        #[inline]
        pub fn get_observations(self) -> u8 {
          self.reader.get_data_field::<u8>(4)
        }
        #[inline]
        pub fn get_good_observations(self) -> u8 {
          self.reader.get_data_field::<u8>(5)
        }
        #[inline]
        pub fn get_gps_parity_error_count(self) -> u16 {
          self.reader.get_data_field::<u16>(3)
        }
        #[inline]
        pub fn get_glonass_hemming_error_count(self) -> u8 {
          self.reader.get_data_field::<u8>(8)
        }
        #[inline]
        pub fn get_filter_stages(self) -> u8 {
          self.reader.get_data_field::<u8>(9)
        }
        #[inline]
        pub fn get_carrier_noise(self) -> u16 {
          self.reader.get_data_field::<u16>(5)
        }
        #[inline]
        pub fn get_latency(self) -> i16 {
          self.reader.get_data_field::<i16>(6)
        }
        #[inline]
        pub fn get_predetect_interval(self) -> u8 {
          self.reader.get_data_field::<u8>(14)
        }
        #[inline]
        pub fn get_postdetections(self) -> u16 {
          self.reader.get_data_field::<u16>(8)
        }
        #[inline]
        pub fn get_unfiltered_measurement_integral(self) -> u32 {
          self.reader.get_data_field::<u32>(5)
        }
        #[inline]
        pub fn get_unfiltered_measurement_fraction(self) -> f32 {
          self.reader.get_data_field::<f32>(6)
        }
        #[inline]
        pub fn get_unfiltered_time_uncertainty(self) -> f32 {
          self.reader.get_data_field::<f32>(7)
        }
        #[inline]
        pub fn get_unfiltered_speed(self) -> f32 {
          self.reader.get_data_field::<f32>(8)
        }
        #[inline]
        pub fn get_unfiltered_speed_uncertainty(self) -> f32 {
          self.reader.get_data_field::<f32>(9)
        }
        #[inline]
        pub fn get_measurement_status(self) -> ::capnp::Result<crate::cereal::log_capnp::qcom_gnss::measurement_status::Reader<'a>> {
          ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
        }
        #[inline]
        pub fn has_measurement_status(&self) -> bool {
          !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_multipath_estimate(self) -> u32 {
          self.reader.get_data_field::<u32>(10)
        }
        #[inline]
        pub fn get_azimuth(self) -> f32 {
          self.reader.get_data_field::<f32>(11)
        }
        #[inline]
        pub fn get_elevation(self) -> f32 {
          self.reader.get_data_field::<f32>(12)
        }
        #[inline]
        pub fn get_carrier_phase_cycles_integral(self) -> i32 {
          self.reader.get_data_field::<i32>(13)
        }
        #[inline]
        pub fn get_carrier_phase_cycles_fraction(self) -> u16 {
          self.reader.get_data_field::<u16>(9)
        }
        #[inline]
        pub fn get_fine_speed(self) -> f32 {
          self.reader.get_data_field::<f32>(14)
        }
        #[inline]
        pub fn get_fine_speed_uncertainty(self) -> f32 {
          self.reader.get_data_field::<f32>(15)
        }
        #[inline]
        pub fn get_cycle_slip_count(self) -> u8 {
          self.reader.get_data_field::<u8>(15)
        }
      }

      pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
      impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 8, pointers: 1 };
      }
      impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
          Self { builder,  }
        }
      }

      impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
        fn from(builder: Builder<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
          self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
      }

      impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
          builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
        }
        fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
        fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
      }

      impl <'a,> Builder<'a,>  {
        pub fn into_reader(self) -> Reader<'a,> {
          self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_,> {
          Builder { builder: self.builder.reborrow() }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_,> {
          self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_sv_id(self) -> u8 {
          self.builder.get_data_field::<u8>(0)
        }
        #[inline]
        pub fn set_sv_id(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(0, value);
        }
        #[inline]
        pub fn get_glonass_frequency_index(self) -> i8 {
          self.builder.get_data_field::<i8>(1)
        }
        #[inline]
        pub fn set_glonass_frequency_index(&mut self, value: i8)  {
          self.builder.set_data_field::<i8>(1, value);
        }
        #[inline]
        pub fn get_observation_state(self) -> ::core::result::Result<crate::cereal::log_capnp::qcom_gnss::SVObservationState,::capnp::NotInSchema> {
          ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
        }
        #[inline]
        pub fn set_observation_state(&mut self, value: crate::cereal::log_capnp::qcom_gnss::SVObservationState)  {
          self.builder.set_data_field::<u16>(1, value as u16);
        }
        #[inline]
        pub fn get_observations(self) -> u8 {
          self.builder.get_data_field::<u8>(4)
        }
        #[inline]
        pub fn set_observations(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(4, value);
        }
        #[inline]
        pub fn get_good_observations(self) -> u8 {
          self.builder.get_data_field::<u8>(5)
        }
        #[inline]
        pub fn set_good_observations(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(5, value);
        }
        #[inline]
        pub fn get_gps_parity_error_count(self) -> u16 {
          self.builder.get_data_field::<u16>(3)
        }
        #[inline]
        pub fn set_gps_parity_error_count(&mut self, value: u16)  {
          self.builder.set_data_field::<u16>(3, value);
        }
        #[inline]
        pub fn get_glonass_hemming_error_count(self) -> u8 {
          self.builder.get_data_field::<u8>(8)
        }
        #[inline]
        pub fn set_glonass_hemming_error_count(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(8, value);
        }
        #[inline]
        pub fn get_filter_stages(self) -> u8 {
          self.builder.get_data_field::<u8>(9)
        }
        #[inline]
        pub fn set_filter_stages(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(9, value);
        }
        #[inline]
        pub fn get_carrier_noise(self) -> u16 {
          self.builder.get_data_field::<u16>(5)
        }
        #[inline]
        pub fn set_carrier_noise(&mut self, value: u16)  {
          self.builder.set_data_field::<u16>(5, value);
        }
        #[inline]
        pub fn get_latency(self) -> i16 {
          self.builder.get_data_field::<i16>(6)
        }
        #[inline]
        pub fn set_latency(&mut self, value: i16)  {
          self.builder.set_data_field::<i16>(6, value);
        }
        #[inline]
        pub fn get_predetect_interval(self) -> u8 {
          self.builder.get_data_field::<u8>(14)
        }
        #[inline]
        pub fn set_predetect_interval(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(14, value);
        }
        #[inline]
        pub fn get_postdetections(self) -> u16 {
          self.builder.get_data_field::<u16>(8)
        }
        #[inline]
        pub fn set_postdetections(&mut self, value: u16)  {
          self.builder.set_data_field::<u16>(8, value);
        }
        #[inline]
        pub fn get_unfiltered_measurement_integral(self) -> u32 {
          self.builder.get_data_field::<u32>(5)
        }
        #[inline]
        pub fn set_unfiltered_measurement_integral(&mut self, value: u32)  {
          self.builder.set_data_field::<u32>(5, value);
        }
        #[inline]
        pub fn get_unfiltered_measurement_fraction(self) -> f32 {
          self.builder.get_data_field::<f32>(6)
        }
        #[inline]
        pub fn set_unfiltered_measurement_fraction(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(6, value);
        }
        #[inline]
        pub fn get_unfiltered_time_uncertainty(self) -> f32 {
          self.builder.get_data_field::<f32>(7)
        }
        #[inline]
        pub fn set_unfiltered_time_uncertainty(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(7, value);
        }
        #[inline]
        pub fn get_unfiltered_speed(self) -> f32 {
          self.builder.get_data_field::<f32>(8)
        }
        #[inline]
        pub fn set_unfiltered_speed(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(8, value);
        }
        #[inline]
        pub fn get_unfiltered_speed_uncertainty(self) -> f32 {
          self.builder.get_data_field::<f32>(9)
        }
        #[inline]
        pub fn set_unfiltered_speed_uncertainty(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(9, value);
        }
        #[inline]
        pub fn get_measurement_status(self) -> ::capnp::Result<crate::cereal::log_capnp::qcom_gnss::measurement_status::Builder<'a>> {
          ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
        }
        #[inline]
        pub fn set_measurement_status(&mut self, value: crate::cereal::log_capnp::qcom_gnss::measurement_status::Reader<'_>) -> ::capnp::Result<()> {
          ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
        }
        #[inline]
        pub fn init_measurement_status(self, ) -> crate::cereal::log_capnp::qcom_gnss::measurement_status::Builder<'a> {
          ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
        }
        #[inline]
        pub fn has_measurement_status(&self) -> bool {
          !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_multipath_estimate(self) -> u32 {
          self.builder.get_data_field::<u32>(10)
        }
        #[inline]
        pub fn set_multipath_estimate(&mut self, value: u32)  {
          self.builder.set_data_field::<u32>(10, value);
        }
        #[inline]
        pub fn get_azimuth(self) -> f32 {
          self.builder.get_data_field::<f32>(11)
        }
        #[inline]
        pub fn set_azimuth(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(11, value);
        }
        #[inline]
        pub fn get_elevation(self) -> f32 {
          self.builder.get_data_field::<f32>(12)
        }
        #[inline]
        pub fn set_elevation(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(12, value);
        }
        #[inline]
        pub fn get_carrier_phase_cycles_integral(self) -> i32 {
          self.builder.get_data_field::<i32>(13)
        }
        #[inline]
        pub fn set_carrier_phase_cycles_integral(&mut self, value: i32)  {
          self.builder.set_data_field::<i32>(13, value);
        }
        #[inline]
        pub fn get_carrier_phase_cycles_fraction(self) -> u16 {
          self.builder.get_data_field::<u16>(9)
        }
        #[inline]
        pub fn set_carrier_phase_cycles_fraction(&mut self, value: u16)  {
          self.builder.set_data_field::<u16>(9, value);
        }
        #[inline]
        pub fn get_fine_speed(self) -> f32 {
          self.builder.get_data_field::<f32>(14)
        }
        #[inline]
        pub fn set_fine_speed(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(14, value);
        }
        #[inline]
        pub fn get_fine_speed_uncertainty(self) -> f32 {
          self.builder.get_data_field::<f32>(15)
        }
        #[inline]
        pub fn set_fine_speed_uncertainty(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(15, value);
        }
        #[inline]
        pub fn get_cycle_slip_count(self) -> u8 {
          self.builder.get_data_field::<u8>(15)
        }
        #[inline]
        pub fn set_cycle_slip_count(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(15, value);
        }
      }

      pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
      impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
          Self { _typeless: typeless,  }
        }
      }
      impl Pipeline  {
        pub fn get_measurement_status(&self) -> crate::cereal::log_capnp::qcom_gnss::measurement_status::Pipeline {
          ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
        }
      }
      mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 454] = [
          ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
          ::capnp::word(39, 44, 187, 231, 90, 89, 12, 241),
          ::capnp::word(37, 0, 0, 0, 1, 0, 8, 0),
          ::capnp::word(146, 134, 123, 107, 216, 215, 128, 245),
          ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(21, 0, 0, 0, 66, 1, 0, 0),
          ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(33, 0, 0, 0, 183, 5, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
          ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
          ::capnp::word(115, 115, 46, 77, 101, 97, 115, 117),
          ::capnp::word(114, 101, 109, 101, 110, 116, 82, 101),
          ::capnp::word(112, 111, 114, 116, 46, 83, 86, 0),
          ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
          ::capnp::word(104, 0, 0, 0, 3, 0, 4, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(201, 2, 0, 0, 42, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(196, 2, 0, 0, 3, 0, 1, 0),
          ::capnp::word(208, 2, 0, 0, 2, 0, 1, 0),
          ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(205, 2, 0, 0, 178, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(208, 2, 0, 0, 3, 0, 1, 0),
          ::capnp::word(220, 2, 0, 0, 2, 0, 1, 0),
          ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(217, 2, 0, 0, 138, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(220, 2, 0, 0, 3, 0, 1, 0),
          ::capnp::word(232, 2, 0, 0, 2, 0, 1, 0),
          ::capnp::word(2, 0, 0, 0, 4, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(229, 2, 0, 0, 106, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(228, 2, 0, 0, 3, 0, 1, 0),
          ::capnp::word(240, 2, 0, 0, 2, 0, 1, 0),
          ::capnp::word(3, 0, 0, 0, 5, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(237, 2, 0, 0, 138, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(240, 2, 0, 0, 3, 0, 1, 0),
          ::capnp::word(252, 2, 0, 0, 2, 0, 1, 0),
          ::capnp::word(4, 0, 0, 0, 3, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(249, 2, 0, 0, 162, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(252, 2, 0, 0, 3, 0, 1, 0),
          ::capnp::word(8, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(6, 0, 0, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(5, 3, 0, 0, 202, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(12, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(24, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(7, 0, 0, 0, 9, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(21, 3, 0, 0, 106, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(20, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(32, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(8, 0, 0, 0, 5, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(29, 3, 0, 0, 106, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(28, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(40, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(9, 0, 0, 0, 6, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(37, 3, 0, 0, 66, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(32, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(44, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(10, 0, 0, 0, 14, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(41, 3, 0, 0, 146, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(44, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(56, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(11, 0, 0, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(53, 3, 0, 0, 122, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(52, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(64, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(12, 0, 0, 0, 5, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(61, 3, 0, 0, 242, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(68, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(80, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(13, 0, 0, 0, 6, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(77, 3, 0, 0, 242, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(84, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(96, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(14, 0, 0, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(93, 3, 0, 0, 210, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(100, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(112, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(15, 0, 0, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(109, 3, 0, 0, 130, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(108, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(120, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(16, 0, 0, 0, 9, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 3, 0, 0, 218, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(124, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(136, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(17, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(133, 3, 0, 0, 146, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(136, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(148, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(18, 0, 0, 0, 10, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(145, 3, 0, 0, 146, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(148, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(160, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(19, 0, 0, 0, 11, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(157, 3, 0, 0, 66, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(152, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(164, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(20, 0, 0, 0, 12, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(161, 3, 0, 0, 82, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(160, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(172, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(21, 0, 0, 0, 13, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(169, 3, 0, 0, 218, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(176, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(188, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(22, 0, 0, 0, 9, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(185, 3, 0, 0, 218, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(192, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(204, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(23, 0, 0, 0, 14, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(201, 3, 0, 0, 82, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(200, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(212, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(24, 0, 0, 0, 15, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(209, 3, 0, 0, 170, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(212, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(224, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(25, 0, 0, 0, 15, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(221, 3, 0, 0, 122, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(220, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(232, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(115, 118, 73, 100, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 108, 111, 110, 97, 115, 115, 70),
          ::capnp::word(114, 101, 113, 117, 101, 110, 99, 121),
          ::capnp::word(73, 110, 100, 101, 120, 0, 0, 0),
          ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(111, 98, 115, 101, 114, 118, 97, 116),
          ::capnp::word(105, 111, 110, 83, 116, 97, 116, 101),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(233, 131, 108, 13, 154, 130, 30, 232),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(111, 98, 115, 101, 114, 118, 97, 116),
          ::capnp::word(105, 111, 110, 115, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 111, 111, 100, 79, 98, 115, 101),
          ::capnp::word(114, 118, 97, 116, 105, 111, 110, 115),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 112, 115, 80, 97, 114, 105, 116),
          ::capnp::word(121, 69, 114, 114, 111, 114, 67, 111),
          ::capnp::word(117, 110, 116, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 108, 111, 110, 97, 115, 115, 72),
          ::capnp::word(101, 109, 109, 105, 110, 103, 69, 114),
          ::capnp::word(114, 111, 114, 67, 111, 117, 110, 116),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 108, 116, 101, 114, 83, 116),
          ::capnp::word(97, 103, 101, 115, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 97, 114, 114, 105, 101, 114, 78),
          ::capnp::word(111, 105, 115, 101, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(108, 97, 116, 101, 110, 99, 121, 0),
          ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(112, 114, 101, 100, 101, 116, 101, 99),
          ::capnp::word(116, 73, 110, 116, 101, 114, 118, 97),
          ::capnp::word(108, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(112, 111, 115, 116, 100, 101, 116, 101),
          ::capnp::word(99, 116, 105, 111, 110, 115, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 77, 101, 97, 115, 117, 114),
          ::capnp::word(101, 109, 101, 110, 116, 73, 110, 116),
          ::capnp::word(101, 103, 114, 97, 108, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 77, 101, 97, 115, 117, 114),
          ::capnp::word(101, 109, 101, 110, 116, 70, 114, 97),
          ::capnp::word(99, 116, 105, 111, 110, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 84, 105, 109, 101, 85, 110),
          ::capnp::word(99, 101, 114, 116, 97, 105, 110, 116),
          ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 83, 112, 101, 101, 100, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 83, 112, 101, 101, 100, 85),
          ::capnp::word(110, 99, 101, 114, 116, 97, 105, 110),
          ::capnp::word(116, 121, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(109, 101, 97, 115, 117, 114, 101, 109),
          ::capnp::word(101, 110, 116, 83, 116, 97, 116, 117),
          ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(59, 232, 202, 27, 14, 1, 1, 229),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(109, 117, 108, 116, 105, 112, 97, 116),
          ::capnp::word(104, 69, 115, 116, 105, 109, 97, 116),
          ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(97, 122, 105, 109, 117, 116, 104, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(101, 108, 101, 118, 97, 116, 105, 111),
          ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 97, 114, 114, 105, 101, 114, 80),
          ::capnp::word(104, 97, 115, 101, 67, 121, 99, 108),
          ::capnp::word(101, 115, 73, 110, 116, 101, 103, 114),
          ::capnp::word(97, 108, 0, 0, 0, 0, 0, 0),
          ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 97, 114, 114, 105, 101, 114, 80),
          ::capnp::word(104, 97, 115, 101, 67, 121, 99, 108),
          ::capnp::word(101, 115, 70, 114, 97, 99, 116, 105),
          ::capnp::word(111, 110, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 110, 101, 83, 112, 101, 101),
          ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 110, 101, 83, 112, 101, 101),
          ::capnp::word(100, 85, 110, 99, 101, 114, 116, 97),
          ::capnp::word(105, 110, 116, 121, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 121, 99, 108, 101, 83, 108, 105),
          ::capnp::word(112, 67, 111, 117, 110, 116, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
          match index {
            0 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            1 => <i8 as ::capnp::introspect::Introspect>::introspect(),
            2 => <crate::cereal::log_capnp::qcom_gnss::SVObservationState as ::capnp::introspect::Introspect>::introspect(),
            3 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            4 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            5 => <u16 as ::capnp::introspect::Introspect>::introspect(),
            6 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            7 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            8 => <u16 as ::capnp::introspect::Introspect>::introspect(),
            9 => <i16 as ::capnp::introspect::Introspect>::introspect(),
            10 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            11 => <u16 as ::capnp::introspect::Introspect>::introspect(),
            12 => <u32 as ::capnp::introspect::Introspect>::introspect(),
            13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            14 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            16 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            17 => <crate::cereal::log_capnp::qcom_gnss::measurement_status::Owned as ::capnp::introspect::Introspect>::introspect(),
            18 => <u32 as ::capnp::introspect::Introspect>::introspect(),
            19 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            20 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            21 => <i32 as ::capnp::introspect::Introspect>::introspect(),
            22 => <u16 as ::capnp::introspect::Introspect>::introspect(),
            23 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            24 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            25 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            _ => panic!("invalid field index {}", index),
          }
        }
        pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
          panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
          encoded_node: &ENCODED_NODE,
          nonunion_members: NONUNION_MEMBERS,
          members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
          members_by_name: MEMBERS_BY_NAME,
        };
        pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
        pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
        pub static MEMBERS_BY_NAME : &[u16] = &[19,8,22,21,25,20,7,23,24,1,6,4,5,9,17,18,2,3,11,10,0,13,12,15,16,14];
        pub const TYPE_ID: u64 = 0xf10c_595a_e7bb_2c27;
      }
    }
  }

  pub mod clock_report {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_has_f_count(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_f_count(self) -> u32 {
        self.reader.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn get_has_gps_week(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.reader.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn get_has_gps_milliseconds(self) -> bool {
        self.reader.get_bool_field(2)
      }
      #[inline]
      pub fn get_gps_milliseconds(self) -> u32 {
        self.reader.get_data_field::<u32>(2)
      }
      #[inline]
      pub fn get_gps_time_bias(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_gps_clock_time_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_gps_clock_source(self) -> u8 {
        self.reader.get_data_field::<u8>(1)
      }
      #[inline]
      pub fn get_has_glonass_year(self) -> bool {
        self.reader.get_bool_field(3)
      }
      #[inline]
      pub fn get_glonass_year(self) -> u8 {
        self.reader.get_data_field::<u8>(20)
      }
      #[inline]
      pub fn get_has_glonass_day(self) -> bool {
        self.reader.get_bool_field(4)
      }
      #[inline]
      pub fn get_glonass_day(self) -> u16 {
        self.reader.get_data_field::<u16>(11)
      }
      #[inline]
      pub fn get_has_glonass_milliseconds(self) -> bool {
        self.reader.get_bool_field(5)
      }
      #[inline]
      pub fn get_glonass_milliseconds(self) -> u32 {
        self.reader.get_data_field::<u32>(6)
      }
      #[inline]
      pub fn get_glonass_time_bias(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_glonass_clock_time_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn get_glonass_clock_source(self) -> u8 {
        self.reader.get_data_field::<u8>(21)
      }
      #[inline]
      pub fn get_bds_week(self) -> u16 {
        self.reader.get_data_field::<u16>(18)
      }
      #[inline]
      pub fn get_bds_milliseconds(self) -> u32 {
        self.reader.get_data_field::<u32>(10)
      }
      #[inline]
      pub fn get_bds_time_bias(self) -> f32 {
        self.reader.get_data_field::<f32>(11)
      }
      #[inline]
      pub fn get_bds_clock_time_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(12)
      }
      #[inline]
      pub fn get_bds_clock_source(self) -> u8 {
        self.reader.get_data_field::<u8>(38)
      }
      #[inline]
      pub fn get_gal_week(self) -> u16 {
        self.reader.get_data_field::<u16>(26)
      }
      #[inline]
      pub fn get_gal_milliseconds(self) -> u32 {
        self.reader.get_data_field::<u32>(14)
      }
      #[inline]
      pub fn get_gal_time_bias(self) -> f32 {
        self.reader.get_data_field::<f32>(15)
      }
      #[inline]
      pub fn get_gal_clock_time_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(16)
      }
      #[inline]
      pub fn get_gal_clock_source(self) -> u8 {
        self.reader.get_data_field::<u8>(39)
      }
      #[inline]
      pub fn get_clock_frequency_bias(self) -> f32 {
        self.reader.get_data_field::<f32>(17)
      }
      #[inline]
      pub fn get_clock_frequency_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(18)
      }
      #[inline]
      pub fn get_frequency_source(self) -> u8 {
        self.reader.get_data_field::<u8>(54)
      }
      #[inline]
      pub fn get_gps_leap_seconds(self) -> u8 {
        self.reader.get_data_field::<u8>(55)
      }
      #[inline]
      pub fn get_gps_leap_seconds_uncertainty(self) -> u8 {
        self.reader.get_data_field::<u8>(76)
      }
      #[inline]
      pub fn get_gps_leap_seconds_source(self) -> u8 {
        self.reader.get_data_field::<u8>(77)
      }
      #[inline]
      pub fn get_gps_to_glonass_time_bias_milliseconds(self) -> f32 {
        self.reader.get_data_field::<f32>(20)
      }
      #[inline]
      pub fn get_gps_to_glonass_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(21)
      }
      #[inline]
      pub fn get_gps_to_bds_time_bias_milliseconds(self) -> f32 {
        self.reader.get_data_field::<f32>(22)
      }
      #[inline]
      pub fn get_gps_to_bds_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(23)
      }
      #[inline]
      pub fn get_bds_to_glo_time_bias_milliseconds(self) -> f32 {
        self.reader.get_data_field::<f32>(24)
      }
      #[inline]
      pub fn get_bds_to_glo_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(25)
      }
      #[inline]
      pub fn get_gps_to_gal_time_bias_milliseconds(self) -> f32 {
        self.reader.get_data_field::<f32>(26)
      }
      #[inline]
      pub fn get_gps_to_gal_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(27)
      }
      #[inline]
      pub fn get_gal_to_glo_time_bias_milliseconds(self) -> f32 {
        self.reader.get_data_field::<f32>(28)
      }
      #[inline]
      pub fn get_gal_to_glo_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(29)
      }
      #[inline]
      pub fn get_gal_to_bds_time_bias_milliseconds(self) -> f32 {
        self.reader.get_data_field::<f32>(30)
      }
      #[inline]
      pub fn get_gal_to_bds_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(31)
      }
      #[inline]
      pub fn get_has_rtc_time(self) -> bool {
        self.reader.get_bool_field(6)
      }
      #[inline]
      pub fn get_system_rtc_time(self) -> u32 {
        self.reader.get_data_field::<u32>(32)
      }
      #[inline]
      pub fn get_f_count_offset(self) -> u32 {
        self.reader.get_data_field::<u32>(33)
      }
      #[inline]
      pub fn get_lpm_rtc_count(self) -> u32 {
        self.reader.get_data_field::<u32>(34)
      }
      #[inline]
      pub fn get_clock_resets(self) -> u32 {
        self.reader.get_data_field::<u32>(35)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 18, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_has_f_count(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_has_f_count(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_f_count(self) -> u32 {
        self.builder.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn set_f_count(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(1, value);
      }
      #[inline]
      pub fn get_has_gps_week(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_has_gps_week(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.builder.get_data_field::<u16>(1)
      }
      #[inline]
      pub fn set_gps_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(1, value);
      }
      #[inline]
      pub fn get_has_gps_milliseconds(self) -> bool {
        self.builder.get_bool_field(2)
      }
      #[inline]
      pub fn set_has_gps_milliseconds(&mut self, value: bool)  {
        self.builder.set_bool_field(2, value);
      }
      #[inline]
      pub fn get_gps_milliseconds(self) -> u32 {
        self.builder.get_data_field::<u32>(2)
      }
      #[inline]
      pub fn set_gps_milliseconds(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(2, value);
      }
      #[inline]
      pub fn get_gps_time_bias(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_gps_time_bias(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_gps_clock_time_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_gps_clock_time_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_gps_clock_source(self) -> u8 {
        self.builder.get_data_field::<u8>(1)
      }
      #[inline]
      pub fn set_gps_clock_source(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(1, value);
      }
      #[inline]
      pub fn get_has_glonass_year(self) -> bool {
        self.builder.get_bool_field(3)
      }
      #[inline]
      pub fn set_has_glonass_year(&mut self, value: bool)  {
        self.builder.set_bool_field(3, value);
      }
      #[inline]
      pub fn get_glonass_year(self) -> u8 {
        self.builder.get_data_field::<u8>(20)
      }
      #[inline]
      pub fn set_glonass_year(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(20, value);
      }
      #[inline]
      pub fn get_has_glonass_day(self) -> bool {
        self.builder.get_bool_field(4)
      }
      #[inline]
      pub fn set_has_glonass_day(&mut self, value: bool)  {
        self.builder.set_bool_field(4, value);
      }
      #[inline]
      pub fn get_glonass_day(self) -> u16 {
        self.builder.get_data_field::<u16>(11)
      }
      #[inline]
      pub fn set_glonass_day(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(11, value);
      }
      #[inline]
      pub fn get_has_glonass_milliseconds(self) -> bool {
        self.builder.get_bool_field(5)
      }
      #[inline]
      pub fn set_has_glonass_milliseconds(&mut self, value: bool)  {
        self.builder.set_bool_field(5, value);
      }
      #[inline]
      pub fn get_glonass_milliseconds(self) -> u32 {
        self.builder.get_data_field::<u32>(6)
      }
      #[inline]
      pub fn set_glonass_milliseconds(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(6, value);
      }
      #[inline]
      pub fn get_glonass_time_bias(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_glonass_time_bias(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_glonass_clock_time_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn set_glonass_clock_time_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(8, value);
      }
      #[inline]
      pub fn get_glonass_clock_source(self) -> u8 {
        self.builder.get_data_field::<u8>(21)
      }
      #[inline]
      pub fn set_glonass_clock_source(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(21, value);
      }
      #[inline]
      pub fn get_bds_week(self) -> u16 {
        self.builder.get_data_field::<u16>(18)
      }
      #[inline]
      pub fn set_bds_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(18, value);
      }
      #[inline]
      pub fn get_bds_milliseconds(self) -> u32 {
        self.builder.get_data_field::<u32>(10)
      }
      #[inline]
      pub fn set_bds_milliseconds(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(10, value);
      }
      #[inline]
      pub fn get_bds_time_bias(self) -> f32 {
        self.builder.get_data_field::<f32>(11)
      }
      #[inline]
      pub fn set_bds_time_bias(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(11, value);
      }
      #[inline]
      pub fn get_bds_clock_time_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(12)
      }
      #[inline]
      pub fn set_bds_clock_time_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(12, value);
      }
      #[inline]
      pub fn get_bds_clock_source(self) -> u8 {
        self.builder.get_data_field::<u8>(38)
      }
      #[inline]
      pub fn set_bds_clock_source(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(38, value);
      }
      #[inline]
      pub fn get_gal_week(self) -> u16 {
        self.builder.get_data_field::<u16>(26)
      }
      #[inline]
      pub fn set_gal_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(26, value);
      }
      #[inline]
      pub fn get_gal_milliseconds(self) -> u32 {
        self.builder.get_data_field::<u32>(14)
      }
      #[inline]
      pub fn set_gal_milliseconds(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(14, value);
      }
      #[inline]
      pub fn get_gal_time_bias(self) -> f32 {
        self.builder.get_data_field::<f32>(15)
      }
      #[inline]
      pub fn set_gal_time_bias(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(15, value);
      }
      #[inline]
      pub fn get_gal_clock_time_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(16)
      }
      #[inline]
      pub fn set_gal_clock_time_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(16, value);
      }
      #[inline]
      pub fn get_gal_clock_source(self) -> u8 {
        self.builder.get_data_field::<u8>(39)
      }
      #[inline]
      pub fn set_gal_clock_source(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(39, value);
      }
      #[inline]
      pub fn get_clock_frequency_bias(self) -> f32 {
        self.builder.get_data_field::<f32>(17)
      }
      #[inline]
      pub fn set_clock_frequency_bias(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(17, value);
      }
      #[inline]
      pub fn get_clock_frequency_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(18)
      }
      #[inline]
      pub fn set_clock_frequency_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(18, value);
      }
      #[inline]
      pub fn get_frequency_source(self) -> u8 {
        self.builder.get_data_field::<u8>(54)
      }
      #[inline]
      pub fn set_frequency_source(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(54, value);
      }
      #[inline]
      pub fn get_gps_leap_seconds(self) -> u8 {
        self.builder.get_data_field::<u8>(55)
      }
      #[inline]
      pub fn set_gps_leap_seconds(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(55, value);
      }
      #[inline]
      pub fn get_gps_leap_seconds_uncertainty(self) -> u8 {
        self.builder.get_data_field::<u8>(76)
      }
      #[inline]
      pub fn set_gps_leap_seconds_uncertainty(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(76, value);
      }
      #[inline]
      pub fn get_gps_leap_seconds_source(self) -> u8 {
        self.builder.get_data_field::<u8>(77)
      }
      #[inline]
      pub fn set_gps_leap_seconds_source(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(77, value);
      }
      #[inline]
      pub fn get_gps_to_glonass_time_bias_milliseconds(self) -> f32 {
        self.builder.get_data_field::<f32>(20)
      }
      #[inline]
      pub fn set_gps_to_glonass_time_bias_milliseconds(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(20, value);
      }
      #[inline]
      pub fn get_gps_to_glonass_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(21)
      }
      #[inline]
      pub fn set_gps_to_glonass_time_bias_milliseconds_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(21, value);
      }
      #[inline]
      pub fn get_gps_to_bds_time_bias_milliseconds(self) -> f32 {
        self.builder.get_data_field::<f32>(22)
      }
      #[inline]
      pub fn set_gps_to_bds_time_bias_milliseconds(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(22, value);
      }
      #[inline]
      pub fn get_gps_to_bds_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(23)
      }
      #[inline]
      pub fn set_gps_to_bds_time_bias_milliseconds_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(23, value);
      }
      #[inline]
      pub fn get_bds_to_glo_time_bias_milliseconds(self) -> f32 {
        self.builder.get_data_field::<f32>(24)
      }
      #[inline]
      pub fn set_bds_to_glo_time_bias_milliseconds(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(24, value);
      }
      #[inline]
      pub fn get_bds_to_glo_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(25)
      }
      #[inline]
      pub fn set_bds_to_glo_time_bias_milliseconds_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(25, value);
      }
      #[inline]
      pub fn get_gps_to_gal_time_bias_milliseconds(self) -> f32 {
        self.builder.get_data_field::<f32>(26)
      }
      #[inline]
      pub fn set_gps_to_gal_time_bias_milliseconds(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(26, value);
      }
      #[inline]
      pub fn get_gps_to_gal_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(27)
      }
      #[inline]
      pub fn set_gps_to_gal_time_bias_milliseconds_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(27, value);
      }
      #[inline]
      pub fn get_gal_to_glo_time_bias_milliseconds(self) -> f32 {
        self.builder.get_data_field::<f32>(28)
      }
      #[inline]
      pub fn set_gal_to_glo_time_bias_milliseconds(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(28, value);
      }
      #[inline]
      pub fn get_gal_to_glo_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(29)
      }
      #[inline]
      pub fn set_gal_to_glo_time_bias_milliseconds_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(29, value);
      }
      #[inline]
      pub fn get_gal_to_bds_time_bias_milliseconds(self) -> f32 {
        self.builder.get_data_field::<f32>(30)
      }
      #[inline]
      pub fn set_gal_to_bds_time_bias_milliseconds(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(30, value);
      }
      #[inline]
      pub fn get_gal_to_bds_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(31)
      }
      #[inline]
      pub fn set_gal_to_bds_time_bias_milliseconds_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(31, value);
      }
      #[inline]
      pub fn get_has_rtc_time(self) -> bool {
        self.builder.get_bool_field(6)
      }
      #[inline]
      pub fn set_has_rtc_time(&mut self, value: bool)  {
        self.builder.set_bool_field(6, value);
      }
      #[inline]
      pub fn get_system_rtc_time(self) -> u32 {
        self.builder.get_data_field::<u32>(32)
      }
      #[inline]
      pub fn set_system_rtc_time(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(32, value);
      }
      #[inline]
      pub fn get_f_count_offset(self) -> u32 {
        self.builder.get_data_field::<u32>(33)
      }
      #[inline]
      pub fn set_f_count_offset(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(33, value);
      }
      #[inline]
      pub fn get_lpm_rtc_count(self) -> u32 {
        self.builder.get_data_field::<u32>(34)
      }
      #[inline]
      pub fn set_lpm_rtc_count(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(34, value);
      }
      #[inline]
      pub fn get_clock_resets(self) -> u32 {
        self.builder.get_data_field::<u32>(35)
      }
      #[inline]
      pub fn set_clock_resets(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(35, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 877] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(11, 79, 143, 221, 74, 94, 150, 202),
        ::capnp::word(19, 0, 0, 0, 1, 0, 18, 0),
        ::capnp::word(193, 81, 174, 7, 75, 103, 148, 222),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 47, 11, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
        ::capnp::word(115, 115, 46, 67, 108, 111, 99, 107),
        ::capnp::word(82, 101, 112, 111, 114, 116, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(133, 5, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(132, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 5, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(136, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 5, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(144, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(156, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(153, 5, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(148, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(160, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(157, 5, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 5, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 5, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 5, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 5, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 5, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 5, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 5, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 5, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 5, 0, 0, 186, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 5, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 5, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 5, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 6, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 6, 0, 0, 226, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(20, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(32, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(17, 0, 0, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 6, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(18, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 6, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(19, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 6, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 6, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(52, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(21, 0, 0, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 6, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(76, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(22, 0, 0, 0, 38, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(73, 6, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(23, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(81, 6, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(76, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(88, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(24, 0, 0, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(85, 6, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(84, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(96, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(25, 0, 0, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(93, 6, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(26, 0, 0, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 6, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(27, 0, 0, 0, 39, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(113, 6, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(124, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 6, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(136, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(29, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(133, 6, 0, 0, 210, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(30, 0, 0, 0, 54, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(149, 6, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(148, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(160, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(31, 0, 0, 0, 55, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(157, 6, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(32, 0, 0, 0, 76, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 6, 0, 0, 210, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(172, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(184, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(33, 0, 0, 0, 77, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 6, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(34, 0, 0, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 6, 0, 0, 10, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(35, 0, 0, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 35, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 6, 0, 0, 98, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 6, 0, 0, 2, 0, 1, 0),
        ::capnp::word(36, 0, 0, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 36, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 6, 0, 0, 234, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(244, 6, 0, 0, 3, 0, 1, 0),
        ::capnp::word(0, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(37, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 37, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(253, 6, 0, 0, 66, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(38, 0, 0, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 38, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(17, 7, 0, 0, 234, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(39, 0, 0, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 39, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 7, 0, 0, 66, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(40, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 40, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 7, 0, 0, 234, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(60, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(72, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(41, 0, 0, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 41, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 7, 0, 0, 66, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(80, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(42, 0, 0, 0, 28, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 7, 0, 0, 234, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(43, 0, 0, 0, 29, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 43, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 7, 0, 0, 66, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(128, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(44, 0, 0, 0, 30, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 44, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(125, 7, 0, 0, 234, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(132, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(45, 0, 0, 0, 31, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 45, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 7, 0, 0, 66, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(164, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(46, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 46, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(161, 7, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(47, 0, 0, 0, 32, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 47, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 7, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(48, 0, 0, 0, 33, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 48, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 7, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(49, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 49, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 7, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(50, 0, 0, 0, 35, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 7, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(192, 7, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 7, 0, 0, 2, 0, 1, 0),
        ::capnp::word(104, 97, 115, 70, 67, 111, 117, 110),
        ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 67, 111, 117, 110, 116, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 71, 112, 115, 87, 101),
        ::capnp::word(101, 107, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 71, 112, 115, 77, 105),
        ::capnp::word(108, 108, 105, 115, 101, 99, 111, 110),
        ::capnp::word(100, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 77, 105, 108, 108, 105),
        ::capnp::word(115, 101, 99, 111, 110, 100, 115, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 105, 109, 101, 66),
        ::capnp::word(105, 97, 115, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 67, 108, 111, 99, 107),
        ::capnp::word(84, 105, 109, 101, 85, 110, 99, 101),
        ::capnp::word(114, 116, 97, 105, 110, 116, 121, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 67, 108, 111, 99, 107),
        ::capnp::word(83, 111, 117, 114, 99, 101, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 71, 108, 111, 110, 97),
        ::capnp::word(115, 115, 89, 101, 97, 114, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 89),
        ::capnp::word(101, 97, 114, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 71, 108, 111, 110, 97),
        ::capnp::word(115, 115, 68, 97, 121, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 68),
        ::capnp::word(97, 121, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 71, 108, 111, 110, 97),
        ::capnp::word(115, 115, 77, 105, 108, 108, 105, 115),
        ::capnp::word(101, 99, 111, 110, 100, 115, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 77),
        ::capnp::word(105, 108, 108, 105, 115, 101, 99, 111),
        ::capnp::word(110, 100, 115, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 84),
        ::capnp::word(105, 109, 101, 66, 105, 97, 115, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 67),
        ::capnp::word(108, 111, 99, 107, 84, 105, 109, 101),
        ::capnp::word(85, 110, 99, 101, 114, 116, 97, 105),
        ::capnp::word(110, 116, 121, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 67),
        ::capnp::word(108, 111, 99, 107, 83, 111, 117, 114),
        ::capnp::word(99, 101, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 100, 115, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 100, 115, 77, 105, 108, 108, 105),
        ::capnp::word(115, 101, 99, 111, 110, 100, 115, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 100, 115, 84, 105, 109, 101, 66),
        ::capnp::word(105, 97, 115, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 100, 115, 67, 108, 111, 99, 107),
        ::capnp::word(84, 105, 109, 101, 85, 110, 99, 101),
        ::capnp::word(114, 116, 97, 105, 110, 116, 121, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 100, 115, 67, 108, 111, 99, 107),
        ::capnp::word(83, 111, 117, 114, 99, 101, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 108, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 108, 77, 105, 108, 108, 105),
        ::capnp::word(115, 101, 99, 111, 110, 100, 115, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 108, 84, 105, 109, 101, 66),
        ::capnp::word(105, 97, 115, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 108, 67, 108, 111, 99, 107),
        ::capnp::word(84, 105, 109, 101, 85, 110, 99, 101),
        ::capnp::word(114, 116, 97, 105, 110, 116, 121, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 108, 67, 108, 111, 99, 107),
        ::capnp::word(83, 111, 117, 114, 99, 101, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 108, 111, 99, 107, 70, 114, 101),
        ::capnp::word(113, 117, 101, 110, 99, 121, 66, 105),
        ::capnp::word(97, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 108, 111, 99, 107, 70, 114, 101),
        ::capnp::word(113, 117, 101, 110, 99, 121, 85, 110),
        ::capnp::word(99, 101, 114, 116, 97, 105, 110, 116),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 101, 113, 117, 101, 110, 99),
        ::capnp::word(121, 83, 111, 117, 114, 99, 101, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 76, 101, 97, 112, 83),
        ::capnp::word(101, 99, 111, 110, 100, 115, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 76, 101, 97, 112, 83),
        ::capnp::word(101, 99, 111, 110, 100, 115, 85, 110),
        ::capnp::word(99, 101, 114, 116, 97, 105, 110, 116),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 76, 101, 97, 112, 83),
        ::capnp::word(101, 99, 111, 110, 100, 115, 83, 111),
        ::capnp::word(117, 114, 99, 101, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 111, 71, 108, 111),
        ::capnp::word(110, 97, 115, 115, 84, 105, 109, 101),
        ::capnp::word(66, 105, 97, 115, 77, 105, 108, 108),
        ::capnp::word(105, 115, 101, 99, 111, 110, 100, 115),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 111, 71, 108, 111),
        ::capnp::word(110, 97, 115, 115, 84, 105, 109, 101),
        ::capnp::word(66, 105, 97, 115, 77, 105, 108, 108),
        ::capnp::word(105, 115, 101, 99, 111, 110, 100, 115),
        ::capnp::word(85, 110, 99, 101, 114, 116, 97, 105),
        ::capnp::word(110, 116, 121, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 111, 66, 100, 115),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 111, 66, 100, 115),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 85, 110, 99, 101),
        ::capnp::word(114, 116, 97, 105, 110, 116, 121, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 100, 115, 84, 111, 71, 108, 111),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 100, 115, 84, 111, 71, 108, 111),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 85, 110, 99, 101),
        ::capnp::word(114, 116, 97, 105, 110, 116, 121, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 111, 71, 97, 108),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 111, 71, 97, 108),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 85, 110, 99, 101),
        ::capnp::word(114, 116, 97, 105, 110, 116, 121, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 108, 84, 111, 71, 108, 111),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 108, 84, 111, 71, 108, 111),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 85, 110, 99, 101),
        ::capnp::word(114, 116, 97, 105, 110, 116, 121, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 108, 84, 111, 66, 100, 115),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 97, 108, 84, 111, 66, 100, 115),
        ::capnp::word(84, 105, 109, 101, 66, 105, 97, 115),
        ::capnp::word(77, 105, 108, 108, 105, 115, 101, 99),
        ::capnp::word(111, 110, 100, 115, 85, 110, 99, 101),
        ::capnp::word(114, 116, 97, 105, 110, 116, 121, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 82, 116, 99, 84, 105),
        ::capnp::word(109, 101, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 121, 115, 116, 101, 109, 82, 116),
        ::capnp::word(99, 84, 105, 109, 101, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 67, 111, 117, 110, 116, 79, 102),
        ::capnp::word(102, 115, 101, 116, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 112, 109, 82, 116, 99, 67, 111),
        ::capnp::word(117, 110, 116, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 108, 111, 99, 107, 82, 101, 115),
        ::capnp::word(101, 116, 115, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <bool as ::capnp::introspect::Introspect>::introspect(),
          3 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          4 => <bool as ::capnp::introspect::Introspect>::introspect(),
          5 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          9 => <bool as ::capnp::introspect::Introspect>::introspect(),
          10 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          11 => <bool as ::capnp::introspect::Introspect>::introspect(),
          12 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          13 => <bool as ::capnp::introspect::Introspect>::introspect(),
          14 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          16 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          17 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          18 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          19 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          20 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          21 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          22 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          23 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          24 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          25 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          26 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          27 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          28 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          29 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          30 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          31 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          32 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          33 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          34 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          35 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          36 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          37 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          38 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          39 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          40 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          41 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          42 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          43 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          44 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          45 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          46 => <bool as ::capnp::introspect::Introspect>::introspect(),
          47 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          48 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          49 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          50 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[22,21,19,20,38,39,18,28,29,50,1,48,30,27,26,24,25,44,45,42,43,23,17,16,12,14,15,10,8,7,31,33,32,5,6,36,37,40,41,34,35,3,0,11,13,9,4,2,46,49,47];
      pub const TYPE_ID: u64 = 0xca96_5e4a_dd8f_4f0b;
    }
  }

  pub mod dr_measurement_report {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_reason(self) -> u8 {
        self.reader.get_data_field::<u8>(0)
      }
      #[inline]
      pub fn get_seq_num(self) -> u8 {
        self.reader.get_data_field::<u8>(1)
      }
      #[inline]
      pub fn get_seq_max(self) -> u8 {
        self.reader.get_data_field::<u8>(2)
      }
      #[inline]
      pub fn get_rf_loss(self) -> u16 {
        self.reader.get_data_field::<u16>(2)
      }
      #[inline]
      pub fn get_system_rtc_valid(self) -> bool {
        self.reader.get_bool_field(24)
      }
      #[inline]
      pub fn get_f_count(self) -> u32 {
        self.reader.get_data_field::<u32>(2)
      }
      #[inline]
      pub fn get_clock_resets(self) -> u32 {
        self.reader.get_data_field::<u32>(3)
      }
      #[inline]
      pub fn get_system_rtc_time(self) -> u64 {
        self.reader.get_data_field::<u64>(2)
      }
      #[inline]
      pub fn get_gps_leap_seconds(self) -> u8 {
        self.reader.get_data_field::<u8>(6)
      }
      #[inline]
      pub fn get_gps_leap_seconds_uncertainty(self) -> u8 {
        self.reader.get_data_field::<u8>(7)
      }
      #[inline]
      pub fn get_gps_to_glonass_time_bias_milliseconds(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_gps_to_glonass_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.reader.get_data_field::<u16>(16)
      }
      #[inline]
      pub fn get_gps_milliseconds(self) -> u32 {
        self.reader.get_data_field::<u32>(9)
      }
      #[inline]
      pub fn get_gps_time_bias_ms(self) -> u32 {
        self.reader.get_data_field::<u32>(10)
      }
      #[inline]
      pub fn get_gps_clock_time_uncertainty_ms(self) -> u32 {
        self.reader.get_data_field::<u32>(11)
      }
      #[inline]
      pub fn get_gps_clock_source(self) -> u8 {
        self.reader.get_data_field::<u8>(34)
      }
      #[inline]
      pub fn get_glonass_clock_source(self) -> u8 {
        self.reader.get_data_field::<u8>(35)
      }
      #[inline]
      pub fn get_glonass_year(self) -> u8 {
        self.reader.get_data_field::<u8>(48)
      }
      #[inline]
      pub fn get_glonass_day(self) -> u16 {
        self.reader.get_data_field::<u16>(25)
      }
      #[inline]
      pub fn get_glonass_milliseconds(self) -> u32 {
        self.reader.get_data_field::<u32>(13)
      }
      #[inline]
      pub fn get_glonass_time_bias(self) -> f32 {
        self.reader.get_data_field::<f32>(14)
      }
      #[inline]
      pub fn get_glonass_clock_time_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(15)
      }
      #[inline]
      pub fn get_clock_frequency_bias(self) -> f32 {
        self.reader.get_data_field::<f32>(16)
      }
      #[inline]
      pub fn get_clock_frequency_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(17)
      }
      #[inline]
      pub fn get_frequency_source(self) -> u8 {
        self.reader.get_data_field::<u8>(49)
      }
      #[inline]
      pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::qcom_gnss::MeasurementSource,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(36))
      }
      #[inline]
      pub fn get_sv(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::s_v::Owned>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_sv(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 10, pointers: 1 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_reason(self) -> u8 {
        self.builder.get_data_field::<u8>(0)
      }
      #[inline]
      pub fn set_reason(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(0, value);
      }
      #[inline]
      pub fn get_seq_num(self) -> u8 {
        self.builder.get_data_field::<u8>(1)
      }
      #[inline]
      pub fn set_seq_num(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(1, value);
      }
      #[inline]
      pub fn get_seq_max(self) -> u8 {
        self.builder.get_data_field::<u8>(2)
      }
      #[inline]
      pub fn set_seq_max(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(2, value);
      }
      #[inline]
      pub fn get_rf_loss(self) -> u16 {
        self.builder.get_data_field::<u16>(2)
      }
      #[inline]
      pub fn set_rf_loss(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(2, value);
      }
      #[inline]
      pub fn get_system_rtc_valid(self) -> bool {
        self.builder.get_bool_field(24)
      }
      #[inline]
      pub fn set_system_rtc_valid(&mut self, value: bool)  {
        self.builder.set_bool_field(24, value);
      }
      #[inline]
      pub fn get_f_count(self) -> u32 {
        self.builder.get_data_field::<u32>(2)
      }
      #[inline]
      pub fn set_f_count(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(2, value);
      }
      #[inline]
      pub fn get_clock_resets(self) -> u32 {
        self.builder.get_data_field::<u32>(3)
      }
      #[inline]
      pub fn set_clock_resets(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(3, value);
      }
      #[inline]
      pub fn get_system_rtc_time(self) -> u64 {
        self.builder.get_data_field::<u64>(2)
      }
      #[inline]
      pub fn set_system_rtc_time(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(2, value);
      }
      #[inline]
      pub fn get_gps_leap_seconds(self) -> u8 {
        self.builder.get_data_field::<u8>(6)
      }
      #[inline]
      pub fn set_gps_leap_seconds(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(6, value);
      }
      #[inline]
      pub fn get_gps_leap_seconds_uncertainty(self) -> u8 {
        self.builder.get_data_field::<u8>(7)
      }
      #[inline]
      pub fn set_gps_leap_seconds_uncertainty(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(7, value);
      }
      #[inline]
      pub fn get_gps_to_glonass_time_bias_milliseconds(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_gps_to_glonass_time_bias_milliseconds(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_gps_to_glonass_time_bias_milliseconds_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_gps_to_glonass_time_bias_milliseconds_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.builder.get_data_field::<u16>(16)
      }
      #[inline]
      pub fn set_gps_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(16, value);
      }
      #[inline]
      pub fn get_gps_milliseconds(self) -> u32 {
        self.builder.get_data_field::<u32>(9)
      }
      #[inline]
      pub fn set_gps_milliseconds(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(9, value);
      }
      #[inline]
      pub fn get_gps_time_bias_ms(self) -> u32 {
        self.builder.get_data_field::<u32>(10)
      }
      #[inline]
      pub fn set_gps_time_bias_ms(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(10, value);
      }
      #[inline]
      pub fn get_gps_clock_time_uncertainty_ms(self) -> u32 {
        self.builder.get_data_field::<u32>(11)
      }
      #[inline]
      pub fn set_gps_clock_time_uncertainty_ms(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(11, value);
      }
      #[inline]
      pub fn get_gps_clock_source(self) -> u8 {
        self.builder.get_data_field::<u8>(34)
      }
      #[inline]
      pub fn set_gps_clock_source(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(34, value);
      }
      #[inline]
      pub fn get_glonass_clock_source(self) -> u8 {
        self.builder.get_data_field::<u8>(35)
      }
      #[inline]
      pub fn set_glonass_clock_source(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(35, value);
      }
      #[inline]
      pub fn get_glonass_year(self) -> u8 {
        self.builder.get_data_field::<u8>(48)
      }
      #[inline]
      pub fn set_glonass_year(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(48, value);
      }
      #[inline]
      pub fn get_glonass_day(self) -> u16 {
        self.builder.get_data_field::<u16>(25)
      }
      #[inline]
      pub fn set_glonass_day(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(25, value);
      }
      #[inline]
      pub fn get_glonass_milliseconds(self) -> u32 {
        self.builder.get_data_field::<u32>(13)
      }
      #[inline]
      pub fn set_glonass_milliseconds(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(13, value);
      }
      #[inline]
      pub fn get_glonass_time_bias(self) -> f32 {
        self.builder.get_data_field::<f32>(14)
      }
      #[inline]
      pub fn set_glonass_time_bias(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(14, value);
      }
      #[inline]
      pub fn get_glonass_clock_time_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(15)
      }
      #[inline]
      pub fn set_glonass_clock_time_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(15, value);
      }
      #[inline]
      pub fn get_clock_frequency_bias(self) -> f32 {
        self.builder.get_data_field::<f32>(16)
      }
      #[inline]
      pub fn set_clock_frequency_bias(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(16, value);
      }
      #[inline]
      pub fn get_clock_frequency_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(17)
      }
      #[inline]
      pub fn set_clock_frequency_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(17, value);
      }
      #[inline]
      pub fn get_frequency_source(self) -> u8 {
        self.builder.get_data_field::<u8>(49)
      }
      #[inline]
      pub fn set_frequency_source(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(49, value);
      }
      #[inline]
      pub fn get_source(self) -> ::core::result::Result<crate::cereal::log_capnp::qcom_gnss::MeasurementSource,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(36))
      }
      #[inline]
      pub fn set_source(&mut self, value: crate::cereal::log_capnp::qcom_gnss::MeasurementSource)  {
        self.builder.set_data_field::<u16>(36, value as u16);
      }
      #[inline]
      pub fn get_sv(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::s_v::Owned>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_sv(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::s_v::Owned>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_sv(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::s_v::Owned> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_sv(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 484] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(92, 199, 198, 69, 148, 195, 83, 128),
        ::capnp::word(19, 0, 0, 0, 1, 0, 10, 0),
        ::capnp::word(193, 81, 174, 7, 75, 103, 148, 222),
        ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 58, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 0, 0, 0, 39, 6, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
        ::capnp::word(115, 115, 46, 68, 114, 77, 101, 97),
        ::capnp::word(115, 117, 114, 101, 109, 101, 110, 116),
        ::capnp::word(82, 101, 112, 111, 114, 116, 0, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(156, 69, 191, 140, 223, 129, 139, 240),
        ::capnp::word(1, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(83, 86, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(17, 3, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(20, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(32, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 3, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(28, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(40, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 3, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 3, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 3, 0, 0, 210, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(60, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(72, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 3, 0, 0, 10, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(80, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 3, 0, 0, 98, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(113, 3, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 3, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(128, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(125, 3, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(136, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(133, 3, 0, 0, 210, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(149, 3, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(148, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(160, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(17, 0, 0, 0, 35, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(157, 3, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(18, 0, 0, 0, 48, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 3, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(19, 0, 0, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 3, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 3, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(21, 0, 0, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 3, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(22, 0, 0, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 3, 0, 0, 226, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(23, 0, 0, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 3, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(24, 0, 0, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 3, 0, 0, 210, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(25, 0, 0, 0, 49, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 3, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(248, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(26, 0, 0, 0, 36, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 4, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(27, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 4, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 4, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 4, 0, 0, 2, 0, 1, 0),
        ::capnp::word(114, 101, 97, 115, 111, 110, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 101, 113, 78, 117, 109, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 101, 113, 77, 97, 120, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 102, 76, 111, 115, 115, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 121, 115, 116, 101, 109, 82, 116),
        ::capnp::word(99, 86, 97, 108, 105, 100, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 67, 111, 117, 110, 116, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 108, 111, 99, 107, 82, 101, 115),
        ::capnp::word(101, 116, 115, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 121, 115, 116, 101, 109, 82, 116),
        ::capnp::word(99, 84, 105, 109, 101, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 76, 101, 97, 112, 83),
        ::capnp::word(101, 99, 111, 110, 100, 115, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 76, 101, 97, 112, 83),
        ::capnp::word(101, 99, 111, 110, 100, 115, 85, 110),
        ::capnp::word(99, 101, 114, 116, 97, 105, 110, 116),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 111, 71, 108, 111),
        ::capnp::word(110, 97, 115, 115, 84, 105, 109, 101),
        ::capnp::word(66, 105, 97, 115, 77, 105, 108, 108),
        ::capnp::word(105, 115, 101, 99, 111, 110, 100, 115),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 111, 71, 108, 111),
        ::capnp::word(110, 97, 115, 115, 84, 105, 109, 101),
        ::capnp::word(66, 105, 97, 115, 77, 105, 108, 108),
        ::capnp::word(105, 115, 101, 99, 111, 110, 100, 115),
        ::capnp::word(85, 110, 99, 101, 114, 116, 97, 105),
        ::capnp::word(110, 116, 121, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 77, 105, 108, 108, 105),
        ::capnp::word(115, 101, 99, 111, 110, 100, 115, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 105, 109, 101, 66),
        ::capnp::word(105, 97, 115, 77, 115, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 67, 108, 111, 99, 107),
        ::capnp::word(84, 105, 109, 101, 85, 110, 99, 101),
        ::capnp::word(114, 116, 97, 105, 110, 116, 121, 77),
        ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 67, 108, 111, 99, 107),
        ::capnp::word(83, 111, 117, 114, 99, 101, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 67),
        ::capnp::word(108, 111, 99, 107, 83, 111, 117, 114),
        ::capnp::word(99, 101, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 89),
        ::capnp::word(101, 97, 114, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 68),
        ::capnp::word(97, 121, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 77),
        ::capnp::word(105, 108, 108, 105, 115, 101, 99, 111),
        ::capnp::word(110, 100, 115, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 84),
        ::capnp::word(105, 109, 101, 66, 105, 97, 115, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 108, 111, 110, 97, 115, 115, 67),
        ::capnp::word(108, 111, 99, 107, 84, 105, 109, 101),
        ::capnp::word(85, 110, 99, 101, 114, 116, 97, 105),
        ::capnp::word(110, 116, 121, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 108, 111, 99, 107, 70, 114, 101),
        ::capnp::word(113, 117, 101, 110, 99, 121, 66, 105),
        ::capnp::word(97, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 108, 111, 99, 107, 70, 114, 101),
        ::capnp::word(113, 117, 101, 110, 99, 121, 85, 110),
        ::capnp::word(99, 101, 114, 116, 97, 105, 110, 116),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 101, 113, 117, 101, 110, 99),
        ::capnp::word(121, 83, 111, 117, 114, 99, 101, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 111, 117, 114, 99, 101, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(238, 167, 173, 250, 182, 18, 26, 215),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 118, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 69, 191, 140, 223, 129, 139, 240),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          1 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          2 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          3 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          4 => <bool as ::capnp::introspect::Introspect>::introspect(),
          5 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          8 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          9 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          11 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          12 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          13 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          14 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          15 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          16 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          17 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          18 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          19 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          20 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          21 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          22 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          23 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          24 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          25 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          26 => <crate::cereal::log_capnp::qcom_gnss::MeasurementSource as ::capnp::introspect::Introspect>::introspect(),
          27 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::qcom_gnss::dr_measurement_report::s_v::Owned> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[23,24,6,5,25,17,22,19,20,21,18,16,15,8,9,13,14,10,11,12,0,3,2,1,26,27,7,4];
      pub const TYPE_ID: u64 = 0x8053_c394_45c6_c75c;
    }

    pub mod s_v {
      #[derive(Copy, Clone)]
      pub struct Owned(());
      impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
      impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
      impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

      pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
      impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
      impl <'a,> ::core::clone::Clone for Reader<'a,>  {
        fn clone(&self) -> Self { *self }
      }

      impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
          Self { reader,  }
        }
      }

      impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
        fn from(reader: Reader<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
          core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
        }
      }

      impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
        fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
          self.reader
        }
      }

      impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
          self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
      }

      impl <'a,> Reader<'a,>  {
        pub fn reborrow(&self) -> Reader<'_,> {
          Self { .. *self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.reader.total_size()
        }
        #[inline]
        pub fn get_sv_id(self) -> u8 {
          self.reader.get_data_field::<u8>(0)
        }
        #[inline]
        pub fn get_glonass_frequency_index(self) -> i8 {
          self.reader.get_data_field::<i8>(1)
        }
        #[inline]
        pub fn get_observation_state(self) -> ::core::result::Result<crate::cereal::log_capnp::qcom_gnss::SVObservationState,::capnp::NotInSchema> {
          ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
        }
        #[inline]
        pub fn get_observations(self) -> u8 {
          self.reader.get_data_field::<u8>(4)
        }
        #[inline]
        pub fn get_good_observations(self) -> u8 {
          self.reader.get_data_field::<u8>(5)
        }
        #[inline]
        pub fn get_filter_stages(self) -> u8 {
          self.reader.get_data_field::<u8>(6)
        }
        #[inline]
        pub fn get_predetect_interval(self) -> u8 {
          self.reader.get_data_field::<u8>(7)
        }
        #[inline]
        pub fn get_cycle_slip_count(self) -> u8 {
          self.reader.get_data_field::<u8>(8)
        }
        #[inline]
        pub fn get_postdetections(self) -> u16 {
          self.reader.get_data_field::<u16>(5)
        }
        #[inline]
        pub fn get_measurement_status(self) -> ::capnp::Result<crate::cereal::log_capnp::qcom_gnss::measurement_status::Reader<'a>> {
          ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
        }
        #[inline]
        pub fn has_measurement_status(&self) -> bool {
          !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_carrier_noise(self) -> u16 {
          self.reader.get_data_field::<u16>(6)
        }
        #[inline]
        pub fn get_rf_loss(self) -> u16 {
          self.reader.get_data_field::<u16>(7)
        }
        #[inline]
        pub fn get_latency(self) -> i16 {
          self.reader.get_data_field::<i16>(8)
        }
        #[inline]
        pub fn get_filtered_measurement_fraction(self) -> f32 {
          self.reader.get_data_field::<f32>(5)
        }
        #[inline]
        pub fn get_filtered_measurement_integral(self) -> u32 {
          self.reader.get_data_field::<u32>(6)
        }
        #[inline]
        pub fn get_filtered_time_uncertainty(self) -> f32 {
          self.reader.get_data_field::<f32>(7)
        }
        #[inline]
        pub fn get_filtered_speed(self) -> f32 {
          self.reader.get_data_field::<f32>(8)
        }
        #[inline]
        pub fn get_filtered_speed_uncertainty(self) -> f32 {
          self.reader.get_data_field::<f32>(9)
        }
        #[inline]
        pub fn get_unfiltered_measurement_fraction(self) -> f32 {
          self.reader.get_data_field::<f32>(10)
        }
        #[inline]
        pub fn get_unfiltered_measurement_integral(self) -> u32 {
          self.reader.get_data_field::<u32>(11)
        }
        #[inline]
        pub fn get_unfiltered_time_uncertainty(self) -> f32 {
          self.reader.get_data_field::<f32>(12)
        }
        #[inline]
        pub fn get_unfiltered_speed(self) -> f32 {
          self.reader.get_data_field::<f32>(13)
        }
        #[inline]
        pub fn get_unfiltered_speed_uncertainty(self) -> f32 {
          self.reader.get_data_field::<f32>(14)
        }
        #[inline]
        pub fn get_multipath_estimate(self) -> u32 {
          self.reader.get_data_field::<u32>(15)
        }
        #[inline]
        pub fn get_azimuth(self) -> f32 {
          self.reader.get_data_field::<f32>(16)
        }
        #[inline]
        pub fn get_elevation(self) -> f32 {
          self.reader.get_data_field::<f32>(17)
        }
        #[inline]
        pub fn get_doppler_acceleration(self) -> f32 {
          self.reader.get_data_field::<f32>(18)
        }
        #[inline]
        pub fn get_fine_speed(self) -> f32 {
          self.reader.get_data_field::<f32>(19)
        }
        #[inline]
        pub fn get_fine_speed_uncertainty(self) -> f32 {
          self.reader.get_data_field::<f32>(20)
        }
        #[inline]
        pub fn get_carrier_phase(self) -> f64 {
          self.reader.get_data_field::<f64>(11)
        }
        #[inline]
        pub fn get_f_count(self) -> u32 {
          self.reader.get_data_field::<u32>(21)
        }
        #[inline]
        pub fn get_parity_error_count(self) -> u16 {
          self.reader.get_data_field::<u16>(9)
        }
        #[inline]
        pub fn get_good_parity(self) -> bool {
          self.reader.get_bool_field(72)
        }
      }

      pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
      impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 12, pointers: 1 };
      }
      impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
        const TYPE_ID: u64 = _private::TYPE_ID;
      }
      impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
          Self { builder,  }
        }
      }

      impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
        fn from(builder: Builder<'a,>) -> Self {
          Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
        }
      }

      impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
          self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
      }

      impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
          builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
        }
        fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
          ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
        }
      }

      impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
        fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
      }

      impl <'a,> Builder<'a,>  {
        pub fn into_reader(self) -> Reader<'a,> {
          self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_,> {
          Builder { builder: self.builder.reborrow() }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_,> {
          self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
          self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_sv_id(self) -> u8 {
          self.builder.get_data_field::<u8>(0)
        }
        #[inline]
        pub fn set_sv_id(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(0, value);
        }
        #[inline]
        pub fn get_glonass_frequency_index(self) -> i8 {
          self.builder.get_data_field::<i8>(1)
        }
        #[inline]
        pub fn set_glonass_frequency_index(&mut self, value: i8)  {
          self.builder.set_data_field::<i8>(1, value);
        }
        #[inline]
        pub fn get_observation_state(self) -> ::core::result::Result<crate::cereal::log_capnp::qcom_gnss::SVObservationState,::capnp::NotInSchema> {
          ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
        }
        #[inline]
        pub fn set_observation_state(&mut self, value: crate::cereal::log_capnp::qcom_gnss::SVObservationState)  {
          self.builder.set_data_field::<u16>(1, value as u16);
        }
        #[inline]
        pub fn get_observations(self) -> u8 {
          self.builder.get_data_field::<u8>(4)
        }
        #[inline]
        pub fn set_observations(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(4, value);
        }
        #[inline]
        pub fn get_good_observations(self) -> u8 {
          self.builder.get_data_field::<u8>(5)
        }
        #[inline]
        pub fn set_good_observations(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(5, value);
        }
        #[inline]
        pub fn get_filter_stages(self) -> u8 {
          self.builder.get_data_field::<u8>(6)
        }
        #[inline]
        pub fn set_filter_stages(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(6, value);
        }
        #[inline]
        pub fn get_predetect_interval(self) -> u8 {
          self.builder.get_data_field::<u8>(7)
        }
        #[inline]
        pub fn set_predetect_interval(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(7, value);
        }
        #[inline]
        pub fn get_cycle_slip_count(self) -> u8 {
          self.builder.get_data_field::<u8>(8)
        }
        #[inline]
        pub fn set_cycle_slip_count(&mut self, value: u8)  {
          self.builder.set_data_field::<u8>(8, value);
        }
        #[inline]
        pub fn get_postdetections(self) -> u16 {
          self.builder.get_data_field::<u16>(5)
        }
        #[inline]
        pub fn set_postdetections(&mut self, value: u16)  {
          self.builder.set_data_field::<u16>(5, value);
        }
        #[inline]
        pub fn get_measurement_status(self) -> ::capnp::Result<crate::cereal::log_capnp::qcom_gnss::measurement_status::Builder<'a>> {
          ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
        }
        #[inline]
        pub fn set_measurement_status(&mut self, value: crate::cereal::log_capnp::qcom_gnss::measurement_status::Reader<'_>) -> ::capnp::Result<()> {
          ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
        }
        #[inline]
        pub fn init_measurement_status(self, ) -> crate::cereal::log_capnp::qcom_gnss::measurement_status::Builder<'a> {
          ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
        }
        #[inline]
        pub fn has_measurement_status(&self) -> bool {
          !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_carrier_noise(self) -> u16 {
          self.builder.get_data_field::<u16>(6)
        }
        #[inline]
        pub fn set_carrier_noise(&mut self, value: u16)  {
          self.builder.set_data_field::<u16>(6, value);
        }
        #[inline]
        pub fn get_rf_loss(self) -> u16 {
          self.builder.get_data_field::<u16>(7)
        }
        #[inline]
        pub fn set_rf_loss(&mut self, value: u16)  {
          self.builder.set_data_field::<u16>(7, value);
        }
        #[inline]
        pub fn get_latency(self) -> i16 {
          self.builder.get_data_field::<i16>(8)
        }
        #[inline]
        pub fn set_latency(&mut self, value: i16)  {
          self.builder.set_data_field::<i16>(8, value);
        }
        #[inline]
        pub fn get_filtered_measurement_fraction(self) -> f32 {
          self.builder.get_data_field::<f32>(5)
        }
        #[inline]
        pub fn set_filtered_measurement_fraction(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(5, value);
        }
        #[inline]
        pub fn get_filtered_measurement_integral(self) -> u32 {
          self.builder.get_data_field::<u32>(6)
        }
        #[inline]
        pub fn set_filtered_measurement_integral(&mut self, value: u32)  {
          self.builder.set_data_field::<u32>(6, value);
        }
        #[inline]
        pub fn get_filtered_time_uncertainty(self) -> f32 {
          self.builder.get_data_field::<f32>(7)
        }
        #[inline]
        pub fn set_filtered_time_uncertainty(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(7, value);
        }
        #[inline]
        pub fn get_filtered_speed(self) -> f32 {
          self.builder.get_data_field::<f32>(8)
        }
        #[inline]
        pub fn set_filtered_speed(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(8, value);
        }
        #[inline]
        pub fn get_filtered_speed_uncertainty(self) -> f32 {
          self.builder.get_data_field::<f32>(9)
        }
        #[inline]
        pub fn set_filtered_speed_uncertainty(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(9, value);
        }
        #[inline]
        pub fn get_unfiltered_measurement_fraction(self) -> f32 {
          self.builder.get_data_field::<f32>(10)
        }
        #[inline]
        pub fn set_unfiltered_measurement_fraction(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(10, value);
        }
        #[inline]
        pub fn get_unfiltered_measurement_integral(self) -> u32 {
          self.builder.get_data_field::<u32>(11)
        }
        #[inline]
        pub fn set_unfiltered_measurement_integral(&mut self, value: u32)  {
          self.builder.set_data_field::<u32>(11, value);
        }
        #[inline]
        pub fn get_unfiltered_time_uncertainty(self) -> f32 {
          self.builder.get_data_field::<f32>(12)
        }
        #[inline]
        pub fn set_unfiltered_time_uncertainty(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(12, value);
        }
        #[inline]
        pub fn get_unfiltered_speed(self) -> f32 {
          self.builder.get_data_field::<f32>(13)
        }
        #[inline]
        pub fn set_unfiltered_speed(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(13, value);
        }
        #[inline]
        pub fn get_unfiltered_speed_uncertainty(self) -> f32 {
          self.builder.get_data_field::<f32>(14)
        }
        #[inline]
        pub fn set_unfiltered_speed_uncertainty(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(14, value);
        }
        #[inline]
        pub fn get_multipath_estimate(self) -> u32 {
          self.builder.get_data_field::<u32>(15)
        }
        #[inline]
        pub fn set_multipath_estimate(&mut self, value: u32)  {
          self.builder.set_data_field::<u32>(15, value);
        }
        #[inline]
        pub fn get_azimuth(self) -> f32 {
          self.builder.get_data_field::<f32>(16)
        }
        #[inline]
        pub fn set_azimuth(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(16, value);
        }
        #[inline]
        pub fn get_elevation(self) -> f32 {
          self.builder.get_data_field::<f32>(17)
        }
        #[inline]
        pub fn set_elevation(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(17, value);
        }
        #[inline]
        pub fn get_doppler_acceleration(self) -> f32 {
          self.builder.get_data_field::<f32>(18)
        }
        #[inline]
        pub fn set_doppler_acceleration(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(18, value);
        }
        #[inline]
        pub fn get_fine_speed(self) -> f32 {
          self.builder.get_data_field::<f32>(19)
        }
        #[inline]
        pub fn set_fine_speed(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(19, value);
        }
        #[inline]
        pub fn get_fine_speed_uncertainty(self) -> f32 {
          self.builder.get_data_field::<f32>(20)
        }
        #[inline]
        pub fn set_fine_speed_uncertainty(&mut self, value: f32)  {
          self.builder.set_data_field::<f32>(20, value);
        }
        #[inline]
        pub fn get_carrier_phase(self) -> f64 {
          self.builder.get_data_field::<f64>(11)
        }
        #[inline]
        pub fn set_carrier_phase(&mut self, value: f64)  {
          self.builder.set_data_field::<f64>(11, value);
        }
        #[inline]
        pub fn get_f_count(self) -> u32 {
          self.builder.get_data_field::<u32>(21)
        }
        #[inline]
        pub fn set_f_count(&mut self, value: u32)  {
          self.builder.set_data_field::<u32>(21, value);
        }
        #[inline]
        pub fn get_parity_error_count(self) -> u16 {
          self.builder.get_data_field::<u16>(9)
        }
        #[inline]
        pub fn set_parity_error_count(&mut self, value: u16)  {
          self.builder.set_data_field::<u16>(9, value);
        }
        #[inline]
        pub fn get_good_parity(self) -> bool {
          self.builder.get_bool_field(72)
        }
        #[inline]
        pub fn set_good_parity(&mut self, value: bool)  {
          self.builder.set_bool_field(72, value);
        }
      }

      pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
      impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
          Self { _typeless: typeless,  }
        }
      }
      impl Pipeline  {
        pub fn get_measurement_status(&self) -> crate::cereal::log_capnp::qcom_gnss::measurement_status::Pipeline {
          ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
        }
      }
      mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 567] = [
          ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
          ::capnp::word(156, 69, 191, 140, 223, 129, 139, 240),
          ::capnp::word(39, 0, 0, 0, 1, 0, 12, 0),
          ::capnp::word(92, 199, 198, 69, 148, 195, 83, 128),
          ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(21, 0, 0, 0, 82, 1, 0, 0),
          ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(37, 0, 0, 0, 63, 7, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
          ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
          ::capnp::word(115, 115, 46, 68, 114, 77, 101, 97),
          ::capnp::word(115, 117, 114, 101, 109, 101, 110, 116),
          ::capnp::word(82, 101, 112, 111, 114, 116, 46, 83),
          ::capnp::word(86, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
          ::capnp::word(132, 0, 0, 0, 3, 0, 4, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(141, 3, 0, 0, 42, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(136, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(148, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(145, 3, 0, 0, 178, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(148, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(160, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(157, 3, 0, 0, 138, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(160, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(172, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(3, 0, 0, 0, 4, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(169, 3, 0, 0, 106, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(168, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(180, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(4, 0, 0, 0, 5, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(177, 3, 0, 0, 138, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(180, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(192, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(5, 0, 0, 0, 6, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(189, 3, 0, 0, 106, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(188, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(200, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(6, 0, 0, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(197, 3, 0, 0, 146, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(200, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(212, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(7, 0, 0, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(209, 3, 0, 0, 122, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(208, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(220, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(8, 0, 0, 0, 5, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(217, 3, 0, 0, 122, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(216, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(228, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(225, 3, 0, 0, 146, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(228, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(240, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(10, 0, 0, 0, 6, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(237, 3, 0, 0, 106, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(236, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(248, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(11, 0, 0, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(245, 3, 0, 0, 58, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(240, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(252, 3, 0, 0, 2, 0, 1, 0),
          ::capnp::word(12, 0, 0, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(249, 3, 0, 0, 66, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(244, 3, 0, 0, 3, 0, 1, 0),
          ::capnp::word(0, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(13, 0, 0, 0, 5, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(253, 3, 0, 0, 226, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(4, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(16, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(14, 0, 0, 0, 6, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(13, 4, 0, 0, 226, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(20, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(32, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(15, 0, 0, 0, 7, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(29, 4, 0, 0, 194, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(32, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(44, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(16, 0, 0, 0, 8, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(41, 4, 0, 0, 114, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(40, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(52, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(17, 0, 0, 0, 9, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(49, 4, 0, 0, 202, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(56, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(68, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(18, 0, 0, 0, 10, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(65, 4, 0, 0, 242, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(72, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(84, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(19, 0, 0, 0, 11, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(81, 4, 0, 0, 242, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(88, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(100, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(20, 0, 0, 0, 12, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(97, 4, 0, 0, 210, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(104, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(116, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(21, 0, 0, 0, 13, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(113, 4, 0, 0, 130, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(112, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(124, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(22, 0, 0, 0, 14, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(121, 4, 0, 0, 218, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(128, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(140, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(23, 0, 0, 0, 15, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(137, 4, 0, 0, 146, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(140, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(152, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(24, 0, 0, 0, 16, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(149, 4, 0, 0, 66, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(144, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(156, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(25, 0, 0, 0, 17, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(153, 4, 0, 0, 82, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(152, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(164, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(26, 0, 0, 0, 18, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(161, 4, 0, 0, 162, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(164, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(176, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(27, 0, 0, 0, 19, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(173, 4, 0, 0, 82, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(172, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(184, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(28, 0, 0, 0, 20, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(181, 4, 0, 0, 170, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(184, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(196, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(29, 0, 0, 0, 11, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(193, 4, 0, 0, 106, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(192, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(204, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(30, 0, 0, 0, 21, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(201, 4, 0, 0, 58, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(196, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(208, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(31, 0, 0, 0, 9, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(205, 4, 0, 0, 138, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(208, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(220, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(32, 0, 0, 0, 72, 0, 0, 0),
          ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(217, 4, 0, 0, 90, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(216, 4, 0, 0, 3, 0, 1, 0),
          ::capnp::word(228, 4, 0, 0, 2, 0, 1, 0),
          ::capnp::word(115, 118, 73, 100, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 108, 111, 110, 97, 115, 115, 70),
          ::capnp::word(114, 101, 113, 117, 101, 110, 99, 121),
          ::capnp::word(73, 110, 100, 101, 120, 0, 0, 0),
          ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(111, 98, 115, 101, 114, 118, 97, 116),
          ::capnp::word(105, 111, 110, 83, 116, 97, 116, 101),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(233, 131, 108, 13, 154, 130, 30, 232),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(111, 98, 115, 101, 114, 118, 97, 116),
          ::capnp::word(105, 111, 110, 115, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 111, 111, 100, 79, 98, 115, 101),
          ::capnp::word(114, 118, 97, 116, 105, 111, 110, 115),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 108, 116, 101, 114, 83, 116),
          ::capnp::word(97, 103, 101, 115, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(112, 114, 101, 100, 101, 116, 101, 99),
          ::capnp::word(116, 73, 110, 116, 101, 114, 118, 97),
          ::capnp::word(108, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 121, 99, 108, 101, 83, 108, 105),
          ::capnp::word(112, 67, 111, 117, 110, 116, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(112, 111, 115, 116, 100, 101, 116, 101),
          ::capnp::word(99, 116, 105, 111, 110, 115, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(109, 101, 97, 115, 117, 114, 101, 109),
          ::capnp::word(101, 110, 116, 83, 116, 97, 116, 117),
          ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(59, 232, 202, 27, 14, 1, 1, 229),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 97, 114, 114, 105, 101, 114, 78),
          ::capnp::word(111, 105, 115, 101, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(114, 102, 76, 111, 115, 115, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(108, 97, 116, 101, 110, 99, 121, 0),
          ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 108, 116, 101, 114, 101, 100),
          ::capnp::word(77, 101, 97, 115, 117, 114, 101, 109),
          ::capnp::word(101, 110, 116, 70, 114, 97, 99, 116),
          ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 108, 116, 101, 114, 101, 100),
          ::capnp::word(77, 101, 97, 115, 117, 114, 101, 109),
          ::capnp::word(101, 110, 116, 73, 110, 116, 101, 103),
          ::capnp::word(114, 97, 108, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 108, 116, 101, 114, 101, 100),
          ::capnp::word(84, 105, 109, 101, 85, 110, 99, 101),
          ::capnp::word(114, 116, 97, 105, 110, 116, 121, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 108, 116, 101, 114, 101, 100),
          ::capnp::word(83, 112, 101, 101, 100, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 108, 116, 101, 114, 101, 100),
          ::capnp::word(83, 112, 101, 101, 100, 85, 110, 99),
          ::capnp::word(101, 114, 116, 97, 105, 110, 116, 121),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 77, 101, 97, 115, 117, 114),
          ::capnp::word(101, 109, 101, 110, 116, 70, 114, 97),
          ::capnp::word(99, 116, 105, 111, 110, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 77, 101, 97, 115, 117, 114),
          ::capnp::word(101, 109, 101, 110, 116, 73, 110, 116),
          ::capnp::word(101, 103, 114, 97, 108, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 84, 105, 109, 101, 85, 110),
          ::capnp::word(99, 101, 114, 116, 97, 105, 110, 116),
          ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 83, 112, 101, 101, 100, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(117, 110, 102, 105, 108, 116, 101, 114),
          ::capnp::word(101, 100, 83, 112, 101, 101, 100, 85),
          ::capnp::word(110, 99, 101, 114, 116, 97, 105, 110),
          ::capnp::word(116, 121, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(109, 117, 108, 116, 105, 112, 97, 116),
          ::capnp::word(104, 69, 115, 116, 105, 109, 97, 116),
          ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(97, 122, 105, 109, 117, 116, 104, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(101, 108, 101, 118, 97, 116, 105, 111),
          ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(100, 111, 112, 112, 108, 101, 114, 65),
          ::capnp::word(99, 99, 101, 108, 101, 114, 97, 116),
          ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 110, 101, 83, 112, 101, 101),
          ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 105, 110, 101, 83, 112, 101, 101),
          ::capnp::word(100, 85, 110, 99, 101, 114, 116, 97),
          ::capnp::word(105, 110, 116, 121, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(99, 97, 114, 114, 105, 101, 114, 80),
          ::capnp::word(104, 97, 115, 101, 0, 0, 0, 0),
          ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(102, 67, 111, 117, 110, 116, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(112, 97, 114, 105, 116, 121, 69, 114),
          ::capnp::word(114, 111, 114, 67, 111, 117, 110, 116),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(103, 111, 111, 100, 80, 97, 114, 105),
          ::capnp::word(116, 121, 0, 0, 0, 0, 0, 0),
          ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
          ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
          match index {
            0 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            1 => <i8 as ::capnp::introspect::Introspect>::introspect(),
            2 => <crate::cereal::log_capnp::qcom_gnss::SVObservationState as ::capnp::introspect::Introspect>::introspect(),
            3 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            4 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            5 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            6 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            7 => <u8 as ::capnp::introspect::Introspect>::introspect(),
            8 => <u16 as ::capnp::introspect::Introspect>::introspect(),
            9 => <crate::cereal::log_capnp::qcom_gnss::measurement_status::Owned as ::capnp::introspect::Introspect>::introspect(),
            10 => <u16 as ::capnp::introspect::Introspect>::introspect(),
            11 => <u16 as ::capnp::introspect::Introspect>::introspect(),
            12 => <i16 as ::capnp::introspect::Introspect>::introspect(),
            13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            14 => <u32 as ::capnp::introspect::Introspect>::introspect(),
            15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            16 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            17 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            18 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            19 => <u32 as ::capnp::introspect::Introspect>::introspect(),
            20 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            21 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            22 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            23 => <u32 as ::capnp::introspect::Introspect>::introspect(),
            24 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            25 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            26 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            27 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            28 => <f32 as ::capnp::introspect::Introspect>::introspect(),
            29 => <f64 as ::capnp::introspect::Introspect>::introspect(),
            30 => <u32 as ::capnp::introspect::Introspect>::introspect(),
            31 => <u16 as ::capnp::introspect::Introspect>::introspect(),
            32 => <bool as ::capnp::introspect::Introspect>::introspect(),
            _ => panic!("invalid field index {}", index),
          }
        }
        pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
          panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
          encoded_node: &ENCODED_NODE,
          nonunion_members: NONUNION_MEMBERS,
          members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
          members_by_name: MEMBERS_BY_NAME,
        };
        pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32];
        pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
        pub static MEMBERS_BY_NAME : &[u16] = &[24,10,29,7,26,25,30,5,13,14,16,17,15,27,28,1,4,32,12,9,23,2,3,31,8,6,11,0,18,19,21,22,20];
        pub const TYPE_ID: u64 = 0xf08b_81df_8cbf_459c;
      }
    }
  }

  pub mod dr_sv_poly_report {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_sv_id(self) -> u16 {
        self.reader.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn get_frequency_index(self) -> i8 {
        self.reader.get_data_field::<i8>(2)
      }
      #[inline]
      pub fn get_has_position(self) -> bool {
        self.reader.get_bool_field(24)
      }
      #[inline]
      pub fn get_has_iono(self) -> bool {
        self.reader.get_bool_field(25)
      }
      #[inline]
      pub fn get_has_tropo(self) -> bool {
        self.reader.get_bool_field(26)
      }
      #[inline]
      pub fn get_has_elevation(self) -> bool {
        self.reader.get_bool_field(27)
      }
      #[inline]
      pub fn get_poly_from_xtra(self) -> bool {
        self.reader.get_bool_field(28)
      }
      #[inline]
      pub fn get_has_sbas_iono(self) -> bool {
        self.reader.get_bool_field(29)
      }
      #[inline]
      pub fn get_iode(self) -> u16 {
        self.reader.get_data_field::<u16>(2)
      }
      #[inline]
      pub fn get_t0(self) -> f64 {
        self.reader.get_data_field::<f64>(1)
      }
      #[inline]
      pub fn get_xyz0(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_xyz0(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_xyz_n(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_xyz_n(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_other(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_other(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_position_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_iono_delay(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_iono_dot(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_sbas_iono_delay(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_sbas_iono_dot(self) -> f32 {
        self.reader.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn get_tropo_delay(self) -> f32 {
        self.reader.get_data_field::<f32>(9)
      }
      #[inline]
      pub fn get_elevation(self) -> f32 {
        self.reader.get_data_field::<f32>(10)
      }
      #[inline]
      pub fn get_elevation_dot(self) -> f32 {
        self.reader.get_data_field::<f32>(11)
      }
      #[inline]
      pub fn get_elevation_uncertainty(self) -> f32 {
        self.reader.get_data_field::<f32>(12)
      }
      #[inline]
      pub fn get_velocity_coeff(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f64>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_velocity_coeff(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.reader.get_data_field::<u16>(3)
      }
      #[inline]
      pub fn get_gps_tow(self) -> f64 {
        self.reader.get_data_field::<f64>(7)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 8, pointers: 4 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_sv_id(self) -> u16 {
        self.builder.get_data_field::<u16>(0)
      }
      #[inline]
      pub fn set_sv_id(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(0, value);
      }
      #[inline]
      pub fn get_frequency_index(self) -> i8 {
        self.builder.get_data_field::<i8>(2)
      }
      #[inline]
      pub fn set_frequency_index(&mut self, value: i8)  {
        self.builder.set_data_field::<i8>(2, value);
      }
      #[inline]
      pub fn get_has_position(self) -> bool {
        self.builder.get_bool_field(24)
      }
      #[inline]
      pub fn set_has_position(&mut self, value: bool)  {
        self.builder.set_bool_field(24, value);
      }
      #[inline]
      pub fn get_has_iono(self) -> bool {
        self.builder.get_bool_field(25)
      }
      #[inline]
      pub fn set_has_iono(&mut self, value: bool)  {
        self.builder.set_bool_field(25, value);
      }
      #[inline]
      pub fn get_has_tropo(self) -> bool {
        self.builder.get_bool_field(26)
      }
      #[inline]
      pub fn set_has_tropo(&mut self, value: bool)  {
        self.builder.set_bool_field(26, value);
      }
      #[inline]
      pub fn get_has_elevation(self) -> bool {
        self.builder.get_bool_field(27)
      }
      #[inline]
      pub fn set_has_elevation(&mut self, value: bool)  {
        self.builder.set_bool_field(27, value);
      }
      #[inline]
      pub fn get_poly_from_xtra(self) -> bool {
        self.builder.get_bool_field(28)
      }
      #[inline]
      pub fn set_poly_from_xtra(&mut self, value: bool)  {
        self.builder.set_bool_field(28, value);
      }
      #[inline]
      pub fn get_has_sbas_iono(self) -> bool {
        self.builder.get_bool_field(29)
      }
      #[inline]
      pub fn set_has_sbas_iono(&mut self, value: bool)  {
        self.builder.set_bool_field(29, value);
      }
      #[inline]
      pub fn get_iode(self) -> u16 {
        self.builder.get_data_field::<u16>(2)
      }
      #[inline]
      pub fn set_iode(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(2, value);
      }
      #[inline]
      pub fn get_t0(self) -> f64 {
        self.builder.get_data_field::<f64>(1)
      }
      #[inline]
      pub fn set_t0(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(1, value);
      }
      #[inline]
      pub fn get_xyz0(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_xyz0(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_xyz0(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_xyz0(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_xyz_n(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_xyz_n(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_xyz_n(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_xyz_n(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_other(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_other(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_other(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_other(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_position_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_position_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_iono_delay(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_iono_delay(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_iono_dot(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_iono_dot(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_sbas_iono_delay(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_sbas_iono_delay(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_sbas_iono_dot(self) -> f32 {
        self.builder.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn set_sbas_iono_dot(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(8, value);
      }
      #[inline]
      pub fn get_tropo_delay(self) -> f32 {
        self.builder.get_data_field::<f32>(9)
      }
      #[inline]
      pub fn set_tropo_delay(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(9, value);
      }
      #[inline]
      pub fn get_elevation(self) -> f32 {
        self.builder.get_data_field::<f32>(10)
      }
      #[inline]
      pub fn set_elevation(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(10, value);
      }
      #[inline]
      pub fn get_elevation_dot(self) -> f32 {
        self.builder.get_data_field::<f32>(11)
      }
      #[inline]
      pub fn set_elevation_dot(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(11, value);
      }
      #[inline]
      pub fn get_elevation_uncertainty(self) -> f32 {
        self.builder.get_data_field::<f32>(12)
      }
      #[inline]
      pub fn set_elevation_uncertainty(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(12, value);
      }
      #[inline]
      pub fn get_velocity_coeff(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f64>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_velocity_coeff(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f64>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_velocity_coeff(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f64> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_velocity_coeff(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_gps_week(self) -> u16 {
        self.builder.get_data_field::<u16>(3)
      }
      #[inline]
      pub fn set_gps_week(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(3, value);
      }
      #[inline]
      pub fn get_gps_tow(self) -> f64 {
        self.builder.get_data_field::<f64>(7)
      }
      #[inline]
      pub fn set_gps_tow(&mut self, value: f64)  {
        self.builder.set_data_field::<f64>(7, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 427] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(112, 50, 103, 26, 129, 128, 251, 177),
        ::capnp::word(19, 0, 0, 0, 1, 0, 8, 0),
        ::capnp::word(193, 81, 174, 7, 75, 103, 148, 222),
        ::capnp::word(4, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 127, 5, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 81, 99, 111, 109, 71, 110),
        ::capnp::word(115, 115, 46, 68, 114, 83, 118, 80),
        ::capnp::word(111, 108, 121, 82, 101, 112, 111, 114),
        ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(100, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(173, 2, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(177, 2, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 2, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 25, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 2, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 2, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 2, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 28, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 2, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 29, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 2, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 2, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 2, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 2, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 3, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(24, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 3, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 3, 0, 0, 162, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(14, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 3, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(52, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 3, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 3, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(76, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(17, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(73, 3, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(18, 0, 0, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(81, 3, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(80, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(19, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 3, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(88, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(100, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 3, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(21, 0, 0, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 3, 0, 0, 170, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(22, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 3, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(23, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 3, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(136, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(24, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 3, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 3, 0, 0, 3, 0, 1, 0),
        ::capnp::word(152, 3, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 118, 73, 100, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 101, 113, 117, 101, 110, 99),
        ::capnp::word(121, 73, 110, 100, 101, 120, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 80, 111, 115, 105, 116),
        ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 73, 111, 110, 111, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 84, 114, 111, 112, 111),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 69, 108, 101, 118, 97),
        ::capnp::word(116, 105, 111, 110, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 111, 108, 121, 70, 114, 111, 109),
        ::capnp::word(88, 116, 114, 97, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 97, 115, 83, 98, 97, 115, 73),
        ::capnp::word(111, 110, 111, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 100, 101, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 48, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 121, 122, 48, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 121, 122, 78, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 116, 104, 101, 114, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 111, 115, 105, 116, 105, 111, 110),
        ::capnp::word(85, 110, 99, 101, 114, 116, 97, 105),
        ::capnp::word(110, 116, 121, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 110, 111, 68, 101, 108, 97),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 111, 110, 111, 68, 111, 116, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 98, 97, 115, 73, 111, 110, 111),
        ::capnp::word(68, 101, 108, 97, 121, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 98, 97, 115, 73, 111, 110, 111),
        ::capnp::word(68, 111, 116, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 114, 111, 112, 111, 68, 101, 108),
        ::capnp::word(97, 121, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 108, 101, 118, 97, 116, 105, 111),
        ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 108, 101, 118, 97, 116, 105, 111),
        ::capnp::word(110, 68, 111, 116, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 108, 101, 118, 97, 116, 105, 111),
        ::capnp::word(110, 85, 110, 99, 101, 114, 116, 97),
        ::capnp::word(105, 110, 116, 121, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 101, 108, 111, 99, 105, 116, 121),
        ::capnp::word(67, 111, 101, 102, 102, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 87, 101, 101, 107, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(103, 112, 115, 84, 111, 119, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          1 => <i8 as ::capnp::introspect::Introspect>::introspect(),
          2 => <bool as ::capnp::introspect::Introspect>::introspect(),
          3 => <bool as ::capnp::introspect::Introspect>::introspect(),
          4 => <bool as ::capnp::introspect::Introspect>::introspect(),
          5 => <bool as ::capnp::introspect::Introspect>::introspect(),
          6 => <bool as ::capnp::introspect::Introspect>::introspect(),
          7 => <bool as ::capnp::introspect::Introspect>::introspect(),
          8 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          9 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          10 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          11 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          12 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          14 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          16 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          17 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          18 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          19 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          20 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          21 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          22 => <::capnp::primitive_list::Owned<f64> as ::capnp::introspect::Introspect>::introspect(),
          23 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          24 => <f64 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[19,20,21,1,24,23,5,3,2,7,4,8,14,15,12,6,13,16,17,0,9,18,22,10,11];
      pub const TYPE_ID: u64 = 0xb1fb_8081_1a67_3270;
    }
  }
}

pub mod clocks {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_boot_time_nanos_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_monotonic_nanos_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_monotonic_raw_nanos_d_e_p_r_e_c_a_t_d(self) -> u64 {
      self.reader.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn get_wall_time_nanos(self) -> u64 {
      self.reader.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn get_modem_uptime_millis_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.reader.get_data_field::<u64>(4)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_boot_time_nanos_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_boot_time_nanos_d_e_p_r_e_c_a_t_e_d(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_monotonic_nanos_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_monotonic_nanos_d_e_p_r_e_c_a_t_e_d(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_monotonic_raw_nanos_d_e_p_r_e_c_a_t_d(self) -> u64 {
      self.builder.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn set_monotonic_raw_nanos_d_e_p_r_e_c_a_t_d(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(2, value);
    }
    #[inline]
    pub fn get_wall_time_nanos(self) -> u64 {
      self.builder.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn set_wall_time_nanos(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(3, value);
    }
    #[inline]
    pub fn get_modem_uptime_millis_d_e_p_r_e_c_a_t_e_d(self) -> u64 {
      self.builder.get_data_field::<u64>(4)
    }
    #[inline]
    pub fn set_modem_uptime_millis_d_e_p_r_e_c_a_t_e_d(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(4, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 104] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(24, 70, 220, 123, 154, 180, 95, 201),
      ::capnp::word(10, 0, 0, 0, 1, 0, 5, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 31, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 108, 111, 99, 107, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 0, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 0, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 0, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 0, 0, 0, 226, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(98, 111, 111, 116, 84, 105, 109, 101),
      ::capnp::word(78, 97, 110, 111, 115, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 110, 111, 116, 111, 110, 105),
      ::capnp::word(99, 78, 97, 110, 111, 115, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 110, 111, 116, 111, 110, 105),
      ::capnp::word(99, 82, 97, 119, 78, 97, 110, 111),
      ::capnp::word(115, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 97, 108, 108, 84, 105, 109, 101),
      ::capnp::word(78, 97, 110, 111, 115, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 109, 85, 112, 116),
      ::capnp::word(105, 109, 101, 77, 105, 108, 108, 105),
      ::capnp::word(115, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        2 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        3 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        4 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0,4,1,2,3];
    pub const TYPE_ID: u64 = 0xc95f_b49a_7bdc_4618;
  }
}

pub mod live_mpc_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_x(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_y(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_psi(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_psi(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_curvature(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_curvature(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_qp_iterations(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_calculation_time(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_cost(self) -> f64 {
      self.reader.get_data_field::<f64>(2)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 4 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_x(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_x(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_x(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_y(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_y(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_y(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_psi(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_psi(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_psi(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_psi(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_curvature(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_curvature(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_curvature(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_curvature(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_qp_iterations(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_qp_iterations(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_calculation_time(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_calculation_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_cost(self) -> f64 {
      self.builder.get_data_field::<f64>(2)
    }
    #[inline]
    pub fn set_cost(&mut self, value: f64)  {
      self.builder.set_data_field::<f64>(2, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 141] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(160, 50, 95, 168, 50, 227, 165, 146),
      ::capnp::word(10, 0, 0, 0, 1, 0, 3, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(4, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 178, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 143, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 105, 118, 101, 77, 112),
      ::capnp::word(99, 68, 97, 116, 97, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 1, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 115, 105, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 112, 73, 116, 101, 114, 97, 116),
      ::capnp::word(105, 111, 110, 115, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 99, 117, 108, 97, 116),
      ::capnp::word(105, 111, 110, 84, 105, 109, 101, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 115, 116, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        4 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        6 => <f64 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[5,6,3,2,4,0,1];
    pub const TYPE_ID: u64 = 0x92a5_e332_a85f_32a0;
  }
}

pub mod live_longitudinal_mpc_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_x_ego(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_x_ego(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_v_ego(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_v_ego(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_a_ego(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_a_ego(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_x_lead(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_x_lead(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_v_lead(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_v_lead(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_a_lead(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_a_lead(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_a_lead_tau(self) -> f32 {
      self.reader.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn get_qp_iterations(self) -> u32 {
      self.reader.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn get_mpc_id(self) -> u32 {
      self.reader.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn get_calculation_time(self) -> u64 {
      self.reader.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn get_cost(self) -> f64 {
      self.reader.get_data_field::<f64>(3)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 4, pointers: 6 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_x_ego(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_x_ego(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_x_ego(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_x_ego(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_v_ego(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_v_ego(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_v_ego(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_v_ego(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_a_ego(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_a_ego(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_a_ego(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_a_ego(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_x_lead(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_x_lead(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_x_lead(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_x_lead(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_v_lead(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_v_lead(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_v_lead(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_v_lead(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_a_lead(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_a_lead(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_a_lead(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_a_lead(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_a_lead_tau(self) -> f32 {
      self.builder.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn set_a_lead_tau(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(0, value);
    }
    #[inline]
    pub fn get_qp_iterations(self) -> u32 {
      self.builder.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn set_qp_iterations(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn get_mpc_id(self) -> u32 {
      self.builder.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn set_mpc_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(2, value);
    }
    #[inline]
    pub fn get_calculation_time(self) -> u64 {
      self.builder.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn set_calculation_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(2, value);
    }
    #[inline]
    pub fn get_cost(self) -> f64 {
      self.builder.get_data_field::<f64>(3)
    }
    #[inline]
    pub fn set_cost(&mut self, value: f64)  {
      self.builder.set_data_field::<f64>(3, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 211] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(226, 90, 134, 79, 67, 124, 225, 231),
      ::capnp::word(10, 0, 0, 0, 1, 0, 4, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
      ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 111, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 105, 118, 101, 76, 111),
      ::capnp::word(110, 103, 105, 116, 117, 100, 105, 110),
      ::capnp::word(97, 108, 77, 112, 99, 68, 97, 116),
      ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(44, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(160, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 1, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(120, 69, 103, 111, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 69, 103, 111, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 69, 103, 111, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 76, 101, 97, 100, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 76, 101, 97, 100, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 76, 101, 97, 100, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 76, 101, 97, 100, 84, 97, 117),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 112, 73, 116, 101, 114, 97, 116),
      ::capnp::word(105, 111, 110, 115, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 112, 99, 73, 100, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 108, 99, 117, 108, 97, 116),
      ::capnp::word(105, 111, 110, 84, 105, 109, 101, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 115, 116, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        10 => <f64 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[2,5,6,9,10,8,7,1,4,0,3];
    pub const TYPE_ID: u64 = 0xe7e1_7c43_4f86_5ae2;
  }
}

pub mod joystick {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_axes(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_axes(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_buttons(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,bool>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_buttons(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 2 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_axes(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_axes(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_axes(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_axes(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_buttons(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,bool>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_buttons(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<bool>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_buttons(self, size: u32) -> ::capnp::primitive_list::Builder<'a,bool> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_buttons(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 55] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(226, 21, 39, 142, 101, 1, 36, 228),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 74, 111, 121, 115, 116, 105),
      ::capnp::word(99, 107, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(97, 120, 101, 115, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 117, 116, 116, 111, 110, 115, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::primitive_list::Owned<bool> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
    pub const TYPE_ID: u64 = 0xe424_0165_8e27_15e2;
  }
}

pub mod driver_state_v2 {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_model_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_dsp_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_raw_predictions(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_raw_predictions(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_poor_vision_prob(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_wheel_on_right_prob(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_left_driver_data(self) -> ::capnp::Result<crate::cereal::log_capnp::driver_state_v2::driver_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_left_driver_data(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_right_driver_data(self) -> ::capnp::Result<crate::cereal::log_capnp::driver_state_v2::driver_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_right_driver_data(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 3 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_model_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_model_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_dsp_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_dsp_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_raw_predictions(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_raw_predictions(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_raw_predictions(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_raw_predictions(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_poor_vision_prob(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_poor_vision_prob(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_wheel_on_right_prob(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_wheel_on_right_prob(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_left_driver_data(self) -> ::capnp::Result<crate::cereal::log_capnp::driver_state_v2::driver_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_left_driver_data(&mut self, value: crate::cereal::log_capnp::driver_state_v2::driver_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_left_driver_data(self, ) -> crate::cereal::log_capnp::driver_state_v2::driver_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_left_driver_data(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_right_driver_data(self) -> ::capnp::Result<crate::cereal::log_capnp::driver_state_v2::driver_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_right_driver_data(&mut self, value: crate::cereal::log_capnp::driver_state_v2::driver_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_right_driver_data(self, ) -> crate::cereal::log_capnp::driver_state_v2::driver_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    #[inline]
    pub fn has_right_driver_data(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_left_driver_data(&self) -> crate::cereal::log_capnp::driver_state_v2::driver_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_right_driver_data(&self) -> crate::cereal::log_capnp::driver_state_v2::driver_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 151] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(176, 99, 117, 20, 64, 12, 1, 252),
      ::capnp::word(10, 0, 0, 0, 1, 0, 3, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 194, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 199, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 68, 114, 105, 118, 101, 114),
      ::capnp::word(83, 116, 97, 116, 101, 86, 50, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(106, 138, 242, 205, 177, 59, 247, 201),
      ::capnp::word(1, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(68, 114, 105, 118, 101, 114, 68, 97),
      ::capnp::word(116, 97, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 0, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 0, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 1, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 1, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 108, 69, 120, 101),
      ::capnp::word(99, 117, 116, 105, 111, 110, 84, 105),
      ::capnp::word(109, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 115, 112, 69, 120, 101, 99, 117),
      ::capnp::word(116, 105, 111, 110, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 119, 80, 114, 101, 100, 105),
      ::capnp::word(99, 116, 105, 111, 110, 115, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 111, 114, 86, 105, 115, 105),
      ::capnp::word(111, 110, 80, 114, 111, 98, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 104, 101, 101, 108, 79, 110, 82),
      ::capnp::word(105, 103, 104, 116, 80, 114, 111, 98),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 102, 116, 68, 114, 105, 118),
      ::capnp::word(101, 114, 68, 97, 116, 97, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(106, 138, 242, 205, 177, 59, 247, 201),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 105, 103, 104, 116, 68, 114, 105),
      ::capnp::word(118, 101, 114, 68, 97, 116, 97, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(106, 138, 242, 205, 177, 59, 247, 201),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <crate::cereal::log_capnp::driver_state_v2::driver_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        7 => <crate::cereal::log_capnp::driver_state_v2::driver_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[2,0,6,1,4,3,7,5];
    pub const TYPE_ID: u64 = 0xfc01_0c40_1475_63b0;
  }

  pub mod driver_data {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_face_orientation(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_face_orientation(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_face_orientation_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_face_orientation_std(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_face_position(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_face_position(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_face_position_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_face_position_std(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_face_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_left_eye_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_right_eye_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_left_blink_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_right_blink_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_sunglasses_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_occluded_prob(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_ready_prob(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_ready_prob(&self) -> bool {
        !self.reader.get_pointer_field(4).is_null()
      }
      #[inline]
      pub fn get_not_ready_prob(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_not_ready_prob(&self) -> bool {
        !self.reader.get_pointer_field(5).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 4, pointers: 6 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_face_orientation(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_face_orientation(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_face_orientation(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_face_orientation(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_face_orientation_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_face_orientation_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_face_orientation_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_face_orientation_std(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_face_position(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_face_position(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_face_position(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_face_position(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_face_position_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_face_position_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_face_position_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_face_position_std(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_face_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_face_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_left_eye_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_left_eye_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_right_eye_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_right_eye_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_left_blink_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_left_blink_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_right_blink_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_right_blink_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_sunglasses_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_sunglasses_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_occluded_prob(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_occluded_prob(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_ready_prob(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_ready_prob(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
      }
      #[inline]
      pub fn init_ready_prob(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
      }
      #[inline]
      pub fn has_ready_prob(&self) -> bool {
        !self.builder.is_pointer_field_null(4)
      }
      #[inline]
      pub fn get_not_ready_prob(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_not_ready_prob(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_not_ready_prob(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
      }
      #[inline]
      pub fn has_not_ready_prob(&self) -> bool {
        !self.builder.is_pointer_field_null(5)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 252] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(106, 138, 242, 205, 177, 59, 247, 201),
        ::capnp::word(24, 0, 0, 0, 1, 0, 4, 0),
        ::capnp::word(176, 99, 117, 20, 64, 12, 1, 252),
        ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 26, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 223, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 68, 114, 105, 118, 101, 114),
        ::capnp::word(83, 116, 97, 116, 101, 86, 50, 46),
        ::capnp::word(68, 114, 105, 118, 101, 114, 68, 97),
        ::capnp::word(116, 97, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(52, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(93, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 1, 0, 0, 154, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 1, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(144, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(172, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(169, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(168, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 1, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(192, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(201, 1, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(200, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(212, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 1, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 1, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(224, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(236, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(233, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 1, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(248, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(17, 2, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(102, 97, 99, 101, 79, 114, 105, 101),
        ::capnp::word(110, 116, 97, 116, 105, 111, 110, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 97, 99, 101, 79, 114, 105, 101),
        ::capnp::word(110, 116, 97, 116, 105, 111, 110, 83),
        ::capnp::word(116, 100, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 97, 99, 101, 80, 111, 115, 105),
        ::capnp::word(116, 105, 111, 110, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 97, 99, 101, 80, 111, 115, 105),
        ::capnp::word(116, 105, 111, 110, 83, 116, 100, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 97, 99, 101, 80, 114, 111, 98),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 101, 102, 116, 69, 121, 101, 80),
        ::capnp::word(114, 111, 98, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 105, 103, 104, 116, 69, 121, 101),
        ::capnp::word(80, 114, 111, 98, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 101, 102, 116, 66, 108, 105, 110),
        ::capnp::word(107, 80, 114, 111, 98, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 105, 103, 104, 116, 66, 108, 105),
        ::capnp::word(110, 107, 80, 114, 111, 98, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 117, 110, 103, 108, 97, 115, 115),
        ::capnp::word(101, 115, 80, 114, 111, 98, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 99, 99, 108, 117, 100, 101, 100),
        ::capnp::word(80, 114, 111, 98, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 101, 97, 100, 121, 80, 114, 111),
        ::capnp::word(98, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 111, 116, 82, 101, 97, 100, 121),
        ::capnp::word(80, 114, 111, 98, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          11 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          12 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1,2,3,4,7,5,12,10,11,8,6,9];
      pub const TYPE_ID: u64 = 0xc9f7_3bb1_cdf2_8a6a;
    }
  }
}

pub mod driver_state_d_e_p_r_e_c_a_t_e_d {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_descriptor_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_descriptor_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_std_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_face_orientation(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_face_orientation(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_face_position(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_face_position(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_face_prob(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_left_eye_prob(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_right_eye_prob(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_left_blink_prob(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_right_blink_prob(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_ir_pwr_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_face_orientation_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_face_orientation_std(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_face_position_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_face_position_std(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_sunglasses_prob(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn get_model_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn get_raw_predictions(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_raw_predictions(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_dsp_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn get_poor_vision(self) -> f32 {
      self.reader.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn get_partial_face(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_distracted_pose(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_distracted_eyes(self) -> f32 {
      self.reader.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn get_eyes_on_road(self) -> f32 {
      self.reader.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn get_phone_use(self) -> f32 {
      self.reader.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn get_occluded_prob(self) -> f32 {
      self.reader.get_data_field::<f32>(17)
    }
    #[inline]
    pub fn get_ready_prob(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_ready_prob(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_not_ready_prob(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_not_ready_prob(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 9, pointers: 8 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_descriptor_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_descriptor_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_descriptor_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_descriptor_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_std_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_std_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_face_orientation(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_face_orientation(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_face_orientation(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_face_orientation(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_face_position(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_face_position(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_face_position(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_face_position(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_face_prob(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_face_prob(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_left_eye_prob(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_left_eye_prob(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_right_eye_prob(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_right_eye_prob(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_left_blink_prob(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_left_blink_prob(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_right_blink_prob(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_right_blink_prob(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_ir_pwr_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_ir_pwr_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_face_orientation_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_face_orientation_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_face_orientation_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_face_orientation_std(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_face_position_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_face_position_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_face_position_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_face_position_std(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_sunglasses_prob(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_sunglasses_prob(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
    #[inline]
    pub fn get_model_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn set_model_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(9, value);
    }
    #[inline]
    pub fn get_raw_predictions(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_raw_predictions(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(5).set_data(value);
    }
    #[inline]
    pub fn init_raw_predictions(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(5).init_data(size)
    }
    #[inline]
    pub fn has_raw_predictions(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_dsp_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn set_dsp_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(10, value);
    }
    #[inline]
    pub fn get_poor_vision(self) -> f32 {
      self.builder.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn set_poor_vision(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(11, value);
    }
    #[inline]
    pub fn get_partial_face(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_partial_face(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_distracted_pose(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_distracted_pose(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_distracted_eyes(self) -> f32 {
      self.builder.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn set_distracted_eyes(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(14, value);
    }
    #[inline]
    pub fn get_eyes_on_road(self) -> f32 {
      self.builder.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn set_eyes_on_road(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(15, value);
    }
    #[inline]
    pub fn get_phone_use(self) -> f32 {
      self.builder.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn set_phone_use(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(16, value);
    }
    #[inline]
    pub fn get_occluded_prob(self) -> f32 {
      self.builder.get_data_field::<f32>(17)
    }
    #[inline]
    pub fn set_occluded_prob(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(17, value);
    }
    #[inline]
    pub fn get_ready_prob(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_ready_prob(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_ready_prob(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    #[inline]
    pub fn has_ready_prob(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_not_ready_prob(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_not_ready_prob(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_not_ready_prob(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
    }
    #[inline]
    pub fn has_not_ready_prob(&self) -> bool {
      !self.builder.is_pointer_field_null(7)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 465] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(0, 10, 237, 147, 197, 108, 60, 184),
      ::capnp::word(10, 0, 0, 0, 1, 0, 9, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(8, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
      ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 183, 5, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 68, 114, 105, 118, 101, 114),
      ::capnp::word(83, 116, 97, 116, 101, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(104, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 2, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 2, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 2, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 2, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 3, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 3, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 3, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(68, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 3, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 3, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(112, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 3, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 3, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 3, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 3, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 3, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 3, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 3, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 3, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 3, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 3, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 3, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 3, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 4, 0, 0, 2, 0, 1, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 115, 99, 114, 105, 112, 116),
      ::capnp::word(111, 114, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 100, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 99, 101, 79, 114, 105, 101),
      ::capnp::word(110, 116, 97, 116, 105, 111, 110, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 99, 101, 80, 111, 115, 105),
      ::capnp::word(116, 105, 111, 110, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 99, 101, 80, 114, 111, 98),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 102, 116, 69, 121, 101, 80),
      ::capnp::word(114, 111, 98, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 105, 103, 104, 116, 69, 121, 101),
      ::capnp::word(80, 114, 111, 98, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 102, 116, 66, 108, 105, 110),
      ::capnp::word(107, 80, 114, 111, 98, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 105, 103, 104, 116, 66, 108, 105),
      ::capnp::word(110, 107, 80, 114, 111, 98, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 114, 80, 119, 114, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 99, 101, 79, 114, 105, 101),
      ::capnp::word(110, 116, 97, 116, 105, 111, 110, 83),
      ::capnp::word(116, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 99, 101, 80, 111, 115, 105),
      ::capnp::word(116, 105, 111, 110, 83, 116, 100, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 117, 110, 103, 108, 97, 115, 115),
      ::capnp::word(101, 115, 80, 114, 111, 98, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 108, 69, 120, 101),
      ::capnp::word(99, 117, 116, 105, 111, 110, 84, 105),
      ::capnp::word(109, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 119, 80, 114, 101, 100, 105),
      ::capnp::word(99, 116, 105, 111, 110, 115, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 115, 112, 69, 120, 101, 99, 117),
      ::capnp::word(116, 105, 111, 110, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 111, 114, 86, 105, 115, 105),
      ::capnp::word(111, 110, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 114, 116, 105, 97, 108, 70),
      ::capnp::word(97, 99, 101, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 105, 115, 116, 114, 97, 99, 116),
      ::capnp::word(101, 100, 80, 111, 115, 101, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 105, 115, 116, 114, 97, 99, 116),
      ::capnp::word(101, 100, 69, 121, 101, 115, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 121, 101, 115, 79, 110, 82, 111),
      ::capnp::word(97, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 104, 111, 110, 101, 85, 115, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 99, 99, 108, 117, 100, 101, 100),
      ::capnp::word(80, 114, 111, 98, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 101, 97, 100, 121, 80, 114, 111),
      ::capnp::word(98, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 111, 116, 82, 101, 97, 100, 121),
      ::capnp::word(80, 114, 111, 98, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        11 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        12 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        14 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        15 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        16 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        17 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        18 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        19 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        20 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        21 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        22 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        23 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        24 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        25 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,20,19,16,21,3,11,4,12,5,0,10,8,6,14,25,23,18,22,17,15,24,9,7,2,13];
    pub const TYPE_ID: u64 = 0xb83c_6cc5_93ed_0a00;
  }
}

pub mod driver_monitoring_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_events(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::car_capnp::car_event::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_events(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_face_detected(self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_is_distracted(self) -> bool {
      self.reader.get_bool_field(1)
    }
    #[inline]
    pub fn get_awareness_status(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_is_r_h_d(self) -> bool {
      self.reader.get_bool_field(2)
    }
    #[inline]
    pub fn get_rhd_checked_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(3)
    }
    #[inline]
    pub fn get_pose_pitch_offset(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_pose_pitch_valid_count(self) -> u32 {
      self.reader.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn get_pose_yaw_offset(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_pose_yaw_valid_count(self) -> u32 {
      self.reader.get_data_field::<u32>(5)
    }
    #[inline]
    pub fn get_step_change(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_awareness_active(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_awareness_passive(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn get_is_low_std(self) -> bool {
      self.reader.get_bool_field(4)
    }
    #[inline]
    pub fn get_hi_std_count(self) -> u32 {
      self.reader.get_data_field::<u32>(9)
    }
    #[inline]
    pub fn get_is_preview_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(5)
    }
    #[inline]
    pub fn get_is_active_mode(self) -> bool {
      self.reader.get_bool_field(6)
    }
    #[inline]
    pub fn get_distracted_type(self) -> u32 {
      self.reader.get_data_field::<u32>(10)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 6, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_events(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_event::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_events(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::car_capnp::car_event::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_events(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_event::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_events(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_face_detected(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_face_detected(&mut self, value: bool)  {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_is_distracted(self) -> bool {
      self.builder.get_bool_field(1)
    }
    #[inline]
    pub fn set_is_distracted(&mut self, value: bool)  {
      self.builder.set_bool_field(1, value);
    }
    #[inline]
    pub fn get_awareness_status(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_awareness_status(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_is_r_h_d(self) -> bool {
      self.builder.get_bool_field(2)
    }
    #[inline]
    pub fn set_is_r_h_d(&mut self, value: bool)  {
      self.builder.set_bool_field(2, value);
    }
    #[inline]
    pub fn get_rhd_checked_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(3)
    }
    #[inline]
    pub fn set_rhd_checked_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(3, value);
    }
    #[inline]
    pub fn get_pose_pitch_offset(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_pose_pitch_offset(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_pose_pitch_valid_count(self) -> u32 {
      self.builder.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn set_pose_pitch_valid_count(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(3, value);
    }
    #[inline]
    pub fn get_pose_yaw_offset(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_pose_yaw_offset(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_pose_yaw_valid_count(self) -> u32 {
      self.builder.get_data_field::<u32>(5)
    }
    #[inline]
    pub fn set_pose_yaw_valid_count(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(5, value);
    }
    #[inline]
    pub fn get_step_change(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_step_change(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_awareness_active(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_awareness_active(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_awareness_passive(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_awareness_passive(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
    #[inline]
    pub fn get_is_low_std(self) -> bool {
      self.builder.get_bool_field(4)
    }
    #[inline]
    pub fn set_is_low_std(&mut self, value: bool)  {
      self.builder.set_bool_field(4, value);
    }
    #[inline]
    pub fn get_hi_std_count(self) -> u32 {
      self.builder.get_data_field::<u32>(9)
    }
    #[inline]
    pub fn set_hi_std_count(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(9, value);
    }
    #[inline]
    pub fn get_is_preview_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(5)
    }
    #[inline]
    pub fn set_is_preview_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(5, value);
    }
    #[inline]
    pub fn get_is_active_mode(self) -> bool {
      self.builder.get_bool_field(6)
    }
    #[inline]
    pub fn set_is_active_mode(&mut self, value: bool)  {
      self.builder.set_bool_field(6, value);
    }
    #[inline]
    pub fn get_distracted_type(self) -> u32 {
      self.builder.get_data_field::<u32>(10)
    }
    #[inline]
    pub fn set_distracted_type(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(10, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 313] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(132, 162, 29, 74, 9, 218, 60, 184),
      ::capnp::word(10, 0, 0, 0, 1, 0, 6, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
      ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 247, 3, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 68, 114, 105, 118, 101, 114),
      ::capnp::word(77, 111, 110, 105, 116, 111, 114, 105),
      ::capnp::word(110, 103, 83, 116, 97, 116, 101, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(72, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 1, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 2, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 2, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 2, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 2, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 2, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 2, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 2, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(68, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 2, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 2, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 2, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 2, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 2, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 2, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(124, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 2, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 2, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 2, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(101, 118, 101, 110, 116, 115, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(211, 58, 175, 76, 243, 87, 22, 155),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 97, 99, 101, 68, 101, 116, 101),
      ::capnp::word(99, 116, 101, 100, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 115, 68, 105, 115, 116, 114, 97),
      ::capnp::word(99, 116, 101, 100, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 119, 97, 114, 101, 110, 101, 115),
      ::capnp::word(115, 83, 116, 97, 116, 117, 115, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 115, 82, 72, 68, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 104, 100, 67, 104, 101, 99, 107),
      ::capnp::word(101, 100, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 101, 80, 105, 116, 99),
      ::capnp::word(104, 79, 102, 102, 115, 101, 116, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 101, 80, 105, 116, 99),
      ::capnp::word(104, 86, 97, 108, 105, 100, 67, 111),
      ::capnp::word(117, 110, 116, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 101, 89, 97, 119, 79),
      ::capnp::word(102, 102, 115, 101, 116, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 101, 89, 97, 119, 86),
      ::capnp::word(97, 108, 105, 100, 67, 111, 117, 110),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 112, 67, 104, 97, 110),
      ::capnp::word(103, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 119, 97, 114, 101, 110, 101, 115),
      ::capnp::word(115, 65, 99, 116, 105, 118, 101, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 119, 97, 114, 101, 110, 101, 115),
      ::capnp::word(115, 80, 97, 115, 115, 105, 118, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 115, 76, 111, 119, 83, 116, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 105, 83, 116, 100, 67, 111, 117),
      ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 115, 80, 114, 101, 118, 105, 101),
      ::capnp::word(119, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 115, 65, 99, 116, 105, 118, 101),
      ::capnp::word(77, 111, 100, 101, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 105, 115, 116, 114, 97, 99, 116),
      ::capnp::word(101, 100, 84, 121, 112, 101, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::struct_list::Owned<crate::cereal::car_capnp::car_event::Owned> as ::capnp::introspect::Introspect>::introspect(),
        1 => <bool as ::capnp::introspect::Introspect>::introspect(),
        2 => <bool as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <bool as ::capnp::introspect::Introspect>::introspect(),
        5 => <bool as ::capnp::introspect::Introspect>::introspect(),
        6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        11 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        12 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        13 => <bool as ::capnp::introspect::Introspect>::introspect(),
        14 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        15 => <bool as ::capnp::introspect::Introspect>::introspect(),
        16 => <bool as ::capnp::introspect::Introspect>::introspect(),
        17 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[11,12,3,17,0,1,14,16,2,13,15,4,6,7,8,9,5,10];
    pub const TYPE_ID: u64 = 0xb83c_da09_4a1d_a284;
  }
}

pub mod boot {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_wall_time_nanos(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_last_kmsg_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_last_kmsg_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_last_pmsg_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_last_pmsg_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_launch_log(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_launch_log(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_pstore(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Reader<'a,::capnp::text::Owned,::capnp::data::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_pstore(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_commands(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Reader<'a,::capnp::text::Owned,::capnp::data::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_commands(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 5 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_wall_time_nanos(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_wall_time_nanos(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_last_kmsg_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_last_kmsg_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_last_kmsg_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_last_kmsg_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_last_pmsg_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_last_pmsg_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(1).set_data(value);
    }
    #[inline]
    pub fn init_last_pmsg_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(1).init_data(size)
    }
    #[inline]
    pub fn has_last_pmsg_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_launch_log(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_launch_log(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
    }
    #[inline]
    pub fn init_launch_log(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    #[inline]
    pub fn has_launch_log(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_pstore(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::data::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_pstore(&mut self, value: crate::cereal::log_capnp::map::Reader<'_,::capnp::text::Owned,::capnp::data::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_pstore(self, ) -> crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::data::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    #[inline]
    pub fn has_pstore(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_commands(self) -> ::capnp::Result<crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::data::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_commands(&mut self, value: crate::cereal::log_capnp::map::Reader<'_,::capnp::text::Owned,::capnp::data::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_commands(self, ) -> crate::cereal::log_capnp::map::Builder<'a,::capnp::text::Owned,::capnp::data::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), 0)
    }
    #[inline]
    pub fn has_commands(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_pstore(&self) -> crate::cereal::log_capnp::map::Pipeline<::capnp::text::Owned,::capnp::data::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
    pub fn get_commands(&self) -> crate::cereal::log_capnp::map::Pipeline<::capnp::text::Owned,::capnp::data::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(4))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 149] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(73, 37, 122, 146, 112, 134, 46, 161),
      ::capnp::word(10, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(5, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 122, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 87, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 66, 111, 111, 116, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(119, 97, 108, 108, 84, 105, 109, 101),
      ::capnp::word(78, 97, 110, 111, 115, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 115, 116, 75, 109, 115, 103),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 115, 116, 80, 109, 115, 103),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 117, 110, 99, 104, 76, 111),
      ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 115, 116, 111, 114, 101, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 39, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 109, 109, 97, 110, 100, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(150, 182, 62, 24, 226, 60, 177, 248),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 39, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::map::Owned<::capnp::text::Owned,::capnp::data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        5 => <crate::cereal::log_capnp::map::Owned<::capnp::text::Owned,::capnp::data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[5,1,2,3,4,0];
    pub const TYPE_ID: u64 = 0xa12e_8670_927a_2549;
  }
}

pub mod live_parameters_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_valid(self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_gyro_bias(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_angle_offset_deg(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_angle_offset_average_deg(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_stiffness_factor(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_steer_ratio(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_sensor_valid(self) -> bool {
      self.reader.get_bool_field(1)
    }
    #[inline]
    pub fn get_yaw_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_posenet_speed(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_posenet_valid(self) -> bool {
      self.reader.get_bool_field(2)
    }
    #[inline]
    pub fn get_angle_offset_fast_std(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn get_angle_offset_average_std(self) -> f32 {
      self.reader.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn get_stiffness_factor_std(self) -> f32 {
      self.reader.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn get_steer_ratio_std(self) -> f32 {
      self.reader.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn get_roll(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_filter_state(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_filter_state(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 7, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_valid(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_gyro_bias(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_gyro_bias(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_angle_offset_deg(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_angle_offset_deg(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_angle_offset_average_deg(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_angle_offset_average_deg(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_stiffness_factor(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_stiffness_factor(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_steer_ratio(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_steer_ratio(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_sensor_valid(self) -> bool {
      self.builder.get_bool_field(1)
    }
    #[inline]
    pub fn set_sensor_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(1, value);
    }
    #[inline]
    pub fn get_yaw_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_yaw_rate_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_posenet_speed(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_posenet_speed(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_posenet_valid(self) -> bool {
      self.builder.get_bool_field(2)
    }
    #[inline]
    pub fn set_posenet_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(2, value);
    }
    #[inline]
    pub fn get_angle_offset_fast_std(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_angle_offset_fast_std(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
    #[inline]
    pub fn get_angle_offset_average_std(self) -> f32 {
      self.builder.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn set_angle_offset_average_std(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(9, value);
    }
    #[inline]
    pub fn get_stiffness_factor_std(self) -> f32 {
      self.builder.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn set_stiffness_factor_std(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(10, value);
    }
    #[inline]
    pub fn get_steer_ratio_std(self) -> f32 {
      self.builder.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn set_steer_ratio_std(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(11, value);
    }
    #[inline]
    pub fn get_roll(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_roll(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_filter_state(self) -> ::capnp::Result<crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_filter_state(&mut self, value: crate::cereal::log_capnp::live_location_kalman::measurement::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_filter_state(self, ) -> crate::cereal::log_capnp::live_location_kalman::measurement::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_filter_state(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_filter_state(&self) -> crate::cereal::log_capnp::live_location_kalman::measurement::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 277] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(83, 39, 124, 150, 203, 141, 5, 217),
      ::capnp::word(10, 0, 0, 0, 1, 0, 7, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 234, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 135, 3, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 105, 118, 101, 80, 97),
      ::capnp::word(114, 97, 109, 101, 116, 101, 114, 115),
      ::capnp::word(68, 97, 116, 97, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(64, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 1, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 1, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 1, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 1, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 1, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 1, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 2, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 2, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 2, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 2, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 2, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(44, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 2, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(118, 97, 108, 105, 100, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 121, 114, 111, 66, 105, 97, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 108, 101, 79, 102, 102),
      ::capnp::word(115, 101, 116, 68, 101, 103, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 108, 101, 79, 102, 102),
      ::capnp::word(115, 101, 116, 65, 118, 101, 114, 97),
      ::capnp::word(103, 101, 68, 101, 103, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 105, 102, 102, 110, 101, 115),
      ::capnp::word(115, 70, 97, 99, 116, 111, 114, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 82, 97, 116),
      ::capnp::word(105, 111, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 110, 115, 111, 114, 86, 97),
      ::capnp::word(108, 105, 100, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 97, 119, 82, 97, 116, 101, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 101, 110, 101, 116, 83),
      ::capnp::word(112, 101, 101, 100, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 101, 110, 101, 116, 86),
      ::capnp::word(97, 108, 105, 100, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 108, 101, 79, 102, 102),
      ::capnp::word(115, 101, 116, 70, 97, 115, 116, 83),
      ::capnp::word(116, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 108, 101, 79, 102, 102),
      ::capnp::word(115, 101, 116, 65, 118, 101, 114, 97),
      ::capnp::word(103, 101, 83, 116, 100, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 105, 102, 102, 110, 101, 115),
      ::capnp::word(115, 70, 97, 99, 116, 111, 114, 83),
      ::capnp::word(116, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 82, 97, 116),
      ::capnp::word(105, 111, 83, 116, 100, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 108, 108, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 105, 108, 116, 101, 114, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 206, 218, 102, 237, 249, 35, 191),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <bool as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <bool as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <bool as ::capnp::introspect::Introspect>::introspect(),
        10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        11 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        12 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        14 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        15 => <crate::cereal::log_capnp::live_location_kalman::measurement::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[3,11,2,10,15,1,8,9,14,6,5,13,4,12,0,7];
    pub const TYPE_ID: u64 = 0xd905_8dcb_967c_2753;
  }
}

pub mod live_torque_parameters_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_live_valid(self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_lat_accel_factor_raw(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_lat_accel_offset_raw(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_friction_coefficient_raw(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_lat_accel_factor_filtered(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_lat_accel_offset_filtered(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_friction_coefficient_filtered(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_total_bucket_points(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_decay(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn get_max_resets(self) -> f32 {
      self.reader.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn get_points(self) -> ::capnp::Result<::capnp::list_list::Reader<'a,::capnp::primitive_list::Owned<f32>>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_points(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_version(self) -> i32 {
      self.reader.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn get_use_params(self) -> bool {
      self.reader.get_bool_field(1)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 6, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_live_valid(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_live_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_lat_accel_factor_raw(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_lat_accel_factor_raw(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_lat_accel_offset_raw(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_lat_accel_offset_raw(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_friction_coefficient_raw(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_friction_coefficient_raw(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_lat_accel_factor_filtered(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_lat_accel_factor_filtered(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_lat_accel_offset_filtered(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_lat_accel_offset_filtered(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_friction_coefficient_filtered(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_friction_coefficient_filtered(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_total_bucket_points(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_total_bucket_points(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_decay(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_decay(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
    #[inline]
    pub fn get_max_resets(self) -> f32 {
      self.builder.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn set_max_resets(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(9, value);
    }
    #[inline]
    pub fn get_points(self) -> ::capnp::Result<::capnp::list_list::Builder<'a,::capnp::primitive_list::Owned<f32>>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_points(&mut self, value: ::capnp::list_list::Reader<'_,::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_points(self, size: u32) -> ::capnp::list_list::Builder<'a,::capnp::primitive_list::Owned<f32>> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_points(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_version(self) -> i32 {
      self.builder.get_data_field::<i32>(10)
    }
    #[inline]
    pub fn set_version(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(10, value);
    }
    #[inline]
    pub fn get_use_params(self) -> bool {
      self.builder.get_bool_field(1)
    }
    #[inline]
    pub fn set_use_params(&mut self, value: bool)  {
      self.builder.set_bool_field(1, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 240] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(146, 22, 9, 11, 235, 144, 22, 230),
      ::capnp::word(10, 0, 0, 0, 1, 0, 6, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 26, 1, 0, 0),
      ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 223, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 105, 118, 101, 84, 111),
      ::capnp::word(114, 113, 117, 101, 80, 97, 114, 97),
      ::capnp::word(109, 101, 116, 101, 114, 115, 68, 97),
      ::capnp::word(116, 97, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(52, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 1, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 1, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 1, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 1, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 1, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 1, 0, 0, 226, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 1, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 1, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(108, 105, 118, 101, 86, 97, 108, 105),
      ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 65, 99, 99, 101, 108),
      ::capnp::word(70, 97, 99, 116, 111, 114, 82, 97),
      ::capnp::word(119, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 65, 99, 99, 101, 108),
      ::capnp::word(79, 102, 102, 115, 101, 116, 82, 97),
      ::capnp::word(119, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 105, 99, 116, 105, 111, 110),
      ::capnp::word(67, 111, 101, 102, 102, 105, 99, 105),
      ::capnp::word(101, 110, 116, 82, 97, 119, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 65, 99, 99, 101, 108),
      ::capnp::word(70, 97, 99, 116, 111, 114, 70, 105),
      ::capnp::word(108, 116, 101, 114, 101, 100, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 65, 99, 99, 101, 108),
      ::capnp::word(79, 102, 102, 115, 101, 116, 70, 105),
      ::capnp::word(108, 116, 101, 114, 101, 100, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 105, 99, 116, 105, 111, 110),
      ::capnp::word(67, 111, 101, 102, 102, 105, 99, 105),
      ::capnp::word(101, 110, 116, 70, 105, 108, 116, 101),
      ::capnp::word(114, 101, 100, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 111, 116, 97, 108, 66, 117, 99),
      ::capnp::word(107, 101, 116, 80, 111, 105, 110, 116),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 99, 97, 121, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 120, 82, 101, 115, 101, 116),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 105, 110, 116, 115, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 101, 114, 115, 105, 111, 110, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 115, 101, 80, 97, 114, 97, 109),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <bool as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        10 => <::capnp::list_list::Owned<::capnp::primitive_list::Owned<f32>> as ::capnp::introspect::Introspect>::introspect(),
        11 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        12 => <bool as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[8,6,3,4,1,5,2,0,9,10,7,12,11];
    pub const TYPE_ID: u64 = 0xe616_90eb_0b09_1692;
  }
}

pub mod live_map_data_d_e_p_r_e_c_a_t_e_d {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_speed_limit_valid(self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_speed_limit(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_curvature_valid(self) -> bool {
      self.reader.get_bool_field(1)
    }
    #[inline]
    pub fn get_curvature(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_way_id(self) -> u64 {
      self.reader.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn get_road_x(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_road_x(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_road_y(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_road_y(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_last_gps(self) -> ::capnp::Result<crate::cereal::log_capnp::gps_location_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_last_gps(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_road_curvature_x(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_road_curvature_x(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_road_curvature(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_road_curvature(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_dist_to_turn(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_map_valid(self) -> bool {
      self.reader.get_bool_field(2)
    }
    #[inline]
    pub fn get_speed_advisory_valid(self) -> bool {
      self.reader.get_bool_field(3)
    }
    #[inline]
    pub fn get_speed_advisory(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_speed_limit_ahead_valid(self) -> bool {
      self.reader.get_bool_field(4)
    }
    #[inline]
    pub fn get_speed_limit_ahead(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_speed_limit_ahead_distance(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 5 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_speed_limit_valid(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_speed_limit_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_speed_limit(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_speed_limit(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_curvature_valid(self) -> bool {
      self.builder.get_bool_field(1)
    }
    #[inline]
    pub fn set_curvature_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(1, value);
    }
    #[inline]
    pub fn get_curvature(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_curvature(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_way_id(self) -> u64 {
      self.builder.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn set_way_id(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(2, value);
    }
    #[inline]
    pub fn get_road_x(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_road_x(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_road_x(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_road_x(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_road_y(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_road_y(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_road_y(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_road_y(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_last_gps(self) -> ::capnp::Result<crate::cereal::log_capnp::gps_location_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_last_gps(&mut self, value: crate::cereal::log_capnp::gps_location_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_last_gps(self, ) -> crate::cereal::log_capnp::gps_location_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    #[inline]
    pub fn has_last_gps(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_road_curvature_x(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_road_curvature_x(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_road_curvature_x(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_road_curvature_x(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_road_curvature(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_road_curvature(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_road_curvature(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_road_curvature(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_dist_to_turn(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_dist_to_turn(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_map_valid(self) -> bool {
      self.builder.get_bool_field(2)
    }
    #[inline]
    pub fn set_map_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(2, value);
    }
    #[inline]
    pub fn get_speed_advisory_valid(self) -> bool {
      self.builder.get_bool_field(3)
    }
    #[inline]
    pub fn set_speed_advisory_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(3, value);
    }
    #[inline]
    pub fn get_speed_advisory(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_speed_advisory(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_speed_limit_ahead_valid(self) -> bool {
      self.builder.get_bool_field(4)
    }
    #[inline]
    pub fn set_speed_limit_ahead_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(4, value);
    }
    #[inline]
    pub fn get_speed_limit_ahead(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_speed_limit_ahead(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_speed_limit_ahead_distance(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_speed_limit_ahead_distance(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_last_gps(&self) -> crate::cereal::log_capnp::gps_location_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 305] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(166, 17, 247, 147, 143, 38, 62, 148),
      ::capnp::word(10, 0, 0, 0, 1, 0, 5, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(5, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
      ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 191, 3, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 76, 105, 118, 101, 77, 97),
      ::capnp::word(112, 68, 97, 116, 97, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(68, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 1, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 1, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 1, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 2, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 2, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 2, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 2, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 2, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 2, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 2, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 2, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 2, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 2, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 2, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(115, 112, 101, 101, 100, 76, 105, 109),
      ::capnp::word(105, 116, 86, 97, 108, 105, 100, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 76, 105, 109),
      ::capnp::word(105, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
      ::capnp::word(101, 86, 97, 108, 105, 100, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 97, 121, 73, 100, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 88, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 89, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 115, 116, 71, 112, 115, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 213, 173, 89, 72, 82, 70, 233),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 67, 117, 114, 118),
      ::capnp::word(97, 116, 117, 114, 101, 88, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 67, 117, 114, 118),
      ::capnp::word(97, 116, 117, 114, 101, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 105, 115, 116, 84, 111, 84, 117),
      ::capnp::word(114, 110, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 112, 86, 97, 108, 105, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 65, 100, 118),
      ::capnp::word(105, 115, 111, 114, 121, 86, 97, 108),
      ::capnp::word(105, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 65, 100, 118),
      ::capnp::word(105, 115, 111, 114, 121, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 76, 105, 109),
      ::capnp::word(105, 116, 65, 104, 101, 97, 100, 86),
      ::capnp::word(97, 108, 105, 100, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 76, 105, 109),
      ::capnp::word(105, 116, 65, 104, 101, 97, 100, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 76, 105, 109),
      ::capnp::word(105, 116, 65, 104, 101, 97, 100, 68),
      ::capnp::word(105, 115, 116, 97, 110, 99, 101, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <bool as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <bool as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        7 => <crate::cereal::log_capnp::gps_location_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        8 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        9 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        11 => <bool as ::capnp::introspect::Introspect>::introspect(),
        12 => <bool as ::capnp::introspect::Introspect>::introspect(),
        13 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        14 => <bool as ::capnp::introspect::Introspect>::introspect(),
        15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        16 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[3,2,10,7,11,9,8,5,6,13,12,1,15,16,14,0,4];
    pub const TYPE_ID: u64 = 0x943e_268f_93f7_11a6;
  }
}

pub mod camera_odometry {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_trans(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_trans(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_rot(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_rot(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_trans_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_trans_std(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_rot_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_rot_std(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_wide_from_device_euler(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_wide_from_device_euler(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_wide_from_device_euler_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_wide_from_device_euler_std(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_road_transform_trans(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_road_transform_trans(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_road_transform_trans_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_road_transform_trans_std(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 8 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_trans(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_trans(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_trans(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_trans(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_rot(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_rot(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_rot(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_rot(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_trans_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_trans_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_trans_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_trans_std(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_rot_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_rot_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_rot_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_rot_std(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_timestamp_eof(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_timestamp_eof(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_wide_from_device_euler(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_wide_from_device_euler(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_wide_from_device_euler(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_wide_from_device_euler(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_wide_from_device_euler_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_wide_from_device_euler_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_wide_from_device_euler_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_wide_from_device_euler_std(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_road_transform_trans(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_road_transform_trans(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_road_transform_trans(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    #[inline]
    pub fn has_road_transform_trans(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_road_transform_trans_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_road_transform_trans_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_road_transform_trans_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
    }
    #[inline]
    pub fn has_road_transform_trans_std(&self) -> bool {
      !self.builder.is_pointer_field_null(7)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 210] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(150, 26, 212, 159, 107, 41, 154, 250),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(8, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 202, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 55, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 109, 101, 114, 97),
      ::capnp::word(79, 100, 111, 109, 101, 116, 114, 121),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(40, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 1, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 1, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 1, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 1, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 1, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 1, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(116, 114, 97, 110, 115, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 116, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 114, 97, 110, 115, 83, 116, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 116, 83, 116, 100, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 115, 116, 97, 109),
      ::capnp::word(112, 69, 111, 102, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 105, 100, 101, 70, 114, 111, 109),
      ::capnp::word(68, 101, 118, 105, 99, 101, 69, 117),
      ::capnp::word(108, 101, 114, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 105, 100, 101, 70, 114, 111, 109),
      ::capnp::word(68, 101, 118, 105, 99, 101, 69, 117),
      ::capnp::word(108, 101, 114, 83, 116, 100, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 84, 114, 97, 110),
      ::capnp::word(115, 102, 111, 114, 109, 84, 114, 97),
      ::capnp::word(110, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 84, 114, 97, 110),
      ::capnp::word(115, 102, 111, 114, 109, 84, 114, 97),
      ::capnp::word(110, 115, 83, 116, 100, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        4 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        7 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        8 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        9 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[4,8,9,1,3,5,0,2,6,7];
    pub const TYPE_ID: u64 = 0xfa9a_296b_9fd4_1a96;
  }
}

pub mod sentinel {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::cereal::log_capnp::sentinel::SentinelType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_signal(self) -> i32 {
      self.reader.get_data_field::<i32>(1)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::cereal::log_capnp::sentinel::SentinelType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_type(&mut self, value: crate::cereal::log_capnp::sentinel::SentinelType)  {
      self.builder.set_data_field::<u16>(0, value as u16);
    }
    #[inline]
    pub fn get_signal(self) -> i32 {
      self.builder.get_data_field::<i32>(1)
    }
    #[inline]
    pub fn set_signal(&mut self, value: i32)  {
      self.builder.set_data_field::<i32>(1, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 51] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(56, 110, 245, 68, 210, 130, 3, 239),
      ::capnp::word(10, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 119, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 83, 101, 110, 116, 105, 110),
      ::capnp::word(101, 108, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(26, 3, 247, 182, 30, 230, 216, 162),
      ::capnp::word(1, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(83, 101, 110, 116, 105, 110, 101, 108),
      ::capnp::word(84, 121, 112, 101, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(26, 3, 247, 182, 30, 230, 216, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 105, 103, 110, 97, 108, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <crate::cereal::log_capnp::sentinel::SentinelType as ::capnp::introspect::Introspect>::introspect(),
        1 => <i32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,0];
    pub const TYPE_ID: u64 = 0xef03_82d2_44f5_6e38;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum SentinelType {
    EndOfSegment = 0,
    EndOfRoute = 1,
    StartOfSegment = 2,
    StartOfRoute = 3,
  }

  impl ::capnp::introspect::Introspect for SentinelType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &sentinel_type::ENCODED_NODE, annotation_types: sentinel_type::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<SentinelType> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: SentinelType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &sentinel_type::ENCODED_NODE, annotation_types: sentinel_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for SentinelType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <SentinelType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::EndOfSegment),
        1 => ::core::result::Result::Ok(Self::EndOfRoute),
        2 => ::core::result::Result::Ok(Self::StartOfSegment),
        3 => ::core::result::Result::Ok(Self::StartOfRoute),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<SentinelType> for u16 {
    #[inline]
    fn from(x: SentinelType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for SentinelType {
    const TYPE_ID: u64 = 0xa2d8_e61e_b6f7_031au64;
  }
  mod sentinel_type {
  pub static ENCODED_NODE: [::capnp::Word; 38] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(26, 3, 247, 182, 30, 230, 216, 162),
    ::capnp::word(19, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(56, 110, 245, 68, 210, 130, 3, 239),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 103, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 83, 101, 110, 116, 105, 110),
    ::capnp::word(101, 108, 46, 83, 101, 110, 116, 105),
    ::capnp::word(110, 101, 108, 84, 121, 112, 101, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 110, 100, 79, 102, 83, 101, 103),
    ::capnp::word(109, 101, 110, 116, 0, 0, 0, 0),
    ::capnp::word(101, 110, 100, 79, 102, 82, 111, 117),
    ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 116, 97, 114, 116, 79, 102, 83),
    ::capnp::word(101, 103, 109, 101, 110, 116, 0, 0),
    ::capnp::word(115, 116, 97, 114, 116, 79, 102, 82),
    ::capnp::word(111, 117, 116, 101, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}

pub mod u_i_debug {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_draw_time_millis(self) -> f32 {
      self.reader.get_data_field::<f32>(0)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_draw_time_millis(self) -> f32 {
      self.builder.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn set_draw_time_millis(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(0, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 33] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(207, 234, 250, 111, 137, 173, 53, 254),
      ::capnp::word(10, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 63, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 85, 73, 68, 101, 98, 117),
      ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(100, 114, 97, 119, 84, 105, 109, 101),
      ::capnp::word(77, 105, 108, 108, 105, 115, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0];
    pub const TYPE_ID: u64 = 0xfe35_ad89_6ffa_eacf;
  }
}

pub mod manager_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_processes(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::manager_state::process_state::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_processes(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_processes(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::manager_state::process_state::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_processes(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::manager_state::process_state::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_processes(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::manager_state::process_state::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_processes(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 41] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(91, 99, 105, 26, 179, 84, 113, 207),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 186, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 63, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 77, 97, 110, 97, 103, 101),
      ::capnp::word(114, 83, 116, 97, 116, 101, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(234, 105, 132, 112, 210, 84, 154, 134),
      ::capnp::word(1, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(80, 114, 111, 99, 101, 115, 115, 83),
      ::capnp::word(116, 97, 116, 101, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(112, 114, 111, 99, 101, 115, 115, 101),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(234, 105, 132, 112, 210, 84, 154, 134),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::manager_state::process_state::Owned> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0];
    pub const TYPE_ID: u64 = 0xcf71_54b3_1a69_635b;
  }

  pub mod process_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_pid(self) -> i32 {
        self.reader.get_data_field::<i32>(0)
      }
      #[inline]
      pub fn get_running(self) -> bool {
        self.reader.get_bool_field(32)
      }
      #[inline]
      pub fn get_exit_code(self) -> i32 {
        self.reader.get_data_field::<i32>(2)
      }
      #[inline]
      pub fn get_should_be_running(self) -> bool {
        self.reader.get_bool_field(33)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 1 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_name(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
      }
      #[inline]
      pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_name(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_pid(self) -> i32 {
        self.builder.get_data_field::<i32>(0)
      }
      #[inline]
      pub fn set_pid(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(0, value);
      }
      #[inline]
      pub fn get_running(self) -> bool {
        self.builder.get_bool_field(32)
      }
      #[inline]
      pub fn set_running(&mut self, value: bool)  {
        self.builder.set_bool_field(32, value);
      }
      #[inline]
      pub fn get_exit_code(self) -> i32 {
        self.builder.get_data_field::<i32>(2)
      }
      #[inline]
      pub fn set_exit_code(&mut self, value: i32)  {
        self.builder.set_data_field::<i32>(2, value);
      }
      #[inline]
      pub fn get_should_be_running(self) -> bool {
        self.builder.get_bool_field(33)
      }
      #[inline]
      pub fn set_should_be_running(&mut self, value: bool)  {
        self.builder.set_bool_field(33, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 96] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(234, 105, 132, 112, 210, 84, 154, 134),
        ::capnp::word(23, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(91, 99, 105, 26, 179, 84, 113, 207),
        ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 34, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 31, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 97, 110, 97, 103, 101),
        ::capnp::word(114, 83, 116, 97, 116, 101, 46, 80),
        ::capnp::word(114, 111, 99, 101, 115, 115, 83, 116),
        ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(125, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(136, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 32, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(133, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(128, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(140, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(137, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(136, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 33, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 0, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(144, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(156, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 105, 100, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 117, 110, 110, 105, 110, 103, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 120, 105, 116, 67, 111, 100, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 104, 111, 117, 108, 100, 66, 101),
        ::capnp::word(82, 117, 110, 110, 105, 110, 103, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          1 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <bool as ::capnp::introspect::Introspect>::introspect(),
          3 => <i32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <bool as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[3,0,1,2,4];
      pub const TYPE_ID: u64 = 0x869a_54d2_7084_69ea;
    }
  }
}

pub mod uploader_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_immediate_queue_size(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_immediate_queue_count(self) -> u32 {
      self.reader.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn get_raw_queue_size(self) -> u32 {
      self.reader.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn get_raw_queue_count(self) -> u32 {
      self.reader.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn get_last_time(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_last_speed(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_last_filename(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_last_filename(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_immediate_queue_size(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_immediate_queue_size(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_immediate_queue_count(self) -> u32 {
      self.builder.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn set_immediate_queue_count(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn get_raw_queue_size(self) -> u32 {
      self.builder.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn set_raw_queue_size(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(2, value);
    }
    #[inline]
    pub fn get_raw_queue_count(self) -> u32 {
      self.builder.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn set_raw_queue_count(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(3, value);
    }
    #[inline]
    pub fn get_last_time(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_last_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_last_speed(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_last_speed(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_last_filename(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_last_filename(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
    }
    #[inline]
    pub fn init_last_filename(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_last_filename(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 131] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(30, 70, 107, 183, 57, 107, 38, 222),
      ::capnp::word(10, 0, 0, 0, 1, 0, 3, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 194, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 143, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 85, 112, 108, 111, 97, 100),
      ::capnp::word(101, 114, 83, 116, 97, 116, 101, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(105, 109, 109, 101, 100, 105, 97, 116),
      ::capnp::word(101, 81, 117, 101, 117, 101, 83, 105),
      ::capnp::word(122, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 109, 109, 101, 100, 105, 97, 116),
      ::capnp::word(101, 81, 117, 101, 117, 101, 67, 111),
      ::capnp::word(117, 110, 116, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 119, 81, 117, 101, 117, 101),
      ::capnp::word(83, 105, 122, 101, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 119, 81, 117, 101, 117, 101),
      ::capnp::word(67, 111, 117, 110, 116, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 115, 116, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 115, 116, 83, 112, 101, 101),
      ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 115, 116, 70, 105, 108, 101),
      ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,0,6,5,4,3,2];
    pub const TYPE_ID: u64 = 0xde26_6b39_b76b_461e;
  }
}

pub mod nav_instruction {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_maneuver_primary_text(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_maneuver_primary_text(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_maneuver_secondary_text(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_maneuver_secondary_text(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_maneuver_distance(self) -> f32 {
      self.reader.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn get_maneuver_type(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_maneuver_type(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_maneuver_modifier(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_maneuver_modifier(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_distance_remaining(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_time_remaining(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_time_remaining_typical(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_lanes(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::nav_instruction::lane::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_lanes(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_show_full(self) -> bool {
      self.reader.get_bool_field(128)
    }
    #[inline]
    pub fn get_speed_limit(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_speed_limit_sign(self) -> ::core::result::Result<crate::cereal::log_capnp::nav_instruction::SpeedLimitSign,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(9))
    }
    #[inline]
    pub fn get_all_maneuvers(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::nav_instruction::maneuver::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_all_maneuvers(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 6 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_maneuver_primary_text(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_maneuver_primary_text(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
    }
    #[inline]
    pub fn init_maneuver_primary_text(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_maneuver_primary_text(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_maneuver_secondary_text(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_maneuver_secondary_text(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
    }
    #[inline]
    pub fn init_maneuver_secondary_text(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    #[inline]
    pub fn has_maneuver_secondary_text(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_maneuver_distance(self) -> f32 {
      self.builder.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn set_maneuver_distance(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(0, value);
    }
    #[inline]
    pub fn get_maneuver_type(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_maneuver_type(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
    }
    #[inline]
    pub fn init_maneuver_type(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    #[inline]
    pub fn has_maneuver_type(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_maneuver_modifier(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_maneuver_modifier(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false).unwrap()
    }
    #[inline]
    pub fn init_maneuver_modifier(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(3).init_text(size)
    }
    #[inline]
    pub fn has_maneuver_modifier(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_distance_remaining(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_distance_remaining(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_time_remaining(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_time_remaining(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_time_remaining_typical(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_time_remaining_typical(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_lanes(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::nav_instruction::lane::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_lanes(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::nav_instruction::lane::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_lanes(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::nav_instruction::lane::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_lanes(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_show_full(self) -> bool {
      self.builder.get_bool_field(128)
    }
    #[inline]
    pub fn set_show_full(&mut self, value: bool)  {
      self.builder.set_bool_field(128, value);
    }
    #[inline]
    pub fn get_speed_limit(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_speed_limit(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_speed_limit_sign(self) -> ::core::result::Result<crate::cereal::log_capnp::nav_instruction::SpeedLimitSign,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(9))
    }
    #[inline]
    pub fn set_speed_limit_sign(&mut self, value: crate::cereal::log_capnp::nav_instruction::SpeedLimitSign)  {
      self.builder.set_data_field::<u16>(9, value as u16);
    }
    #[inline]
    pub fn get_all_maneuvers(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::nav_instruction::maneuver::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_all_maneuvers(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::nav_instruction::maneuver::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_all_maneuvers(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::nav_instruction::maneuver::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_all_maneuvers(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 254] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(175, 2, 134, 127, 178, 22, 130, 193),
      ::capnp::word(10, 0, 0, 0, 1, 0, 3, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 202, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 71, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 0, 0, 0, 223, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 78, 97, 118, 73, 110, 115),
      ::capnp::word(116, 114, 117, 99, 116, 105, 111, 110),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(217, 57, 164, 192, 137, 22, 205, 164),
      ::capnp::word(25, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(146, 193, 229, 201, 216, 185, 165, 238),
      ::capnp::word(21, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(102, 156, 208, 104, 165, 10, 110, 182),
      ::capnp::word(21, 0, 0, 0, 122, 0, 0, 0),
      ::capnp::word(69, 10, 226, 108, 26, 74, 236, 179),
      ::capnp::word(21, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(76, 97, 110, 101, 0, 0, 0, 0),
      ::capnp::word(68, 105, 114, 101, 99, 116, 105, 111),
      ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(83, 112, 101, 101, 100, 76, 105, 109),
      ::capnp::word(105, 116, 83, 105, 103, 110, 0, 0),
      ::capnp::word(77, 97, 110, 101, 117, 118, 101, 114),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 1, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 1, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 1, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 1, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 1, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 1, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 1, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 1, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 128, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 1, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 1, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 1, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 1, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(109, 97, 110, 101, 117, 118, 101, 114),
      ::capnp::word(80, 114, 105, 109, 97, 114, 121, 84),
      ::capnp::word(101, 120, 116, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 110, 101, 117, 118, 101, 114),
      ::capnp::word(83, 101, 99, 111, 110, 100, 97, 114),
      ::capnp::word(121, 84, 101, 120, 116, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 110, 101, 117, 118, 101, 114),
      ::capnp::word(68, 105, 115, 116, 97, 110, 99, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 110, 101, 117, 118, 101, 114),
      ::capnp::word(84, 121, 112, 101, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 110, 101, 117, 118, 101, 114),
      ::capnp::word(77, 111, 100, 105, 102, 105, 101, 114),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 105, 115, 116, 97, 110, 99, 101),
      ::capnp::word(82, 101, 109, 97, 105, 110, 105, 110),
      ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 82, 101, 109, 97),
      ::capnp::word(105, 110, 105, 110, 103, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 109, 101, 82, 101, 109, 97),
      ::capnp::word(105, 110, 105, 110, 103, 84, 121, 112),
      ::capnp::word(105, 99, 97, 108, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 110, 101, 115, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 57, 164, 192, 137, 22, 205, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 104, 111, 119, 70, 117, 108, 108),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 76, 105, 109),
      ::capnp::word(105, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 76, 105, 109),
      ::capnp::word(105, 116, 83, 105, 103, 110, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 156, 208, 104, 165, 10, 110, 182),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 108, 77, 97, 110, 101, 117),
      ::capnp::word(118, 101, 114, 115, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 10, 226, 108, 26, 74, 236, 179),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        4 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::nav_instruction::lane::Owned> as ::capnp::introspect::Introspect>::introspect(),
        9 => <bool as ::capnp::introspect::Introspect>::introspect(),
        10 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        11 => <crate::cereal::log_capnp::nav_instruction::SpeedLimitSign as ::capnp::introspect::Introspect>::introspect(),
        12 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::nav_instruction::maneuver::Owned> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[12,5,8,2,4,0,1,3,9,10,11,6,7];
    pub const TYPE_ID: u64 = 0xc182_16b2_7f86_02af;
  }

  pub mod lane {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_directions(self) -> ::capnp::Result<::capnp::enum_list::Reader<'a,crate::cereal::log_capnp::nav_instruction::Direction>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_directions(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_active_direction(self) -> ::core::result::Result<crate::cereal::log_capnp::nav_instruction::Direction,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 1 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_directions(self) -> ::capnp::Result<::capnp::enum_list::Builder<'a,crate::cereal::log_capnp::nav_instruction::Direction>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_directions(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::enum_list::Owned<crate::cereal::log_capnp::nav_instruction::Direction>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_directions(self, size: u32) -> ::capnp::enum_list::Builder<'a,crate::cereal::log_capnp::nav_instruction::Direction> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_directions(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_active(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_active(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_active_direction(self) -> ::core::result::Result<crate::cereal::log_capnp::nav_instruction::Direction,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
      }
      #[inline]
      pub fn set_active_direction(&mut self, value: crate::cereal::log_capnp::nav_instruction::Direction)  {
        self.builder.set_data_field::<u16>(1, value as u16);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 69] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(217, 57, 164, 192, 137, 22, 205, 164),
        ::capnp::word(25, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(175, 2, 134, 127, 178, 22, 130, 193),
        ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 175, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 78, 97, 118, 73, 110, 115),
        ::capnp::word(116, 114, 117, 99, 116, 105, 111, 110),
        ::capnp::word(46, 76, 97, 110, 101, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 0, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(96, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(93, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(88, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(100, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(100, 105, 114, 101, 99, 116, 105, 111),
        ::capnp::word(110, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(146, 193, 229, 201, 216, 185, 165, 238),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 116, 105, 118, 101, 68, 105),
        ::capnp::word(114, 101, 99, 116, 105, 111, 110, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(146, 193, 229, 201, 216, 185, 165, 238),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::enum_list::Owned<crate::cereal::log_capnp::nav_instruction::Direction> as ::capnp::introspect::Introspect>::introspect(),
          1 => <bool as ::capnp::introspect::Introspect>::introspect(),
          2 => <crate::cereal::log_capnp::nav_instruction::Direction as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,2,0];
      pub const TYPE_ID: u64 = 0xa4cd_1689_c0a4_39d9;
    }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum Direction {
    None = 0,
    Left = 1,
    Right = 2,
    Straight = 3,
    SlightLeft = 4,
    SlightRight = 5,
  }

  impl ::capnp::introspect::Introspect for Direction {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &direction::ENCODED_NODE, annotation_types: direction::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<Direction> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: Direction) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &direction::ENCODED_NODE, annotation_types: direction::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for Direction {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <Direction as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::None),
        1 => ::core::result::Result::Ok(Self::Left),
        2 => ::core::result::Result::Ok(Self::Right),
        3 => ::core::result::Result::Ok(Self::Straight),
        4 => ::core::result::Result::Ok(Self::SlightLeft),
        5 => ::core::result::Result::Ok(Self::SlightRight),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<Direction> for u16 {
    #[inline]
    fn from(x: Direction) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for Direction {
    const TYPE_ID: u64 = 0xeea5_b9d8_c9e5_c192u64;
  }
  mod direction {
  pub static ENCODED_NODE: [::capnp::Word; 46] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(146, 193, 229, 201, 216, 185, 165, 238),
    ::capnp::word(25, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(175, 2, 134, 127, 178, 22, 130, 193),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 26, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 151, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 78, 97, 118, 73, 110, 115),
    ::capnp::word(116, 114, 117, 99, 116, 105, 111, 110),
    ::capnp::word(46, 68, 105, 114, 101, 99, 116, 105),
    ::capnp::word(111, 110, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(24, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
    ::capnp::word(108, 101, 102, 116, 0, 0, 0, 0),
    ::capnp::word(114, 105, 103, 104, 116, 0, 0, 0),
    ::capnp::word(115, 116, 114, 97, 105, 103, 104, 116),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 108, 105, 103, 104, 116, 76, 101),
    ::capnp::word(102, 116, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 108, 105, 103, 104, 116, 82, 105),
    ::capnp::word(103, 104, 116, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum SpeedLimitSign {
    Mutcd = 0,
    Vienna = 1,
  }

  impl ::capnp::introspect::Introspect for SpeedLimitSign {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &speed_limit_sign::ENCODED_NODE, annotation_types: speed_limit_sign::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<SpeedLimitSign> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: SpeedLimitSign) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &speed_limit_sign::ENCODED_NODE, annotation_types: speed_limit_sign::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for SpeedLimitSign {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <SpeedLimitSign as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Mutcd),
        1 => ::core::result::Result::Ok(Self::Vienna),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<SpeedLimitSign> for u16 {
    #[inline]
    fn from(x: SpeedLimitSign) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for SpeedLimitSign {
    const TYPE_ID: u64 = 0xb66e_0aa5_68d0_9c66u64;
  }
  mod speed_limit_sign {
  pub static ENCODED_NODE: [::capnp::Word; 27] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(102, 156, 208, 104, 165, 10, 110, 182),
    ::capnp::word(25, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(175, 2, 134, 127, 178, 22, 130, 193),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 66, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 55, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 78, 97, 118, 73, 110, 115),
    ::capnp::word(116, 114, 117, 99, 116, 105, 111, 110),
    ::capnp::word(46, 83, 112, 101, 101, 100, 76, 105),
    ::capnp::word(109, 105, 116, 83, 105, 103, 110, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(8, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 117, 116, 99, 100, 0, 0, 0),
    ::capnp::word(118, 105, 101, 110, 110, 97, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod maneuver {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_distance(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_type(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_type(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_modifier(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_modifier(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_distance(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_distance(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_type(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_type(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
      }
      #[inline]
      pub fn init_type(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      #[inline]
      pub fn has_type(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_modifier(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_modifier(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
      }
      #[inline]
      pub fn init_modifier(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      #[inline]
      pub fn has_modifier(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 66] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(69, 10, 226, 108, 26, 74, 236, 179),
        ::capnp::word(25, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(175, 2, 134, 127, 178, 22, 130, 193),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 175, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 78, 97, 118, 73, 110, 115),
        ::capnp::word(116, 114, 117, 99, 116, 105, 111, 110),
        ::capnp::word(46, 77, 97, 110, 101, 117, 118, 101),
        ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(80, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(77, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(81, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(80, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(100, 105, 115, 116, 97, 110, 99, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 111, 100, 105, 102, 105, 101, 114),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,2,1];
      pub const TYPE_ID: u64 = 0xb3ec_4a1a_6ce2_0a45;
    }
  }
}

pub mod nav_route {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_coordinates(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::nav_route::coordinate::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_coordinates(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_coordinates(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::nav_route::coordinate::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_coordinates(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::nav_route::coordinate::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_coordinates(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::nav_route::coordinate::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_coordinates(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 41] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(211, 151, 13, 68, 246, 82, 20, 166),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 63, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 78, 97, 118, 82, 111, 117),
      ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(133, 116, 30, 173, 83, 111, 201, 196),
      ::capnp::word(1, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(67, 111, 111, 114, 100, 105, 110, 97),
      ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(99, 111, 111, 114, 100, 105, 110, 97),
      ::capnp::word(116, 101, 115, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 116, 30, 173, 83, 111, 201, 196),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::nav_route::coordinate::Owned> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0];
    pub const TYPE_ID: u64 = 0xa614_52f6_440d_97d3;
  }

  pub mod coordinate {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_latitude(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_longitude(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_latitude(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_latitude(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_longitude(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_longitude(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 50] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(133, 116, 30, 173, 83, 111, 201, 196),
        ::capnp::word(19, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(211, 151, 13, 68, 246, 82, 20, 166),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 78, 97, 118, 82, 111, 117),
        ::capnp::word(116, 101, 46, 67, 111, 111, 114, 100),
        ::capnp::word(105, 110, 97, 116, 101, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(49, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(48, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(60, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(108, 97, 116, 105, 116, 117, 100, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 110, 103, 105, 116, 117, 100),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
      pub const TYPE_ID: u64 = 0xc4c9_6f53_ad1e_7485;
    }
  }
}

pub mod map_render_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_location_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_render_time(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(3)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_location_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_location_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_render_time(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_render_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(3, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 66] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(27, 168, 250, 76, 42, 221, 88, 161),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 202, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 175, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 77, 97, 112, 82, 101, 110),
      ::capnp::word(100, 101, 114, 83, 116, 97, 116, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(108, 111, 99, 97, 116, 105, 111, 110),
      ::capnp::word(77, 111, 110, 111, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 101, 110, 100, 101, 114, 84, 105),
      ::capnp::word(109, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[2,0,1];
    pub const TYPE_ID: u64 = 0xa158_dd2a_4cfa_a81b;
  }
}

pub mod nav_model_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_model_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_dsp_execution_time(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_features(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_features(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_position(self) -> ::capnp::Result<crate::cereal::log_capnp::nav_model_data::x_y_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_position(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_desire_prediction(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_desire_prediction(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_location_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(2)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 3 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_frame_id(self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_frame_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_model_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_model_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_dsp_execution_time(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_dsp_execution_time(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_features(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_features(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_features(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_features(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_position(self) -> ::capnp::Result<crate::cereal::log_capnp::nav_model_data::x_y_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_position(&mut self, value: crate::cereal::log_capnp::nav_model_data::x_y_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_position(self, ) -> crate::cereal::log_capnp::nav_model_data::x_y_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_position(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_desire_prediction(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_desire_prediction(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_desire_prediction(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_desire_prediction(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_location_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn set_location_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(2, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_position(&self) -> crate::cereal::log_capnp::nav_model_data::x_y_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 143] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(122, 5, 190, 55, 196, 229, 61, 172),
      ::capnp::word(10, 0, 0, 0, 1, 0, 3, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 186, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 0, 0, 0, 143, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 78, 97, 118, 77, 111, 100),
      ::capnp::word(101, 108, 68, 97, 116, 97, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(38, 126, 80, 178, 21, 230, 9, 190),
      ::capnp::word(1, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(88, 89, 68, 97, 116, 97, 0, 0),
      ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 1, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(102, 114, 97, 109, 101, 73, 100, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 108, 69, 120, 101),
      ::capnp::word(99, 117, 116, 105, 111, 110, 84, 105),
      ::capnp::word(109, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 115, 112, 69, 120, 101, 99, 117),
      ::capnp::word(116, 105, 111, 110, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 101, 97, 116, 117, 114, 101, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 115, 105, 116, 105, 111, 110),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(38, 126, 80, 178, 21, 230, 9, 190),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 115, 105, 114, 101, 80, 114),
      ::capnp::word(101, 100, 105, 99, 116, 105, 111, 110),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 99, 97, 116, 105, 111, 110),
      ::capnp::word(77, 111, 110, 111, 84, 105, 109, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::nav_model_data::x_y_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        6 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[5,2,3,0,6,1,4];
    pub const TYPE_ID: u64 = 0xac3d_e5c4_37be_057a;
  }

  pub mod x_y_data {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_y(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_x_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_x_std(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_y_std(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_y_std(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 4 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_x(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_x(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_x(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_x(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_y(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_y(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_y(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_y(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_x_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_x_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_x_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_x_std(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_y_std(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_y_std(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_y_std(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_y_std(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 94] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(38, 126, 80, 178, 21, 230, 9, 190),
        ::capnp::word(23, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(122, 5, 190, 55, 196, 229, 61, 172),
        ::capnp::word(4, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 242, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 231, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 78, 97, 118, 77, 111, 100),
        ::capnp::word(101, 108, 68, 97, 116, 97, 46, 88),
        ::capnp::word(89, 68, 97, 116, 97, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(140, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(137, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(132, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(160, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(157, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(152, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(180, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 83, 116, 100, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 83, 116, 100, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,2,1,3];
      pub const TYPE_ID: u64 = 0xbe09_e615_b250_7e26;
    }
  }
}

pub mod encode_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_idx(self) -> ::capnp::Result<crate::cereal::log_capnp::encode_index::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_idx(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_data(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_data(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_header(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_header(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_unix_timestamp_nanos(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_width(self) -> u32 {
      self.reader.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn get_height(self) -> u32 {
      self.reader.get_data_field::<u32>(3)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 3 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_idx(self) -> ::capnp::Result<crate::cereal::log_capnp::encode_index::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_idx(&mut self, value: crate::cereal::log_capnp::encode_index::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_idx(self, ) -> crate::cereal::log_capnp::encode_index::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_idx(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_data(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_data(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(1).set_data(value);
    }
    #[inline]
    pub fn init_data(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(1).init_data(size)
    }
    #[inline]
    pub fn has_data(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_header(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_header(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(2).set_data(value);
    }
    #[inline]
    pub fn init_header(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(2).init_data(size)
    }
    #[inline]
    pub fn has_header(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_unix_timestamp_nanos(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_unix_timestamp_nanos(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_width(self) -> u32 {
      self.builder.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn set_width(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(2, value);
    }
    #[inline]
    pub fn get_height(self) -> u32 {
      self.builder.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn set_height(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(3, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_idx(&self) -> crate::cereal::log_capnp::encode_index::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 109] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(240, 133, 221, 85, 179, 234, 154, 207),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 170, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 87, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 69, 110, 99, 111, 100, 101),
      ::capnp::word(68, 97, 116, 97, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(148, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(160, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(105, 100, 120, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 97, 116, 97, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 101, 97, 100, 101, 114, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 110, 105, 120, 84, 105, 109, 101),
      ::capnp::word(115, 116, 97, 109, 112, 78, 97, 110),
      ::capnp::word(111, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 105, 100, 116, 104, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 101, 105, 103, 104, 116, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <crate::cereal::log_capnp::encode_index::Owned as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        3 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        4 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,2,5,0,3,4];
    pub const TYPE_ID: u64 = 0xcf9a_eab3_55dd_85f0;
  }
}

pub mod user_flag {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 16] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(80, 155, 141, 228, 157, 106, 52, 254),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 85, 115, 101, 114, 70, 108),
      ::capnp::word(97, 103, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      panic!("invalid field index {}", index)
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[];
    pub const TYPE_ID: u64 = 0xfe34_6a9d_e48d_9b50;
  }
}

pub mod microphone {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_sound_pressure(self) -> f32 {
      self.reader.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn get_sound_pressure_weighted_db(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_filtered_sound_pressure_weighted_db(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_sound_pressure_weighted(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_sound_pressure(self) -> f32 {
      self.builder.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn set_sound_pressure(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(0, value);
    }
    #[inline]
    pub fn get_sound_pressure_weighted_db(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_sound_pressure_weighted_db(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_filtered_sound_pressure_weighted_db(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_filtered_sound_pressure_weighted_db(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_sound_pressure_weighted(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_sound_pressure_weighted(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 85] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(35, 96, 114, 144, 137, 19, 36, 220),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 170, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 231, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 77, 105, 99, 114, 111, 112),
      ::capnp::word(104, 111, 110, 101, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 0, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 0, 0, 0, 2, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 0, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(115, 111, 117, 110, 100, 80, 114, 101),
      ::capnp::word(115, 115, 117, 114, 101, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 117, 110, 100, 80, 114, 101),
      ::capnp::word(115, 115, 117, 114, 101, 87, 101, 105),
      ::capnp::word(103, 104, 116, 101, 100, 68, 98, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 105, 108, 116, 101, 114, 101, 100),
      ::capnp::word(83, 111, 117, 110, 100, 80, 114, 101),
      ::capnp::word(115, 115, 117, 114, 101, 87, 101, 105),
      ::capnp::word(103, 104, 116, 101, 100, 68, 98, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 117, 110, 100, 80, 114, 101),
      ::capnp::word(115, 115, 117, 114, 101, 87, 101, 105),
      ::capnp::word(103, 104, 116, 101, 100, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[2,0,3,1];
    pub const TYPE_ID: u64 = 0xdc24_1389_9072_6023;
  }
}

pub mod event {
  pub use self::Which::{InitData,RoadCameraState,GpsNMEA,SensorEventDEPRECATED,Can,DeviceState,ControlsState,LiveEventDEPRECATED,Model,FeaturesDEPRECATED,SensorEventsDEPRECATED,PandaStateDEPRECATED,RadarState,LiveUIDEPRECATED,RoadEncodeIdx,LiveTracks,Sendcan,LogMessage,LiveCalibration,AndroidLog,GpsLocation,CarState,CarControl,LongitudinalPlan,LiveLocationDEPRECATED,EthernetDataDEPRECATED,NavUpdateDEPRECATED,CellInfoDEPRECATED,WifiScanDEPRECATED,AndroidGnssDEPRECATED,QcomGnss,LidarPtsDEPRECATED,ProcLog,UbloxGnss,Clocks,LiveMpcDEPRECATED,LiveLongitudinalMpcDEPRECATED,NavStatusDEPRECATED,UbloxRaw,GpsPlannerPointsDEPRECATED,GpsPlannerPlanDEPRECATED,ApplanixRawDEPRECATED,TrafficEventsDEPRECATED,LiveLocationTimingDEPRECATED,OrbslamCorrectionDEPRECATED,LiveLocationCorrectedDEPRECATED,OrbObservationDEPRECATED,GpsLocationExternal,LocationDEPRECATED,UiNavigationEventDEPRECATED,LiveLocationKalmanDEPRECATED,TestJoystick,OrbOdometryDEPRECATED,OrbFeaturesDEPRECATED,ApplanixLocationDEPRECATED,OrbKeyFrameDEPRECATED,UiLayoutStateDEPRECATED,OrbFeaturesSummaryDEPRECATED,DriverStateDEPRECATED,Boot,LiveParameters,LiveMapDataDEPRECATED,CameraOdometry,LateralPlanDEPRECATED,KalmanOdometryDEPRECATED,Thumbnail,OnroadEvents,CarParams,DriverCameraState,DriverMonitoringState,LiveLocationKalman,Sentinel,WideRoadCameraState,ModelV2,DriverEncodeIdx,WideRoadEncodeIdx,ManagerState,UploaderState,PeripheralState,PandaStates,NavInstruction,NavRoute,NavThumbnail,ErrorLogMessage,RoadEncodeData,DriverEncodeData,WideRoadEncodeData,QRoadEncodeData,QRoadEncodeIdx,GnssMeasurements,DriverStateV2,UserFlag,LiveTorqueParameters,Magnetometer,LightSensor,TemperatureSensor,Accelerometer,Gyroscope,Gyroscope2,Accelerometer2,UiDebug,Microphone,NavModel,MapRenderState,UiPlan,CustomReserved0,CustomReserved1,CustomReserved2,CustomReserved3,CustomReserved4,CustomReserved5,CustomReserved6,CustomReserved7,CustomReserved8,CustomReserved9,LivestreamRoadEncodeIdx,LivestreamWideRoadEncodeIdx,LivestreamDriverEncodeIdx,LivestreamRoadEncodeData,LivestreamWideRoadEncodeData,LivestreamDriverEncodeData,TemperatureSensor2,CustomReservedRawData0,CustomReservedRawData1,CustomReservedRawData2,CarOutput};

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_log_mono_time(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn has_init_data(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 0 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_road_camera_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gps_n_m_e_a(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 2 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_sensor_event_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 3 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_can(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 4 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_device_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 5 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_controls_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 6 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_event_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 7 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_model(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 8 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_features_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 9 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_sensor_events_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 10 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_panda_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 11 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_radar_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 12 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_u_i_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 13 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_road_encode_idx(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 14 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_tracks(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 15 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_sendcan(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 16 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_log_message(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 17 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_calibration(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 18 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_android_log(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 19 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gps_location(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 20 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_car_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 21 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_car_control(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 22 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_longitudinal_plan(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 23 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_location_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 24 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_ethernet_data_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 25 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_nav_update_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 26 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_cell_info_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 27 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_wifi_scan_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 28 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_android_gnss_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 29 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_qcom_gnss(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 30 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_lidar_pts_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 31 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_proc_log(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 32 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_ublox_gnss(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 33 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_clocks(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 34 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_mpc_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 35 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_longitudinal_mpc_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 36 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_nav_status_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 37 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_ublox_raw(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 38 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gps_planner_points_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 39 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gps_planner_plan_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 40 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_applanix_raw_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 41 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_traffic_events_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 42 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_location_timing_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 43 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_orbslam_correction_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 44 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_location_corrected_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 45 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_orb_observation_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 46 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gps_location_external(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 47 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_location_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 48 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_ui_navigation_event_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 49 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_location_kalman_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 50 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_test_joystick(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 51 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_orb_odometry_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 52 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_orb_features_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 53 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_applanix_location_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 54 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_orb_key_frame_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 55 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_ui_layout_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 56 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_orb_features_summary_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 57 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_driver_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 58 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_boot(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 59 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_parameters(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 60 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_map_data_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 61 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_camera_odometry(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 62 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_lateral_plan_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 63 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_kalman_odometry_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 64 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_thumbnail(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 65 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_valid(self) -> bool {
      self.reader.get_bool_field_mask(80, true)
    }
    #[inline]
    pub fn has_onroad_events(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 66 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_car_params(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 67 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_driver_camera_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 68 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_driver_monitoring_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 69 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_location_kalman(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 70 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_sentinel(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 71 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_wide_road_camera_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 72 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_model_v2(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 73 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_driver_encode_idx(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 74 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_wide_road_encode_idx(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 75 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_manager_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 76 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_uploader_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 77 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_peripheral_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 78 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_panda_states(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 79 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_nav_instruction(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 80 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_nav_route(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 81 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_nav_thumbnail(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 82 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_error_log_message(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 83 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_road_encode_data(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 84 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_driver_encode_data(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 85 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_wide_road_encode_data(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 86 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_q_road_encode_data(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 87 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_q_road_encode_idx(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 88 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gnss_measurements(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 89 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_driver_state_v2(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 90 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_user_flag(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 91 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_live_torque_parameters(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 92 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_magnetometer(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 93 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_light_sensor(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 94 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_temperature_sensor(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 95 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_accelerometer(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 96 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gyroscope(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 97 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_gyroscope2(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 98 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_accelerometer2(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 99 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_ui_debug(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 100 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_microphone(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 101 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_nav_model(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 102 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_map_render_state(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 103 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_ui_plan(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 104 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved0(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 105 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved1(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 106 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved2(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 107 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved3(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 108 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved4(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 109 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved5(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 110 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved6(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 111 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved7(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 112 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved8(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 113 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved9(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 114 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_livestream_road_encode_idx(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 115 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_livestream_wide_road_encode_idx(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 116 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_livestream_driver_encode_idx(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 117 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_livestream_road_encode_data(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 118 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_livestream_wide_road_encode_data(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 119 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_livestream_driver_encode_data(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 120 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_temperature_sensor2(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 121 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved_raw_data0(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 122 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved_raw_data1(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 123 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_custom_reserved_raw_data2(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 124 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn has_car_output(&self) -> bool {
      if self.reader.get_data_field::<u16>(4) != 125 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(4) {
        0 => {
          ::core::result::Result::Ok(InitData(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(RoadCameraState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(GpsNMEA(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(SensorEventDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(Can(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(DeviceState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        6 => {
          ::core::result::Result::Ok(ControlsState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        7 => {
          ::core::result::Result::Ok(LiveEventDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        8 => {
          ::core::result::Result::Ok(Model(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        9 => {
          ::core::result::Result::Ok(FeaturesDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        10 => {
          ::core::result::Result::Ok(SensorEventsDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        11 => {
          ::core::result::Result::Ok(PandaStateDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        12 => {
          ::core::result::Result::Ok(RadarState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        13 => {
          ::core::result::Result::Ok(LiveUIDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        14 => {
          ::core::result::Result::Ok(RoadEncodeIdx(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        15 => {
          ::core::result::Result::Ok(LiveTracks(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        16 => {
          ::core::result::Result::Ok(Sendcan(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        17 => {
          ::core::result::Result::Ok(LogMessage(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        18 => {
          ::core::result::Result::Ok(LiveCalibration(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        19 => {
          ::core::result::Result::Ok(AndroidLog(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        20 => {
          ::core::result::Result::Ok(GpsLocation(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        21 => {
          ::core::result::Result::Ok(CarState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        22 => {
          ::core::result::Result::Ok(CarControl(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        23 => {
          ::core::result::Result::Ok(LongitudinalPlan(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        24 => {
          ::core::result::Result::Ok(LiveLocationDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        25 => {
          ::core::result::Result::Ok(EthernetDataDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        26 => {
          ::core::result::Result::Ok(NavUpdateDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        27 => {
          ::core::result::Result::Ok(CellInfoDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        28 => {
          ::core::result::Result::Ok(WifiScanDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        29 => {
          ::core::result::Result::Ok(AndroidGnssDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        30 => {
          ::core::result::Result::Ok(QcomGnss(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        31 => {
          ::core::result::Result::Ok(LidarPtsDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        32 => {
          ::core::result::Result::Ok(ProcLog(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        33 => {
          ::core::result::Result::Ok(UbloxGnss(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        34 => {
          ::core::result::Result::Ok(Clocks(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        35 => {
          ::core::result::Result::Ok(LiveMpcDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        36 => {
          ::core::result::Result::Ok(LiveLongitudinalMpcDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        37 => {
          ::core::result::Result::Ok(NavStatusDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        38 => {
          ::core::result::Result::Ok(UbloxRaw(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        39 => {
          ::core::result::Result::Ok(GpsPlannerPointsDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        40 => {
          ::core::result::Result::Ok(GpsPlannerPlanDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        41 => {
          ::core::result::Result::Ok(ApplanixRawDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        42 => {
          ::core::result::Result::Ok(TrafficEventsDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        43 => {
          ::core::result::Result::Ok(LiveLocationTimingDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        44 => {
          ::core::result::Result::Ok(OrbslamCorrectionDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        45 => {
          ::core::result::Result::Ok(LiveLocationCorrectedDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        46 => {
          ::core::result::Result::Ok(OrbObservationDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        47 => {
          ::core::result::Result::Ok(GpsLocationExternal(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        48 => {
          ::core::result::Result::Ok(LocationDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        49 => {
          ::core::result::Result::Ok(UiNavigationEventDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        50 => {
          ::core::result::Result::Ok(LiveLocationKalmanDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        51 => {
          ::core::result::Result::Ok(TestJoystick(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        52 => {
          ::core::result::Result::Ok(OrbOdometryDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        53 => {
          ::core::result::Result::Ok(OrbFeaturesDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        54 => {
          ::core::result::Result::Ok(ApplanixLocationDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        55 => {
          ::core::result::Result::Ok(OrbKeyFrameDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        56 => {
          ::core::result::Result::Ok(UiLayoutStateDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        57 => {
          ::core::result::Result::Ok(OrbFeaturesSummaryDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        58 => {
          ::core::result::Result::Ok(DriverStateDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        59 => {
          ::core::result::Result::Ok(Boot(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        60 => {
          ::core::result::Result::Ok(LiveParameters(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        61 => {
          ::core::result::Result::Ok(LiveMapDataDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        62 => {
          ::core::result::Result::Ok(CameraOdometry(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        63 => {
          ::core::result::Result::Ok(LateralPlanDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        64 => {
          ::core::result::Result::Ok(KalmanOdometryDEPRECATED(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        65 => {
          ::core::result::Result::Ok(Thumbnail(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        66 => {
          ::core::result::Result::Ok(OnroadEvents(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        67 => {
          ::core::result::Result::Ok(CarParams(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        68 => {
          ::core::result::Result::Ok(DriverCameraState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        69 => {
          ::core::result::Result::Ok(DriverMonitoringState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        70 => {
          ::core::result::Result::Ok(LiveLocationKalman(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        71 => {
          ::core::result::Result::Ok(Sentinel(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        72 => {
          ::core::result::Result::Ok(WideRoadCameraState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        73 => {
          ::core::result::Result::Ok(ModelV2(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        74 => {
          ::core::result::Result::Ok(DriverEncodeIdx(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        75 => {
          ::core::result::Result::Ok(WideRoadEncodeIdx(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        76 => {
          ::core::result::Result::Ok(ManagerState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        77 => {
          ::core::result::Result::Ok(UploaderState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        78 => {
          ::core::result::Result::Ok(PeripheralState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        79 => {
          ::core::result::Result::Ok(PandaStates(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        80 => {
          ::core::result::Result::Ok(NavInstruction(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        81 => {
          ::core::result::Result::Ok(NavRoute(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        82 => {
          ::core::result::Result::Ok(NavThumbnail(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        83 => {
          ::core::result::Result::Ok(ErrorLogMessage(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        84 => {
          ::core::result::Result::Ok(RoadEncodeData(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        85 => {
          ::core::result::Result::Ok(DriverEncodeData(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        86 => {
          ::core::result::Result::Ok(WideRoadEncodeData(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        87 => {
          ::core::result::Result::Ok(QRoadEncodeData(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        88 => {
          ::core::result::Result::Ok(QRoadEncodeIdx(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        89 => {
          ::core::result::Result::Ok(GnssMeasurements(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        90 => {
          ::core::result::Result::Ok(DriverStateV2(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        91 => {
          ::core::result::Result::Ok(UserFlag(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        92 => {
          ::core::result::Result::Ok(LiveTorqueParameters(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        93 => {
          ::core::result::Result::Ok(Magnetometer(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        94 => {
          ::core::result::Result::Ok(LightSensor(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        95 => {
          ::core::result::Result::Ok(TemperatureSensor(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        96 => {
          ::core::result::Result::Ok(Accelerometer(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        97 => {
          ::core::result::Result::Ok(Gyroscope(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        98 => {
          ::core::result::Result::Ok(Gyroscope2(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        99 => {
          ::core::result::Result::Ok(Accelerometer2(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        100 => {
          ::core::result::Result::Ok(UiDebug(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        101 => {
          ::core::result::Result::Ok(Microphone(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        102 => {
          ::core::result::Result::Ok(NavModel(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        103 => {
          ::core::result::Result::Ok(MapRenderState(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        104 => {
          ::core::result::Result::Ok(UiPlan(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        105 => {
          ::core::result::Result::Ok(CustomReserved0(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        106 => {
          ::core::result::Result::Ok(CustomReserved1(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        107 => {
          ::core::result::Result::Ok(CustomReserved2(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        108 => {
          ::core::result::Result::Ok(CustomReserved3(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        109 => {
          ::core::result::Result::Ok(CustomReserved4(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        110 => {
          ::core::result::Result::Ok(CustomReserved5(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        111 => {
          ::core::result::Result::Ok(CustomReserved6(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        112 => {
          ::core::result::Result::Ok(CustomReserved7(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        113 => {
          ::core::result::Result::Ok(CustomReserved8(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        114 => {
          ::core::result::Result::Ok(CustomReserved9(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        115 => {
          ::core::result::Result::Ok(LivestreamRoadEncodeIdx(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        116 => {
          ::core::result::Result::Ok(LivestreamWideRoadEncodeIdx(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        117 => {
          ::core::result::Result::Ok(LivestreamDriverEncodeIdx(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        118 => {
          ::core::result::Result::Ok(LivestreamRoadEncodeData(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        119 => {
          ::core::result::Result::Ok(LivestreamWideRoadEncodeData(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        120 => {
          ::core::result::Result::Ok(LivestreamDriverEncodeData(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        121 => {
          ::core::result::Result::Ok(TemperatureSensor2(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        122 => {
          ::core::result::Result::Ok(CustomReservedRawData0(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        123 => {
          ::core::result::Result::Ok(CustomReservedRawData1(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        124 => {
          ::core::result::Result::Ok(CustomReservedRawData2(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        125 => {
          ::core::result::Result::Ok(CarOutput(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_log_mono_time(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_log_mono_time(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn set_init_data(&mut self, value: crate::cereal::log_capnp::init_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 0);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_init_data(self, ) -> crate::cereal::log_capnp::init_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 0);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_init_data(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 0 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_road_camera_state(&mut self, value: crate::cereal::log_capnp::frame_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 1);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_road_camera_state(self, ) -> crate::cereal::log_capnp::frame_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 1);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_road_camera_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 1 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gps_n_m_e_a(&mut self, value: crate::cereal::log_capnp::g_p_s_n_m_e_a_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 2);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gps_n_m_e_a(self, ) -> crate::cereal::log_capnp::g_p_s_n_m_e_a_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 2);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gps_n_m_e_a(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 2 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_sensor_event_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::sensor_event_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 3);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_sensor_event_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::sensor_event_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 3);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_sensor_event_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 3 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_can(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::can_data::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 4);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_can(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::can_data::Owned> {
      self.builder.set_data_field::<u16>(4, 4);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_can(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 4 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_device_state(&mut self, value: crate::cereal::log_capnp::device_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 5);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_device_state(self, ) -> crate::cereal::log_capnp::device_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 5);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_device_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 5 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_controls_state(&mut self, value: crate::cereal::log_capnp::controls_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 6);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_controls_state(self, ) -> crate::cereal::log_capnp::controls_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 6);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_controls_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 6 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_event_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::legacy_capnp::live_event_data::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 7);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_event_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::live_event_data::Owned> {
      self.builder.set_data_field::<u16>(4, 7);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_live_event_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 7 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_model(&mut self, value: crate::cereal::legacy_capnp::model_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 8);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_model(self, ) -> crate::cereal::legacy_capnp::model_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 8);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_model(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 8 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_features_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::calibration_features::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 9);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_features_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::calibration_features::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 9);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_features_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 9 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_sensor_events_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::sensor_event_data::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 10);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_sensor_events_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::sensor_event_data::Owned> {
      self.builder.set_data_field::<u16>(4, 10);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_sensor_events_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 10 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_panda_state_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::panda_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 11);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_panda_state_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::panda_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 11);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_panda_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 11 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_radar_state(&mut self, value: crate::cereal::log_capnp::radar_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 12);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_radar_state(self, ) -> crate::cereal::log_capnp::radar_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 12);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_radar_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 12 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_u_i_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::live_u_i::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 13);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_u_i_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::live_u_i::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 13);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_u_i_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 13 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_road_encode_idx(&mut self, value: crate::cereal::log_capnp::encode_index::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 14);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_road_encode_idx(self, ) -> crate::cereal::log_capnp::encode_index::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 14);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_road_encode_idx(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 14 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_tracks(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::live_tracks::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 15);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_tracks(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::live_tracks::Owned> {
      self.builder.set_data_field::<u16>(4, 15);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_live_tracks(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 15 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_sendcan(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::can_data::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 16);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_sendcan(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::can_data::Owned> {
      self.builder.set_data_field::<u16>(4, 16);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_sendcan(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 16 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_log_message(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      self.builder.set_data_field::<u16>(4, 17);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
    }
    #[inline]
    pub fn init_log_message(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 17);
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_log_message(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 17 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_calibration(&mut self, value: crate::cereal::log_capnp::live_calibration_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 18);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_calibration(self, ) -> crate::cereal::log_capnp::live_calibration_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 18);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_calibration(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 18 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_android_log(&mut self, value: crate::cereal::log_capnp::android_log_entry::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 19);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_android_log(self, ) -> crate::cereal::log_capnp::android_log_entry::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 19);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_android_log(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 19 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gps_location(&mut self, value: crate::cereal::log_capnp::gps_location_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 20);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gps_location(self, ) -> crate::cereal::log_capnp::gps_location_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 20);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gps_location(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 20 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_car_state(&mut self, value: crate::cereal::car_capnp::car_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 21);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_car_state(self, ) -> crate::cereal::car_capnp::car_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 21);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_car_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 21 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_car_control(&mut self, value: crate::cereal::car_capnp::car_control::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 22);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_car_control(self, ) -> crate::cereal::car_capnp::car_control::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 22);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_car_control(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 22 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_longitudinal_plan(&mut self, value: crate::cereal::log_capnp::longitudinal_plan::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 23);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_longitudinal_plan(self, ) -> crate::cereal::log_capnp::longitudinal_plan::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 23);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_longitudinal_plan(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 23 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_location_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::live_location_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 24);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_location_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::live_location_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 24);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_location_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 24 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_ethernet_data_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::legacy_capnp::ethernet_packet::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 25);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_ethernet_data_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::ethernet_packet::Owned> {
      self.builder.set_data_field::<u16>(4, 25);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_ethernet_data_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 25 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_nav_update_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::nav_update::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 26);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_nav_update_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::nav_update::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 26);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_nav_update_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 26 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_cell_info_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::legacy_capnp::cell_info::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 27);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_cell_info_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::cell_info::Owned> {
      self.builder.set_data_field::<u16>(4, 27);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_cell_info_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 27 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_wifi_scan_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::legacy_capnp::wifi_scan::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 28);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_wifi_scan_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::wifi_scan::Owned> {
      self.builder.set_data_field::<u16>(4, 28);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_wifi_scan_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 28 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_android_gnss_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::android_gnss::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 29);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_android_gnss_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::android_gnss::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 29);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_android_gnss_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 29 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_qcom_gnss(&mut self, value: crate::cereal::log_capnp::qcom_gnss::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 30);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_qcom_gnss(self, ) -> crate::cereal::log_capnp::qcom_gnss::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 30);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_qcom_gnss(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 30 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_lidar_pts_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::lidar_pts::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 31);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_lidar_pts_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::lidar_pts::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 31);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_lidar_pts_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 31 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_proc_log(&mut self, value: crate::cereal::log_capnp::proc_log::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 32);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_proc_log(self, ) -> crate::cereal::log_capnp::proc_log::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 32);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_proc_log(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 32 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_ublox_gnss(&mut self, value: crate::cereal::log_capnp::ublox_gnss::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 33);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_ublox_gnss(self, ) -> crate::cereal::log_capnp::ublox_gnss::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 33);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_ublox_gnss(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 33 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_clocks(&mut self, value: crate::cereal::log_capnp::clocks::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 34);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_clocks(self, ) -> crate::cereal::log_capnp::clocks::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 34);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_clocks(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 34 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_mpc_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::live_mpc_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 35);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_mpc_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::live_mpc_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 35);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_mpc_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 35 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_longitudinal_mpc_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::live_longitudinal_mpc_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 36);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_longitudinal_mpc_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::live_longitudinal_mpc_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 36);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_longitudinal_mpc_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 36 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_nav_status_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::nav_status::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 37);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_nav_status_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::nav_status::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 37);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_nav_status_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 37 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_ublox_raw(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.set_data_field::<u16>(4, 38);
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_ublox_raw(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 38);
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_ublox_raw(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 38 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gps_planner_points_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::g_p_s_planner_points::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 39);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gps_planner_points_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::g_p_s_planner_points::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 39);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gps_planner_points_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 39 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gps_planner_plan_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::g_p_s_planner_plan::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 40);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gps_planner_plan_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::g_p_s_planner_plan::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 40);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gps_planner_plan_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 40 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_applanix_raw_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.set_data_field::<u16>(4, 41);
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_applanix_raw_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 41);
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_applanix_raw_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 41 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_traffic_events_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::legacy_capnp::traffic_event::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 42);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_traffic_events_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::traffic_event::Owned> {
      self.builder.set_data_field::<u16>(4, 42);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_traffic_events_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 42 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_location_timing_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::live_location_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 43);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_location_timing_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::live_location_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 43);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_location_timing_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 43 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_orbslam_correction_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::orbslam_correction::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 44);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_orbslam_correction_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::orbslam_correction::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 44);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_orbslam_correction_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 44 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_location_corrected_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::live_location_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 45);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_location_corrected_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::live_location_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 45);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_location_corrected_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 45 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_orb_observation_d_e_p_r_e_c_a_t_e_d(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::legacy_capnp::orb_observation::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 46);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_orb_observation_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::orb_observation::Owned> {
      self.builder.set_data_field::<u16>(4, 46);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_orb_observation_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 46 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gps_location_external(&mut self, value: crate::cereal::log_capnp::gps_location_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 47);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gps_location_external(self, ) -> crate::cereal::log_capnp::gps_location_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 47);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gps_location_external(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 47 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_location_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::live_location_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 48);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_location_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::live_location_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 48);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_location_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 48 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_ui_navigation_event_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::ui_navigation_event::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 49);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_ui_navigation_event_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::ui_navigation_event::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 49);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_ui_navigation_event_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 49 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_location_kalman_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::live_location_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 50);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_location_kalman_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::live_location_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 50);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_location_kalman_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 50 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_test_joystick(&mut self, value: crate::cereal::log_capnp::joystick::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 51);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_test_joystick(self, ) -> crate::cereal::log_capnp::joystick::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 51);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_test_joystick(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 51 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_orb_odometry_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::orb_odometry::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 52);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_orb_odometry_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::orb_odometry::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 52);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_orb_odometry_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 52 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_orb_features_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::orb_features::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 53);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_orb_features_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::orb_features::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 53);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_orb_features_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 53 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_applanix_location_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::live_location_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 54);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_applanix_location_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::live_location_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 54);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_applanix_location_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 54 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_orb_key_frame_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::orb_key_frame::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 55);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_orb_key_frame_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::orb_key_frame::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 55);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_orb_key_frame_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 55 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_ui_layout_state_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::ui_layout_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 56);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_ui_layout_state_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::ui_layout_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 56);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_ui_layout_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 56 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_orb_features_summary_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::orb_features_summary::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 57);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_orb_features_summary_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::orb_features_summary::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 57);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_orb_features_summary_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 57 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_driver_state_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::driver_state_d_e_p_r_e_c_a_t_e_d::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 58);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_driver_state_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::driver_state_d_e_p_r_e_c_a_t_e_d::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 58);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_driver_state_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 58 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_boot(&mut self, value: crate::cereal::log_capnp::boot::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 59);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_boot(self, ) -> crate::cereal::log_capnp::boot::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 59);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_boot(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 59 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_parameters(&mut self, value: crate::cereal::log_capnp::live_parameters_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 60);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_parameters(self, ) -> crate::cereal::log_capnp::live_parameters_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 60);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_parameters(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 60 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_map_data_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::live_map_data_d_e_p_r_e_c_a_t_e_d::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 61);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_map_data_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::live_map_data_d_e_p_r_e_c_a_t_e_d::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 61);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_map_data_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 61 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_camera_odometry(&mut self, value: crate::cereal::log_capnp::camera_odometry::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 62);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_camera_odometry(self, ) -> crate::cereal::log_capnp::camera_odometry::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 62);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_camera_odometry(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 62 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_lateral_plan_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::log_capnp::lateral_plan::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 63);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_lateral_plan_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::log_capnp::lateral_plan::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 63);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_lateral_plan_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 63 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_kalman_odometry_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::legacy_capnp::kalman_odometry::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 64);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_kalman_odometry_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::legacy_capnp::kalman_odometry::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 64);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_kalman_odometry_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 64 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_thumbnail(&mut self, value: crate::cereal::log_capnp::thumbnail::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 65);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_thumbnail(self, ) -> crate::cereal::log_capnp::thumbnail::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 65);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_thumbnail(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 65 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_valid(self) -> bool {
      self.builder.get_bool_field_mask(80, true)
    }
    #[inline]
    pub fn set_valid(&mut self, value: bool)  {
      self.builder.set_bool_field_mask(80, value, true);
    }
    #[inline]
    pub fn set_onroad_events(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::car_capnp::car_event::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 66);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_onroad_events(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_event::Owned> {
      self.builder.set_data_field::<u16>(4, 66);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_onroad_events(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 66 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_car_params(&mut self, value: crate::cereal::car_capnp::car_params::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 67);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_car_params(self, ) -> crate::cereal::car_capnp::car_params::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 67);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_car_params(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 67 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_driver_camera_state(&mut self, value: crate::cereal::log_capnp::frame_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 68);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_driver_camera_state(self, ) -> crate::cereal::log_capnp::frame_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 68);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_driver_camera_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 68 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_driver_monitoring_state(&mut self, value: crate::cereal::log_capnp::driver_monitoring_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 69);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_driver_monitoring_state(self, ) -> crate::cereal::log_capnp::driver_monitoring_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 69);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_driver_monitoring_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 69 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_location_kalman(&mut self, value: crate::cereal::log_capnp::live_location_kalman::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 70);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_location_kalman(self, ) -> crate::cereal::log_capnp::live_location_kalman::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 70);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_location_kalman(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 70 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_sentinel(&mut self, value: crate::cereal::log_capnp::sentinel::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 71);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_sentinel(self, ) -> crate::cereal::log_capnp::sentinel::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 71);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_sentinel(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 71 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_wide_road_camera_state(&mut self, value: crate::cereal::log_capnp::frame_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 72);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_wide_road_camera_state(self, ) -> crate::cereal::log_capnp::frame_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 72);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_wide_road_camera_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 72 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_model_v2(&mut self, value: crate::cereal::log_capnp::model_data_v2::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 73);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_model_v2(self, ) -> crate::cereal::log_capnp::model_data_v2::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 73);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_model_v2(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 73 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_driver_encode_idx(&mut self, value: crate::cereal::log_capnp::encode_index::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 74);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_driver_encode_idx(self, ) -> crate::cereal::log_capnp::encode_index::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 74);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_driver_encode_idx(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 74 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_wide_road_encode_idx(&mut self, value: crate::cereal::log_capnp::encode_index::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 75);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_wide_road_encode_idx(self, ) -> crate::cereal::log_capnp::encode_index::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 75);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_wide_road_encode_idx(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 75 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_manager_state(&mut self, value: crate::cereal::log_capnp::manager_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 76);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_manager_state(self, ) -> crate::cereal::log_capnp::manager_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 76);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_manager_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 76 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_uploader_state(&mut self, value: crate::cereal::log_capnp::uploader_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 77);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_uploader_state(self, ) -> crate::cereal::log_capnp::uploader_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 77);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_uploader_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 77 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_peripheral_state(&mut self, value: crate::cereal::log_capnp::peripheral_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 78);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_peripheral_state(self, ) -> crate::cereal::log_capnp::peripheral_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 78);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_peripheral_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 78 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_panda_states(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::log_capnp::panda_state::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 79);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_panda_states(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::panda_state::Owned> {
      self.builder.set_data_field::<u16>(4, 79);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_panda_states(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 79 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_nav_instruction(&mut self, value: crate::cereal::log_capnp::nav_instruction::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 80);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_nav_instruction(self, ) -> crate::cereal::log_capnp::nav_instruction::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 80);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_nav_instruction(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 80 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_nav_route(&mut self, value: crate::cereal::log_capnp::nav_route::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 81);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_nav_route(self, ) -> crate::cereal::log_capnp::nav_route::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 81);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_nav_route(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 81 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_nav_thumbnail(&mut self, value: crate::cereal::log_capnp::thumbnail::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 82);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_nav_thumbnail(self, ) -> crate::cereal::log_capnp::thumbnail::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 82);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_nav_thumbnail(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 82 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_error_log_message(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      self.builder.set_data_field::<u16>(4, 83);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
    }
    #[inline]
    pub fn init_error_log_message(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 83);
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_error_log_message(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 83 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_road_encode_data(&mut self, value: crate::cereal::log_capnp::encode_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 84);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_road_encode_data(self, ) -> crate::cereal::log_capnp::encode_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 84);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_road_encode_data(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 84 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_driver_encode_data(&mut self, value: crate::cereal::log_capnp::encode_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 85);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_driver_encode_data(self, ) -> crate::cereal::log_capnp::encode_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 85);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_driver_encode_data(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 85 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_wide_road_encode_data(&mut self, value: crate::cereal::log_capnp::encode_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 86);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_wide_road_encode_data(self, ) -> crate::cereal::log_capnp::encode_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 86);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_wide_road_encode_data(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 86 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_q_road_encode_data(&mut self, value: crate::cereal::log_capnp::encode_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 87);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_q_road_encode_data(self, ) -> crate::cereal::log_capnp::encode_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 87);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_q_road_encode_data(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 87 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_q_road_encode_idx(&mut self, value: crate::cereal::log_capnp::encode_index::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 88);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_q_road_encode_idx(self, ) -> crate::cereal::log_capnp::encode_index::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 88);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_q_road_encode_idx(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 88 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gnss_measurements(&mut self, value: crate::cereal::log_capnp::gnss_measurements::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 89);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gnss_measurements(self, ) -> crate::cereal::log_capnp::gnss_measurements::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 89);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gnss_measurements(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 89 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_driver_state_v2(&mut self, value: crate::cereal::log_capnp::driver_state_v2::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 90);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_driver_state_v2(self, ) -> crate::cereal::log_capnp::driver_state_v2::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 90);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_driver_state_v2(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 90 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_user_flag(&mut self, value: crate::cereal::log_capnp::user_flag::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 91);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_user_flag(self, ) -> crate::cereal::log_capnp::user_flag::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 91);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_user_flag(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 91 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_live_torque_parameters(&mut self, value: crate::cereal::log_capnp::live_torque_parameters_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 92);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_live_torque_parameters(self, ) -> crate::cereal::log_capnp::live_torque_parameters_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 92);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_live_torque_parameters(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 92 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_magnetometer(&mut self, value: crate::cereal::log_capnp::sensor_event_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 93);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_magnetometer(self, ) -> crate::cereal::log_capnp::sensor_event_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 93);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_magnetometer(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 93 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_light_sensor(&mut self, value: crate::cereal::log_capnp::sensor_event_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 94);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_light_sensor(self, ) -> crate::cereal::log_capnp::sensor_event_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 94);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_light_sensor(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 94 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_temperature_sensor(&mut self, value: crate::cereal::log_capnp::sensor_event_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 95);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_temperature_sensor(self, ) -> crate::cereal::log_capnp::sensor_event_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 95);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_temperature_sensor(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 95 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_accelerometer(&mut self, value: crate::cereal::log_capnp::sensor_event_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 96);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_accelerometer(self, ) -> crate::cereal::log_capnp::sensor_event_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 96);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_accelerometer(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 96 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gyroscope(&mut self, value: crate::cereal::log_capnp::sensor_event_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 97);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gyroscope(self, ) -> crate::cereal::log_capnp::sensor_event_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 97);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gyroscope(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 97 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_gyroscope2(&mut self, value: crate::cereal::log_capnp::sensor_event_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 98);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_gyroscope2(self, ) -> crate::cereal::log_capnp::sensor_event_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 98);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_gyroscope2(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 98 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_accelerometer2(&mut self, value: crate::cereal::log_capnp::sensor_event_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 99);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_accelerometer2(self, ) -> crate::cereal::log_capnp::sensor_event_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 99);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_accelerometer2(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 99 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_ui_debug(&mut self, value: crate::cereal::log_capnp::u_i_debug::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 100);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_ui_debug(self, ) -> crate::cereal::log_capnp::u_i_debug::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 100);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_ui_debug(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 100 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_microphone(&mut self, value: crate::cereal::log_capnp::microphone::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 101);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_microphone(self, ) -> crate::cereal::log_capnp::microphone::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 101);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_microphone(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 101 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_nav_model(&mut self, value: crate::cereal::log_capnp::nav_model_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 102);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_nav_model(self, ) -> crate::cereal::log_capnp::nav_model_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 102);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_nav_model(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 102 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_map_render_state(&mut self, value: crate::cereal::log_capnp::map_render_state::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 103);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_map_render_state(self, ) -> crate::cereal::log_capnp::map_render_state::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 103);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_map_render_state(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 103 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_ui_plan(&mut self, value: crate::cereal::log_capnp::ui_plan::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 104);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_ui_plan(self, ) -> crate::cereal::log_capnp::ui_plan::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 104);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_ui_plan(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 104 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved0(&mut self, value: crate::cereal::custom_capnp::custom_reserved0::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 105);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved0(self, ) -> crate::cereal::custom_capnp::custom_reserved0::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 105);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved0(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 105 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved1(&mut self, value: crate::cereal::custom_capnp::custom_reserved1::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 106);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved1(self, ) -> crate::cereal::custom_capnp::custom_reserved1::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 106);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved1(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 106 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved2(&mut self, value: crate::cereal::custom_capnp::custom_reserved2::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 107);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved2(self, ) -> crate::cereal::custom_capnp::custom_reserved2::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 107);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved2(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 107 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved3(&mut self, value: crate::cereal::custom_capnp::custom_reserved3::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 108);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved3(self, ) -> crate::cereal::custom_capnp::custom_reserved3::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 108);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved3(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 108 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved4(&mut self, value: crate::cereal::custom_capnp::custom_reserved4::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 109);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved4(self, ) -> crate::cereal::custom_capnp::custom_reserved4::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 109);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved4(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 109 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved5(&mut self, value: crate::cereal::custom_capnp::custom_reserved5::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 110);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved5(self, ) -> crate::cereal::custom_capnp::custom_reserved5::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 110);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved5(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 110 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved6(&mut self, value: crate::cereal::custom_capnp::custom_reserved6::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 111);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved6(self, ) -> crate::cereal::custom_capnp::custom_reserved6::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 111);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved6(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 111 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved7(&mut self, value: crate::cereal::custom_capnp::custom_reserved7::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 112);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved7(self, ) -> crate::cereal::custom_capnp::custom_reserved7::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 112);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved7(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 112 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved8(&mut self, value: crate::cereal::custom_capnp::custom_reserved8::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 113);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved8(self, ) -> crate::cereal::custom_capnp::custom_reserved8::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 113);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved8(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 113 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved9(&mut self, value: crate::cereal::custom_capnp::custom_reserved9::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 114);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_custom_reserved9(self, ) -> crate::cereal::custom_capnp::custom_reserved9::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 114);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_custom_reserved9(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 114 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_livestream_road_encode_idx(&mut self, value: crate::cereal::log_capnp::encode_index::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 115);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_livestream_road_encode_idx(self, ) -> crate::cereal::log_capnp::encode_index::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 115);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_livestream_road_encode_idx(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 115 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_livestream_wide_road_encode_idx(&mut self, value: crate::cereal::log_capnp::encode_index::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 116);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_livestream_wide_road_encode_idx(self, ) -> crate::cereal::log_capnp::encode_index::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 116);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_livestream_wide_road_encode_idx(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 116 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_livestream_driver_encode_idx(&mut self, value: crate::cereal::log_capnp::encode_index::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 117);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_livestream_driver_encode_idx(self, ) -> crate::cereal::log_capnp::encode_index::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 117);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_livestream_driver_encode_idx(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 117 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_livestream_road_encode_data(&mut self, value: crate::cereal::log_capnp::encode_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 118);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_livestream_road_encode_data(self, ) -> crate::cereal::log_capnp::encode_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 118);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_livestream_road_encode_data(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 118 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_livestream_wide_road_encode_data(&mut self, value: crate::cereal::log_capnp::encode_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 119);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_livestream_wide_road_encode_data(self, ) -> crate::cereal::log_capnp::encode_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 119);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_livestream_wide_road_encode_data(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 119 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_livestream_driver_encode_data(&mut self, value: crate::cereal::log_capnp::encode_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 120);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_livestream_driver_encode_data(self, ) -> crate::cereal::log_capnp::encode_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 120);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_livestream_driver_encode_data(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 120 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_temperature_sensor2(&mut self, value: crate::cereal::log_capnp::sensor_event_data::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 121);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_temperature_sensor2(self, ) -> crate::cereal::log_capnp::sensor_event_data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 121);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_temperature_sensor2(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 121 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved_raw_data0(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.set_data_field::<u16>(4, 122);
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_custom_reserved_raw_data0(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 122);
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_custom_reserved_raw_data0(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 122 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved_raw_data1(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.set_data_field::<u16>(4, 123);
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_custom_reserved_raw_data1(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 123);
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_custom_reserved_raw_data1(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 123 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_custom_reserved_raw_data2(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.set_data_field::<u16>(4, 124);
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_custom_reserved_raw_data2(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 124);
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_custom_reserved_raw_data2(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 124 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn set_car_output(&mut self, value: crate::cereal::car_capnp::car_output::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(4, 125);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_car_output(self, ) -> crate::cereal::car_capnp::car_output::Builder<'a> {
      self.builder.set_data_field::<u16>(4, 125);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_car_output(&self) -> bool {
      if self.builder.get_data_field::<u16>(4) != 125 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(4) {
        0 => {
          ::core::result::Result::Ok(InitData(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(RoadCameraState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(GpsNMEA(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(SensorEventDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(Can(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(DeviceState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        6 => {
          ::core::result::Result::Ok(ControlsState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        7 => {
          ::core::result::Result::Ok(LiveEventDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        8 => {
          ::core::result::Result::Ok(Model(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        9 => {
          ::core::result::Result::Ok(FeaturesDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        10 => {
          ::core::result::Result::Ok(SensorEventsDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        11 => {
          ::core::result::Result::Ok(PandaStateDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        12 => {
          ::core::result::Result::Ok(RadarState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        13 => {
          ::core::result::Result::Ok(LiveUIDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        14 => {
          ::core::result::Result::Ok(RoadEncodeIdx(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        15 => {
          ::core::result::Result::Ok(LiveTracks(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        16 => {
          ::core::result::Result::Ok(Sendcan(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        17 => {
          ::core::result::Result::Ok(LogMessage(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        18 => {
          ::core::result::Result::Ok(LiveCalibration(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        19 => {
          ::core::result::Result::Ok(AndroidLog(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        20 => {
          ::core::result::Result::Ok(GpsLocation(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        21 => {
          ::core::result::Result::Ok(CarState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        22 => {
          ::core::result::Result::Ok(CarControl(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        23 => {
          ::core::result::Result::Ok(LongitudinalPlan(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        24 => {
          ::core::result::Result::Ok(LiveLocationDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        25 => {
          ::core::result::Result::Ok(EthernetDataDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        26 => {
          ::core::result::Result::Ok(NavUpdateDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        27 => {
          ::core::result::Result::Ok(CellInfoDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        28 => {
          ::core::result::Result::Ok(WifiScanDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        29 => {
          ::core::result::Result::Ok(AndroidGnssDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        30 => {
          ::core::result::Result::Ok(QcomGnss(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        31 => {
          ::core::result::Result::Ok(LidarPtsDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        32 => {
          ::core::result::Result::Ok(ProcLog(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        33 => {
          ::core::result::Result::Ok(UbloxGnss(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        34 => {
          ::core::result::Result::Ok(Clocks(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        35 => {
          ::core::result::Result::Ok(LiveMpcDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        36 => {
          ::core::result::Result::Ok(LiveLongitudinalMpcDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        37 => {
          ::core::result::Result::Ok(NavStatusDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        38 => {
          ::core::result::Result::Ok(UbloxRaw(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        39 => {
          ::core::result::Result::Ok(GpsPlannerPointsDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        40 => {
          ::core::result::Result::Ok(GpsPlannerPlanDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        41 => {
          ::core::result::Result::Ok(ApplanixRawDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        42 => {
          ::core::result::Result::Ok(TrafficEventsDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        43 => {
          ::core::result::Result::Ok(LiveLocationTimingDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        44 => {
          ::core::result::Result::Ok(OrbslamCorrectionDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        45 => {
          ::core::result::Result::Ok(LiveLocationCorrectedDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        46 => {
          ::core::result::Result::Ok(OrbObservationDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        47 => {
          ::core::result::Result::Ok(GpsLocationExternal(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        48 => {
          ::core::result::Result::Ok(LocationDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        49 => {
          ::core::result::Result::Ok(UiNavigationEventDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        50 => {
          ::core::result::Result::Ok(LiveLocationKalmanDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        51 => {
          ::core::result::Result::Ok(TestJoystick(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        52 => {
          ::core::result::Result::Ok(OrbOdometryDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        53 => {
          ::core::result::Result::Ok(OrbFeaturesDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        54 => {
          ::core::result::Result::Ok(ApplanixLocationDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        55 => {
          ::core::result::Result::Ok(OrbKeyFrameDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        56 => {
          ::core::result::Result::Ok(UiLayoutStateDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        57 => {
          ::core::result::Result::Ok(OrbFeaturesSummaryDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        58 => {
          ::core::result::Result::Ok(DriverStateDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        59 => {
          ::core::result::Result::Ok(Boot(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        60 => {
          ::core::result::Result::Ok(LiveParameters(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        61 => {
          ::core::result::Result::Ok(LiveMapDataDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        62 => {
          ::core::result::Result::Ok(CameraOdometry(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        63 => {
          ::core::result::Result::Ok(LateralPlanDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        64 => {
          ::core::result::Result::Ok(KalmanOdometryDEPRECATED(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        65 => {
          ::core::result::Result::Ok(Thumbnail(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        66 => {
          ::core::result::Result::Ok(OnroadEvents(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        67 => {
          ::core::result::Result::Ok(CarParams(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        68 => {
          ::core::result::Result::Ok(DriverCameraState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        69 => {
          ::core::result::Result::Ok(DriverMonitoringState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        70 => {
          ::core::result::Result::Ok(LiveLocationKalman(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        71 => {
          ::core::result::Result::Ok(Sentinel(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        72 => {
          ::core::result::Result::Ok(WideRoadCameraState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        73 => {
          ::core::result::Result::Ok(ModelV2(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        74 => {
          ::core::result::Result::Ok(DriverEncodeIdx(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        75 => {
          ::core::result::Result::Ok(WideRoadEncodeIdx(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        76 => {
          ::core::result::Result::Ok(ManagerState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        77 => {
          ::core::result::Result::Ok(UploaderState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        78 => {
          ::core::result::Result::Ok(PeripheralState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        79 => {
          ::core::result::Result::Ok(PandaStates(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        80 => {
          ::core::result::Result::Ok(NavInstruction(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        81 => {
          ::core::result::Result::Ok(NavRoute(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        82 => {
          ::core::result::Result::Ok(NavThumbnail(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        83 => {
          ::core::result::Result::Ok(ErrorLogMessage(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        84 => {
          ::core::result::Result::Ok(RoadEncodeData(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        85 => {
          ::core::result::Result::Ok(DriverEncodeData(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        86 => {
          ::core::result::Result::Ok(WideRoadEncodeData(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        87 => {
          ::core::result::Result::Ok(QRoadEncodeData(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        88 => {
          ::core::result::Result::Ok(QRoadEncodeIdx(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        89 => {
          ::core::result::Result::Ok(GnssMeasurements(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        90 => {
          ::core::result::Result::Ok(DriverStateV2(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        91 => {
          ::core::result::Result::Ok(UserFlag(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        92 => {
          ::core::result::Result::Ok(LiveTorqueParameters(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        93 => {
          ::core::result::Result::Ok(Magnetometer(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        94 => {
          ::core::result::Result::Ok(LightSensor(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        95 => {
          ::core::result::Result::Ok(TemperatureSensor(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        96 => {
          ::core::result::Result::Ok(Accelerometer(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        97 => {
          ::core::result::Result::Ok(Gyroscope(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        98 => {
          ::core::result::Result::Ok(Gyroscope2(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        99 => {
          ::core::result::Result::Ok(Accelerometer2(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        100 => {
          ::core::result::Result::Ok(UiDebug(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        101 => {
          ::core::result::Result::Ok(Microphone(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        102 => {
          ::core::result::Result::Ok(NavModel(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        103 => {
          ::core::result::Result::Ok(MapRenderState(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        104 => {
          ::core::result::Result::Ok(UiPlan(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        105 => {
          ::core::result::Result::Ok(CustomReserved0(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        106 => {
          ::core::result::Result::Ok(CustomReserved1(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        107 => {
          ::core::result::Result::Ok(CustomReserved2(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        108 => {
          ::core::result::Result::Ok(CustomReserved3(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        109 => {
          ::core::result::Result::Ok(CustomReserved4(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        110 => {
          ::core::result::Result::Ok(CustomReserved5(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        111 => {
          ::core::result::Result::Ok(CustomReserved6(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        112 => {
          ::core::result::Result::Ok(CustomReserved7(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        113 => {
          ::core::result::Result::Ok(CustomReserved8(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        114 => {
          ::core::result::Result::Ok(CustomReserved9(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        115 => {
          ::core::result::Result::Ok(LivestreamRoadEncodeIdx(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        116 => {
          ::core::result::Result::Ok(LivestreamWideRoadEncodeIdx(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        117 => {
          ::core::result::Result::Ok(LivestreamDriverEncodeIdx(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        118 => {
          ::core::result::Result::Ok(LivestreamRoadEncodeData(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        119 => {
          ::core::result::Result::Ok(LivestreamWideRoadEncodeData(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        120 => {
          ::core::result::Result::Ok(LivestreamDriverEncodeData(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        121 => {
          ::core::result::Result::Ok(TemperatureSensor2(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        122 => {
          ::core::result::Result::Ok(CustomReservedRawData0(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        123 => {
          ::core::result::Result::Ok(CustomReservedRawData1(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        124 => {
          ::core::result::Result::Ok(CustomReservedRawData2(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        125 => {
          ::core::result::Result::Ok(CarOutput(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 2177] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(17, 156, 34, 87, 217, 207, 20, 211),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(91, 40, 164, 37, 126, 241, 177, 243),
      ::capnp::word(1, 0, 7, 0, 0, 0, 126, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 7, 28, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 69, 118, 101, 110, 116, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(0, 2, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 13, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 13, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 13, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 255, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 13, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 13, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(44, 0, 254, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 14, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 253, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 14, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(96, 0, 252, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 14, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 251, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 14, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(60, 0, 250, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 14, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(44, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 249, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 14, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(97, 0, 248, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 14, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(90, 0, 247, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 14, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(121, 0, 246, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 14, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(126, 0, 245, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 14, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(124, 0, 244, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 14, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 243, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 14, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(95, 0, 242, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 14, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(47, 0, 241, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 14, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 240, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 14, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 239, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 14, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(61, 0, 238, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 14, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 237, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 14, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(55, 0, 236, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 14, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(31, 0, 235, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 14, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 14, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 234, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 14, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 14, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 233, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 15, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 232, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 15, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(98, 0, 231, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 15, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(99, 0, 230, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 15, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(113, 0, 229, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 15, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(100, 0, 228, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 15, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(101, 0, 227, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 15, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(107, 0, 226, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 15, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(29, 0, 225, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 15, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(108, 0, 224, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 15, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(58, 0, 223, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 15, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(27, 0, 222, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 15, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(59, 0, 221, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 35, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 15, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(91, 0, 220, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 36, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 15, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(92, 0, 219, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 37, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 15, 0, 0, 242, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(109, 0, 218, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 38, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 15, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(28, 0, 217, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 39, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 15, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(104, 0, 216, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 40, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 15, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 15, 0, 0, 2, 0, 1, 0),
      ::capnp::word(105, 0, 215, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 41, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 15, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 15, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(106, 0, 214, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 16, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(110, 0, 213, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 43, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 16, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(111, 0, 212, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 44, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 16, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(94, 0, 211, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 45, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 16, 0, 0, 226, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(112, 0, 210, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 46, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 16, 0, 0, 2, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(114, 0, 209, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 47, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 16, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(124, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(30, 0, 208, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 48, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 16, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(115, 0, 207, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 49, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 16, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(102, 0, 206, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 16, 0, 0, 226, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(93, 0, 205, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 51, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 16, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(69, 0, 204, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 52, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 16, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(116, 0, 203, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 53, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 16, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(117, 0, 202, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 54, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 16, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(118, 0, 201, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 55, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 16, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(119, 0, 200, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 56, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 16, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(123, 0, 199, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 57, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 16, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 16, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 16, 0, 0, 2, 0, 1, 0),
      ::capnp::word(120, 0, 198, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 16, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(125, 0, 197, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 59, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 17, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 196, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 60, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 17, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(33, 0, 195, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 61, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 17, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(103, 0, 194, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 62, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 17, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(35, 0, 193, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 63, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 17, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(44, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(127, 0, 192, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 64, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 17, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(68, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(122, 0, 191, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 65, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 17, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(36, 0, 190, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 17, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 80, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 67, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 17, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(37, 0, 189, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 68, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 17, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(38, 0, 188, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 69, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 17, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(45, 0, 187, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 70, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 17, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(39, 0, 186, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 71, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 17, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(40, 0, 185, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 72, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 17, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 184, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 73, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 17, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(46, 0, 183, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 17, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(41, 0, 182, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 75, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 17, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(48, 0, 181, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 76, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 17, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(49, 0, 180, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 77, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 17, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(56, 0, 179, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 78, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 17, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(57, 0, 178, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 79, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 17, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 177, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 80, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 17, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 17, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 176, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 81, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 17, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(63, 0, 175, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 17, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 17, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(64, 0, 174, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 83, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 18, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(65, 0, 173, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 84, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 18, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(62, 0, 172, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 85, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 18, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(70, 0, 171, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 86, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 18, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(71, 0, 170, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 87, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 18, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(72, 0, 169, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 88, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 18, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(73, 0, 168, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 89, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 18, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(50, 0, 167, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 18, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(32, 0, 166, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 91, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 18, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(42, 0, 165, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 92, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 18, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(67, 0, 164, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 93, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 18, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(34, 0, 163, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 94, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 18, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 162, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 95, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 18, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 161, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 96, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 18, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 160, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 97, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 18, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 159, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 18, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 158, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 99, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 18, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 157, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 100, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 18, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 156, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 101, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 18, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(68, 0, 155, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 102, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 18, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(54, 0, 154, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 103, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 18, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(43, 0, 153, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 104, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 18, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(66, 0, 152, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 105, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 18, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 151, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 18, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(80, 0, 150, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 107, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 18, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(81, 0, 149, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 108, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 18, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(82, 0, 148, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 109, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 18, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(83, 0, 147, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 110, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 18, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(84, 0, 146, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 111, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 18, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 18, 0, 0, 2, 0, 1, 0),
      ::capnp::word(85, 0, 145, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 112, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 18, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 18, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(86, 0, 144, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 113, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 19, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(87, 0, 143, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 19, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(88, 0, 142, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 115, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 19, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(89, 0, 141, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 116, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 19, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(51, 0, 140, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 117, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 19, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(52, 0, 139, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 118, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 19, 0, 0, 226, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(53, 0, 138, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 119, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 19, 0, 0, 210, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(74, 0, 137, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 120, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 19, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(75, 0, 136, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 121, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 19, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(112, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(76, 0, 135, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 19, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 134, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 123, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 19, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(77, 0, 133, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 124, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 19, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(78, 0, 132, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 125, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 19, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(79, 0, 131, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 126, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 19, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 130, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 127, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 19, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 19, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 19, 0, 0, 2, 0, 1, 0),
      ::capnp::word(108, 111, 103, 77, 111, 110, 111, 84),
      ::capnp::word(105, 109, 101, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 110, 105, 116, 68, 97, 116, 97),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 182, 63, 235, 202, 8, 16, 231),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 67, 97, 109, 101),
      ::capnp::word(114, 97, 83, 116, 97, 116, 101, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(51, 10, 174, 149, 246, 69, 2, 234),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 78, 77, 69, 65, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 74, 186, 19, 120, 29, 41, 157),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 110, 115, 111, 114, 69, 118),
      ::capnp::word(101, 110, 116, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 124, 76, 150, 154, 0, 133, 135),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 118, 105, 99, 101, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(235, 146, 164, 42, 175, 181, 216, 164),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 110, 116, 114, 111, 108, 115),
      ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 171, 1, 54, 197, 105, 255, 151),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 69, 118, 101, 110),
      ::capnp::word(116, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(30, 50, 92, 12, 169, 186, 183, 148),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 108, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 40, 239, 255, 44, 214, 170, 184),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 101, 97, 116, 117, 114, 101, 115),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(122, 134, 234, 84, 178, 173, 223, 143),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 110, 115, 111, 114, 69, 118),
      ::capnp::word(101, 110, 116, 115, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 110, 100, 97, 83, 116, 97),
      ::capnp::word(116, 101, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(30, 89, 228, 117, 37, 158, 100, 167),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 100, 97, 114, 83, 116, 97),
      ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(95, 208, 253, 214, 137, 83, 24, 154),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 85, 73, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 252, 174, 150, 249, 64, 130, 192),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 69, 110, 99, 111),
      ::capnp::word(100, 101, 73, 100, 120, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 84, 114, 97, 99),
      ::capnp::word(107, 115, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 194, 222, 50, 71, 100, 170, 143),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 110, 100, 99, 97, 110, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 124, 76, 150, 154, 0, 133, 135),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 103, 77, 101, 115, 115, 97),
      ::capnp::word(103, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 67, 97, 108, 105),
      ::capnp::word(98, 114, 97, 116, 105, 111, 110, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 144, 131, 77, 117, 112, 223, 150),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 100, 114, 111, 105, 100, 76),
      ::capnp::word(111, 103, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 125, 79, 137, 161, 93, 9, 234),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 76, 111, 99, 97, 116),
      ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 213, 173, 89, 72, 82, 70, 233),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 83, 116, 97, 116, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 144, 82, 224, 9, 250, 164, 157),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 67, 111, 110, 116, 114),
      ::capnp::word(111, 108, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(175, 20, 184, 154, 4, 41, 136, 247),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 80, 108, 97, 110),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 135, 18, 186, 62, 91, 11, 224),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 76, 111, 99, 97),
      ::capnp::word(116, 105, 111, 110, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 129, 126, 165, 199, 43, 155, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 116, 104, 101, 114, 110, 101, 116),
      ::capnp::word(68, 97, 116, 97, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 88, 207, 51, 91, 157, 154, 169),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 97, 118, 85, 112, 100, 97, 116),
      ::capnp::word(101, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(203, 106, 81, 101, 101, 190, 152, 219),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 101, 108, 108, 73, 110, 102, 111),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(206, 119, 194, 129, 102, 86, 247, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 105, 102, 105, 83, 99, 97, 110),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 186, 130, 35, 25, 90, 223, 212),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 100, 114, 111, 105, 100, 71),
      ::capnp::word(110, 115, 115, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 133, 196, 63, 208, 48, 223, 223),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 99, 111, 109, 71, 110, 115, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 81, 174, 7, 75, 103, 148, 222),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 100, 97, 114, 80, 116, 115),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(122, 143, 157, 78, 93, 104, 214, 227),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 111, 99, 76, 111, 103, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 20, 104, 63, 123, 56, 133, 175),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 98, 108, 111, 120, 71, 110, 115),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 250, 206, 230, 124, 221, 221, 133),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 108, 111, 99, 107, 115, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 70, 220, 123, 154, 180, 95, 201),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 77, 112, 99, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 50, 95, 168, 50, 227, 165, 146),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 76, 111, 110, 103),
      ::capnp::word(105, 116, 117, 100, 105, 110, 97, 108),
      ::capnp::word(77, 112, 99, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(226, 90, 134, 79, 67, 124, 225, 231),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 97, 118, 83, 116, 97, 116, 117),
      ::capnp::word(115, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 18, 40, 9, 18, 34, 136, 189),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 98, 108, 111, 120, 82, 97, 119),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 80, 108, 97, 110, 110),
      ::capnp::word(101, 114, 80, 111, 105, 110, 116, 115),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(243, 249, 248, 153, 150, 197, 84, 171),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 80, 108, 97, 110, 110),
      ::capnp::word(101, 114, 80, 108, 97, 110, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(107, 221, 193, 205, 144, 29, 173, 245),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 112, 112, 108, 97, 110, 105, 120),
      ::capnp::word(82, 97, 119, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 114, 97, 102, 102, 105, 99, 69),
      ::capnp::word(118, 101, 110, 116, 115, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(38, 38, 230, 148, 160, 116, 250, 172),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 76, 111, 99, 97),
      ::capnp::word(116, 105, 111, 110, 84, 105, 109, 105),
      ::capnp::word(110, 103, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 129, 126, 165, 199, 43, 155, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 98, 115, 108, 97, 109, 67),
      ::capnp::word(111, 114, 114, 101, 99, 116, 105, 111),
      ::capnp::word(110, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(170, 225, 53, 155, 220, 51, 253, 138),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 76, 111, 99, 97),
      ::capnp::word(116, 105, 111, 110, 67, 111, 114, 114),
      ::capnp::word(101, 99, 116, 101, 100, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 129, 126, 165, 199, 43, 155, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 98, 79, 98, 115, 101, 114),
      ::capnp::word(118, 97, 116, 105, 111, 110, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(199, 254, 106, 67, 78, 109, 50, 155),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 112, 115, 76, 111, 99, 97, 116),
      ::capnp::word(105, 111, 110, 69, 120, 116, 101, 114),
      ::capnp::word(110, 97, 108, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 213, 173, 89, 72, 82, 70, 233),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 99, 97, 116, 105, 111, 110),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 129, 126, 165, 199, 43, 155, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 105, 78, 97, 118, 105, 103, 97),
      ::capnp::word(116, 105, 111, 110, 69, 118, 101, 110),
      ::capnp::word(116, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(59, 221, 173, 62, 108, 66, 200, 144),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 76, 111, 99, 97),
      ::capnp::word(116, 105, 111, 110, 75, 97, 108, 109),
      ::capnp::word(97, 110, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 129, 126, 165, 199, 43, 155, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 101, 115, 116, 74, 111, 121, 115),
      ::capnp::word(116, 105, 99, 107, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(226, 21, 39, 142, 101, 1, 36, 228),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 98, 79, 100, 111, 109, 101),
      ::capnp::word(116, 114, 121, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 91, 31, 237, 89, 8, 112, 215),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 98, 70, 101, 97, 116, 117),
      ::capnp::word(114, 101, 115, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(239, 89, 1, 138, 74, 22, 96, 205),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 112, 112, 108, 97, 110, 105, 120),
      ::capnp::word(76, 111, 99, 97, 116, 105, 111, 110),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 129, 126, 165, 199, 43, 155, 185),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 98, 75, 101, 121, 70, 114),
      ::capnp::word(97, 109, 101, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 126, 226, 69, 3, 60, 35, 200),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 105, 76, 97, 121, 111, 117, 116),
      ::capnp::word(83, 116, 97, 116, 101, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 221, 41, 173, 8, 206, 220, 136),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 98, 70, 101, 97, 116, 117),
      ::capnp::word(114, 101, 115, 83, 117, 109, 109, 97),
      ::capnp::word(114, 121, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(79, 250, 3, 88, 12, 211, 0, 213),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 105, 118, 101, 114, 83, 116),
      ::capnp::word(97, 116, 101, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 10, 237, 147, 197, 108, 60, 184),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 111, 111, 116, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 37, 122, 146, 112, 134, 46, 161),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 80, 97, 114, 97),
      ::capnp::word(109, 101, 116, 101, 114, 115, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(83, 39, 124, 150, 203, 141, 5, 217),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 77, 97, 112, 68),
      ::capnp::word(97, 116, 97, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(166, 17, 247, 147, 143, 38, 62, 148),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 109, 101, 114, 97, 79, 100),
      ::capnp::word(111, 109, 101, 116, 114, 121, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(150, 26, 212, 159, 107, 41, 154, 250),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 101, 114, 97, 108, 80),
      ::capnp::word(108, 97, 110, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(30, 181, 232, 42, 142, 49, 233, 225),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(107, 97, 108, 109, 97, 110, 79, 100),
      ::capnp::word(111, 109, 101, 116, 114, 121, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(58, 121, 56, 234, 183, 27, 226, 146),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 104, 117, 109, 98, 110, 97, 105),
      ::capnp::word(108, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(211, 247, 10, 18, 100, 206, 95, 182),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 97, 108, 105, 100, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 110, 114, 111, 97, 100, 69, 118),
      ::capnp::word(101, 110, 116, 115, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(211, 58, 175, 76, 243, 87, 22, 155),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 80, 97, 114, 97, 109),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 105, 118, 101, 114, 67, 97),
      ::capnp::word(109, 101, 114, 97, 83, 116, 97, 116),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(51, 10, 174, 149, 246, 69, 2, 234),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 105, 118, 101, 114, 77, 111),
      ::capnp::word(110, 105, 116, 111, 114, 105, 110, 103),
      ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 162, 29, 74, 9, 218, 60, 184),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 76, 111, 99, 97),
      ::capnp::word(116, 105, 111, 110, 75, 97, 108, 109),
      ::capnp::word(97, 110, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 193, 231, 30, 61, 112, 197, 235),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 110, 116, 105, 110, 101, 108),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 110, 245, 68, 210, 130, 3, 239),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 105, 100, 101, 82, 111, 97, 100),
      ::capnp::word(67, 97, 109, 101, 114, 97, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(51, 10, 174, 149, 246, 69, 2, 234),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 111, 100, 101, 108, 86, 50, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 171, 54, 13, 107, 63, 113, 196),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 105, 118, 101, 114, 69, 110),
      ::capnp::word(99, 111, 100, 101, 73, 100, 120, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 105, 100, 101, 82, 111, 97, 100),
      ::capnp::word(69, 110, 99, 111, 100, 101, 73, 100),
      ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 110, 97, 103, 101, 114, 83),
      ::capnp::word(116, 97, 116, 101, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(91, 99, 105, 26, 179, 84, 113, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 112, 108, 111, 97, 100, 101, 114),
      ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(30, 70, 107, 183, 57, 107, 38, 222),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 101, 114, 105, 112, 104, 101, 114),
      ::capnp::word(97, 108, 83, 116, 97, 116, 101, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 122, 133, 52, 151, 244, 184, 206),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 110, 100, 97, 83, 116, 97),
      ::capnp::word(116, 101, 115, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(30, 89, 228, 117, 37, 158, 100, 167),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 97, 118, 73, 110, 115, 116, 114),
      ::capnp::word(117, 99, 116, 105, 111, 110, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(175, 2, 134, 127, 178, 22, 130, 193),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 97, 118, 82, 111, 117, 116, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(211, 151, 13, 68, 246, 82, 20, 166),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 97, 118, 84, 104, 117, 109, 98),
      ::capnp::word(110, 97, 105, 108, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(211, 247, 10, 18, 100, 206, 95, 182),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 114, 114, 111, 114, 76, 111, 103),
      ::capnp::word(77, 101, 115, 115, 97, 103, 101, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 97, 100, 69, 110, 99, 111),
      ::capnp::word(100, 101, 68, 97, 116, 97, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 133, 221, 85, 179, 234, 154, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 105, 118, 101, 114, 69, 110),
      ::capnp::word(99, 111, 100, 101, 68, 97, 116, 97),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 133, 221, 85, 179, 234, 154, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 105, 100, 101, 82, 111, 97, 100),
      ::capnp::word(69, 110, 99, 111, 100, 101, 68, 97),
      ::capnp::word(116, 97, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 133, 221, 85, 179, 234, 154, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 82, 111, 97, 100, 69, 110, 99),
      ::capnp::word(111, 100, 101, 68, 97, 116, 97, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 133, 221, 85, 179, 234, 154, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 82, 111, 97, 100, 69, 110, 99),
      ::capnp::word(111, 100, 101, 73, 100, 120, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 110, 115, 115, 77, 101, 97, 115),
      ::capnp::word(117, 114, 101, 109, 101, 110, 116, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 157, 14, 87, 22, 112, 212, 175),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 105, 118, 101, 114, 83, 116),
      ::capnp::word(97, 116, 101, 86, 50, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 99, 117, 20, 64, 12, 1, 252),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 115, 101, 114, 70, 108, 97, 103),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 155, 141, 228, 157, 106, 52, 254),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 84, 111, 114, 113),
      ::capnp::word(117, 101, 80, 97, 114, 97, 109, 101),
      ::capnp::word(116, 101, 114, 115, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(146, 22, 9, 11, 235, 144, 22, 230),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 103, 110, 101, 116, 111, 109),
      ::capnp::word(101, 116, 101, 114, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 103, 104, 116, 83, 101, 110),
      ::capnp::word(115, 111, 114, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 101, 109, 112, 101, 114, 97, 116),
      ::capnp::word(117, 114, 101, 83, 101, 110, 115, 111),
      ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 101, 108, 101, 114, 111),
      ::capnp::word(109, 101, 116, 101, 114, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 121, 114, 111, 115, 99, 111, 112),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 121, 114, 111, 115, 99, 111, 112),
      ::capnp::word(101, 50, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 101, 108, 101, 114, 111),
      ::capnp::word(109, 101, 116, 101, 114, 50, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 105, 68, 101, 98, 117, 103, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(207, 234, 250, 111, 137, 173, 53, 254),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 105, 99, 114, 111, 112, 104, 111),
      ::capnp::word(110, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(35, 96, 114, 144, 137, 19, 36, 220),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 97, 118, 77, 111, 100, 101, 108),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(122, 5, 190, 55, 196, 229, 61, 172),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 112, 82, 101, 110, 100, 101),
      ::capnp::word(114, 83, 116, 97, 116, 101, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(27, 168, 250, 76, 42, 221, 88, 161),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 105, 80, 108, 97, 110, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 39, 57, 94, 176, 155, 12, 252),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 48, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(175, 244, 76, 57, 90, 240, 194, 129),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 49, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 181, 231, 49, 143, 253, 223, 174),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 50, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(194, 110, 191, 11, 86, 196, 92, 243),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 51, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 76, 68, 131, 152, 87, 150, 218),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 52, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 107, 89, 226, 110, 116, 174, 128),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 53, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 164, 81, 217, 44, 118, 205, 165),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 54, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(163, 4, 112, 253, 59, 132, 141, 249),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 55, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 1, 76, 33, 105, 99, 110, 184),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 56, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 157, 157, 73, 9, 236, 22, 244),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 57, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 219, 31, 3, 68, 7, 104, 161),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 115, 116, 114, 101),
      ::capnp::word(97, 109, 82, 111, 97, 100, 69, 110),
      ::capnp::word(99, 111, 100, 101, 73, 100, 120, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 115, 116, 114, 101),
      ::capnp::word(97, 109, 87, 105, 100, 101, 82, 111),
      ::capnp::word(97, 100, 69, 110, 99, 111, 100, 101),
      ::capnp::word(73, 100, 120, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 115, 116, 114, 101),
      ::capnp::word(97, 109, 68, 114, 105, 118, 101, 114),
      ::capnp::word(69, 110, 99, 111, 100, 101, 73, 100),
      ::capnp::word(120, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 53, 23, 84, 227, 148, 211, 137),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 115, 116, 114, 101),
      ::capnp::word(97, 109, 82, 111, 97, 100, 69, 110),
      ::capnp::word(99, 111, 100, 101, 68, 97, 116, 97),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 133, 221, 85, 179, 234, 154, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 115, 116, 114, 101),
      ::capnp::word(97, 109, 87, 105, 100, 101, 82, 111),
      ::capnp::word(97, 100, 69, 110, 99, 111, 100, 101),
      ::capnp::word(68, 97, 116, 97, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 133, 221, 85, 179, 234, 154, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 105, 118, 101, 115, 116, 114, 101),
      ::capnp::word(97, 109, 68, 114, 105, 118, 101, 114),
      ::capnp::word(69, 110, 99, 111, 100, 101, 68, 97),
      ::capnp::word(116, 97, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 133, 221, 85, 179, 234, 154, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 101, 109, 112, 101, 114, 97, 116),
      ::capnp::word(117, 114, 101, 83, 101, 110, 115, 111),
      ::capnp::word(114, 50, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 41, 69, 212, 105, 154, 178, 162),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 82, 97),
      ::capnp::word(119, 68, 97, 116, 97, 48, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 82, 97),
      ::capnp::word(119, 68, 97, 116, 97, 49, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 117, 115, 116, 111, 109, 82, 101),
      ::capnp::word(115, 101, 114, 118, 101, 100, 82, 97),
      ::capnp::word(119, 68, 97, 116, 97, 50, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 79, 117, 116, 112, 117),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 202, 21, 81, 101, 214, 23, 216),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <crate::cereal::log_capnp::init_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <crate::cereal::log_capnp::frame_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        3 => <crate::cereal::log_capnp::g_p_s_n_m_e_a_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::log_capnp::sensor_event_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::can_data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        6 => <crate::cereal::log_capnp::device_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        7 => <crate::cereal::log_capnp::controls_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        8 => <::capnp::struct_list::Owned<crate::cereal::legacy_capnp::live_event_data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        9 => <crate::cereal::legacy_capnp::model_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        10 => <crate::cereal::legacy_capnp::calibration_features::Owned as ::capnp::introspect::Introspect>::introspect(),
        11 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::sensor_event_data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        12 => <crate::cereal::log_capnp::panda_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        13 => <crate::cereal::log_capnp::radar_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        14 => <crate::cereal::legacy_capnp::live_u_i::Owned as ::capnp::introspect::Introspect>::introspect(),
        15 => <crate::cereal::log_capnp::encode_index::Owned as ::capnp::introspect::Introspect>::introspect(),
        16 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::live_tracks::Owned> as ::capnp::introspect::Introspect>::introspect(),
        17 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::can_data::Owned> as ::capnp::introspect::Introspect>::introspect(),
        18 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        19 => <crate::cereal::log_capnp::live_calibration_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        20 => <crate::cereal::log_capnp::android_log_entry::Owned as ::capnp::introspect::Introspect>::introspect(),
        21 => <crate::cereal::log_capnp::gps_location_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        22 => <crate::cereal::car_capnp::car_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        23 => <crate::cereal::car_capnp::car_control::Owned as ::capnp::introspect::Introspect>::introspect(),
        24 => <crate::cereal::log_capnp::longitudinal_plan::Owned as ::capnp::introspect::Introspect>::introspect(),
        25 => <crate::cereal::legacy_capnp::live_location_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        26 => <::capnp::struct_list::Owned<crate::cereal::legacy_capnp::ethernet_packet::Owned> as ::capnp::introspect::Introspect>::introspect(),
        27 => <crate::cereal::legacy_capnp::nav_update::Owned as ::capnp::introspect::Introspect>::introspect(),
        28 => <::capnp::struct_list::Owned<crate::cereal::legacy_capnp::cell_info::Owned> as ::capnp::introspect::Introspect>::introspect(),
        29 => <::capnp::struct_list::Owned<crate::cereal::legacy_capnp::wifi_scan::Owned> as ::capnp::introspect::Introspect>::introspect(),
        30 => <crate::cereal::legacy_capnp::android_gnss::Owned as ::capnp::introspect::Introspect>::introspect(),
        31 => <crate::cereal::log_capnp::qcom_gnss::Owned as ::capnp::introspect::Introspect>::introspect(),
        32 => <crate::cereal::legacy_capnp::lidar_pts::Owned as ::capnp::introspect::Introspect>::introspect(),
        33 => <crate::cereal::log_capnp::proc_log::Owned as ::capnp::introspect::Introspect>::introspect(),
        34 => <crate::cereal::log_capnp::ublox_gnss::Owned as ::capnp::introspect::Introspect>::introspect(),
        35 => <crate::cereal::log_capnp::clocks::Owned as ::capnp::introspect::Introspect>::introspect(),
        36 => <crate::cereal::log_capnp::live_mpc_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        37 => <crate::cereal::log_capnp::live_longitudinal_mpc_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        38 => <crate::cereal::legacy_capnp::nav_status::Owned as ::capnp::introspect::Introspect>::introspect(),
        39 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        40 => <crate::cereal::legacy_capnp::g_p_s_planner_points::Owned as ::capnp::introspect::Introspect>::introspect(),
        41 => <crate::cereal::legacy_capnp::g_p_s_planner_plan::Owned as ::capnp::introspect::Introspect>::introspect(),
        42 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        43 => <::capnp::struct_list::Owned<crate::cereal::legacy_capnp::traffic_event::Owned> as ::capnp::introspect::Introspect>::introspect(),
        44 => <crate::cereal::legacy_capnp::live_location_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        45 => <crate::cereal::legacy_capnp::orbslam_correction::Owned as ::capnp::introspect::Introspect>::introspect(),
        46 => <crate::cereal::legacy_capnp::live_location_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        47 => <::capnp::struct_list::Owned<crate::cereal::legacy_capnp::orb_observation::Owned> as ::capnp::introspect::Introspect>::introspect(),
        48 => <crate::cereal::log_capnp::gps_location_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        49 => <crate::cereal::legacy_capnp::live_location_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        50 => <crate::cereal::legacy_capnp::ui_navigation_event::Owned as ::capnp::introspect::Introspect>::introspect(),
        51 => <crate::cereal::legacy_capnp::live_location_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        52 => <crate::cereal::log_capnp::joystick::Owned as ::capnp::introspect::Introspect>::introspect(),
        53 => <crate::cereal::legacy_capnp::orb_odometry::Owned as ::capnp::introspect::Introspect>::introspect(),
        54 => <crate::cereal::legacy_capnp::orb_features::Owned as ::capnp::introspect::Introspect>::introspect(),
        55 => <crate::cereal::legacy_capnp::live_location_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        56 => <crate::cereal::legacy_capnp::orb_key_frame::Owned as ::capnp::introspect::Introspect>::introspect(),
        57 => <crate::cereal::legacy_capnp::ui_layout_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        58 => <crate::cereal::legacy_capnp::orb_features_summary::Owned as ::capnp::introspect::Introspect>::introspect(),
        59 => <crate::cereal::log_capnp::driver_state_d_e_p_r_e_c_a_t_e_d::Owned as ::capnp::introspect::Introspect>::introspect(),
        60 => <crate::cereal::log_capnp::boot::Owned as ::capnp::introspect::Introspect>::introspect(),
        61 => <crate::cereal::log_capnp::live_parameters_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        62 => <crate::cereal::log_capnp::live_map_data_d_e_p_r_e_c_a_t_e_d::Owned as ::capnp::introspect::Introspect>::introspect(),
        63 => <crate::cereal::log_capnp::camera_odometry::Owned as ::capnp::introspect::Introspect>::introspect(),
        64 => <crate::cereal::log_capnp::lateral_plan::Owned as ::capnp::introspect::Introspect>::introspect(),
        65 => <crate::cereal::legacy_capnp::kalman_odometry::Owned as ::capnp::introspect::Introspect>::introspect(),
        66 => <crate::cereal::log_capnp::thumbnail::Owned as ::capnp::introspect::Introspect>::introspect(),
        67 => <bool as ::capnp::introspect::Introspect>::introspect(),
        68 => <::capnp::struct_list::Owned<crate::cereal::car_capnp::car_event::Owned> as ::capnp::introspect::Introspect>::introspect(),
        69 => <crate::cereal::car_capnp::car_params::Owned as ::capnp::introspect::Introspect>::introspect(),
        70 => <crate::cereal::log_capnp::frame_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        71 => <crate::cereal::log_capnp::driver_monitoring_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        72 => <crate::cereal::log_capnp::live_location_kalman::Owned as ::capnp::introspect::Introspect>::introspect(),
        73 => <crate::cereal::log_capnp::sentinel::Owned as ::capnp::introspect::Introspect>::introspect(),
        74 => <crate::cereal::log_capnp::frame_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        75 => <crate::cereal::log_capnp::model_data_v2::Owned as ::capnp::introspect::Introspect>::introspect(),
        76 => <crate::cereal::log_capnp::encode_index::Owned as ::capnp::introspect::Introspect>::introspect(),
        77 => <crate::cereal::log_capnp::encode_index::Owned as ::capnp::introspect::Introspect>::introspect(),
        78 => <crate::cereal::log_capnp::manager_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        79 => <crate::cereal::log_capnp::uploader_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        80 => <crate::cereal::log_capnp::peripheral_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        81 => <::capnp::struct_list::Owned<crate::cereal::log_capnp::panda_state::Owned> as ::capnp::introspect::Introspect>::introspect(),
        82 => <crate::cereal::log_capnp::nav_instruction::Owned as ::capnp::introspect::Introspect>::introspect(),
        83 => <crate::cereal::log_capnp::nav_route::Owned as ::capnp::introspect::Introspect>::introspect(),
        84 => <crate::cereal::log_capnp::thumbnail::Owned as ::capnp::introspect::Introspect>::introspect(),
        85 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        86 => <crate::cereal::log_capnp::encode_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        87 => <crate::cereal::log_capnp::encode_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        88 => <crate::cereal::log_capnp::encode_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        89 => <crate::cereal::log_capnp::encode_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        90 => <crate::cereal::log_capnp::encode_index::Owned as ::capnp::introspect::Introspect>::introspect(),
        91 => <crate::cereal::log_capnp::gnss_measurements::Owned as ::capnp::introspect::Introspect>::introspect(),
        92 => <crate::cereal::log_capnp::driver_state_v2::Owned as ::capnp::introspect::Introspect>::introspect(),
        93 => <crate::cereal::log_capnp::user_flag::Owned as ::capnp::introspect::Introspect>::introspect(),
        94 => <crate::cereal::log_capnp::live_torque_parameters_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        95 => <crate::cereal::log_capnp::sensor_event_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        96 => <crate::cereal::log_capnp::sensor_event_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        97 => <crate::cereal::log_capnp::sensor_event_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        98 => <crate::cereal::log_capnp::sensor_event_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        99 => <crate::cereal::log_capnp::sensor_event_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        100 => <crate::cereal::log_capnp::sensor_event_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        101 => <crate::cereal::log_capnp::sensor_event_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        102 => <crate::cereal::log_capnp::u_i_debug::Owned as ::capnp::introspect::Introspect>::introspect(),
        103 => <crate::cereal::log_capnp::microphone::Owned as ::capnp::introspect::Introspect>::introspect(),
        104 => <crate::cereal::log_capnp::nav_model_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        105 => <crate::cereal::log_capnp::map_render_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        106 => <crate::cereal::log_capnp::ui_plan::Owned as ::capnp::introspect::Introspect>::introspect(),
        107 => <crate::cereal::custom_capnp::custom_reserved0::Owned as ::capnp::introspect::Introspect>::introspect(),
        108 => <crate::cereal::custom_capnp::custom_reserved1::Owned as ::capnp::introspect::Introspect>::introspect(),
        109 => <crate::cereal::custom_capnp::custom_reserved2::Owned as ::capnp::introspect::Introspect>::introspect(),
        110 => <crate::cereal::custom_capnp::custom_reserved3::Owned as ::capnp::introspect::Introspect>::introspect(),
        111 => <crate::cereal::custom_capnp::custom_reserved4::Owned as ::capnp::introspect::Introspect>::introspect(),
        112 => <crate::cereal::custom_capnp::custom_reserved5::Owned as ::capnp::introspect::Introspect>::introspect(),
        113 => <crate::cereal::custom_capnp::custom_reserved6::Owned as ::capnp::introspect::Introspect>::introspect(),
        114 => <crate::cereal::custom_capnp::custom_reserved7::Owned as ::capnp::introspect::Introspect>::introspect(),
        115 => <crate::cereal::custom_capnp::custom_reserved8::Owned as ::capnp::introspect::Introspect>::introspect(),
        116 => <crate::cereal::custom_capnp::custom_reserved9::Owned as ::capnp::introspect::Introspect>::introspect(),
        117 => <crate::cereal::log_capnp::encode_index::Owned as ::capnp::introspect::Introspect>::introspect(),
        118 => <crate::cereal::log_capnp::encode_index::Owned as ::capnp::introspect::Introspect>::introspect(),
        119 => <crate::cereal::log_capnp::encode_index::Owned as ::capnp::introspect::Introspect>::introspect(),
        120 => <crate::cereal::log_capnp::encode_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        121 => <crate::cereal::log_capnp::encode_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        122 => <crate::cereal::log_capnp::encode_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        123 => <crate::cereal::log_capnp::sensor_event_data::Owned as ::capnp::introspect::Introspect>::introspect(),
        124 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        125 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        126 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        127 => <crate::cereal::car_capnp::car_output::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,67];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127];
    pub static MEMBERS_BY_NAME : &[u16] = &[98,101,30,20,55,42,60,63,5,23,127,69,22,28,35,7,107,108,109,110,111,112,113,114,115,116,124,125,126,6,70,87,76,71,59,92,85,26,10,91,21,48,3,41,40,99,100,1,65,64,32,96,19,8,46,25,72,51,44,37,62,36,61,94,16,14,122,119,120,117,121,118,49,18,0,24,95,78,105,103,9,75,82,104,83,38,84,27,68,54,58,56,47,53,45,12,81,80,33,89,90,31,13,2,86,15,17,4,11,73,97,123,52,66,43,34,39,102,57,50,106,79,93,67,74,88,77,29];
    pub const TYPE_ID: u64 = 0xd314_cfd9_5722_9c11;
  }
  pub enum Which<A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,A23,A24,A25,A26,A27,A28,A29,A30,A31,A32,A33,A34,A35,A36,A37,A38,A39,A40,A41,A42,A43,A44,A45,A46,A47,A48,A49,A50,A51,A52,A53,A54,A55,A56,A57,A58,A59,A60,A61,A62,A63,A64,A65,A66,A67,A68,A69,A70,A71,A72,A73,A74,A75,A76,A77,A78,A79,A80,A81,A82,A83,A84,A85,A86,A87,A88,A89,A90,A91,A92,A93,A94,A95,A96,A97,A98,A99,A100,A101,A102,A103,A104,A105,A106,A107,A108,A109,A110,A111,A112,A113,A114,A115,A116,A117,A118,A119,A120,A121,A122,A123,A124,A125> {
    InitData(A0),
    RoadCameraState(A1),
    GpsNMEA(A2),
    SensorEventDEPRECATED(A3),
    Can(A4),
    DeviceState(A5),
    ControlsState(A6),
    LiveEventDEPRECATED(A7),
    Model(A8),
    FeaturesDEPRECATED(A9),
    SensorEventsDEPRECATED(A10),
    PandaStateDEPRECATED(A11),
    RadarState(A12),
    LiveUIDEPRECATED(A13),
    RoadEncodeIdx(A14),
    LiveTracks(A15),
    Sendcan(A16),
    LogMessage(A17),
    LiveCalibration(A18),
    AndroidLog(A19),
    GpsLocation(A20),
    CarState(A21),
    CarControl(A22),
    LongitudinalPlan(A23),
    LiveLocationDEPRECATED(A24),
    EthernetDataDEPRECATED(A25),
    NavUpdateDEPRECATED(A26),
    CellInfoDEPRECATED(A27),
    WifiScanDEPRECATED(A28),
    AndroidGnssDEPRECATED(A29),
    QcomGnss(A30),
    LidarPtsDEPRECATED(A31),
    ProcLog(A32),
    UbloxGnss(A33),
    Clocks(A34),
    LiveMpcDEPRECATED(A35),
    LiveLongitudinalMpcDEPRECATED(A36),
    NavStatusDEPRECATED(A37),
    UbloxRaw(A38),
    GpsPlannerPointsDEPRECATED(A39),
    GpsPlannerPlanDEPRECATED(A40),
    ApplanixRawDEPRECATED(A41),
    TrafficEventsDEPRECATED(A42),
    LiveLocationTimingDEPRECATED(A43),
    OrbslamCorrectionDEPRECATED(A44),
    LiveLocationCorrectedDEPRECATED(A45),
    OrbObservationDEPRECATED(A46),
    GpsLocationExternal(A47),
    LocationDEPRECATED(A48),
    UiNavigationEventDEPRECATED(A49),
    LiveLocationKalmanDEPRECATED(A50),
    TestJoystick(A51),
    OrbOdometryDEPRECATED(A52),
    OrbFeaturesDEPRECATED(A53),
    ApplanixLocationDEPRECATED(A54),
    OrbKeyFrameDEPRECATED(A55),
    UiLayoutStateDEPRECATED(A56),
    OrbFeaturesSummaryDEPRECATED(A57),
    DriverStateDEPRECATED(A58),
    Boot(A59),
    LiveParameters(A60),
    LiveMapDataDEPRECATED(A61),
    CameraOdometry(A62),
    LateralPlanDEPRECATED(A63),
    KalmanOdometryDEPRECATED(A64),
    Thumbnail(A65),
    OnroadEvents(A66),
    CarParams(A67),
    DriverCameraState(A68),
    DriverMonitoringState(A69),
    LiveLocationKalman(A70),
    Sentinel(A71),
    WideRoadCameraState(A72),
    ModelV2(A73),
    DriverEncodeIdx(A74),
    WideRoadEncodeIdx(A75),
    ManagerState(A76),
    UploaderState(A77),
    PeripheralState(A78),
    PandaStates(A79),
    NavInstruction(A80),
    NavRoute(A81),
    NavThumbnail(A82),
    ErrorLogMessage(A83),
    RoadEncodeData(A84),
    DriverEncodeData(A85),
    WideRoadEncodeData(A86),
    QRoadEncodeData(A87),
    QRoadEncodeIdx(A88),
    GnssMeasurements(A89),
    DriverStateV2(A90),
    UserFlag(A91),
    LiveTorqueParameters(A92),
    Magnetometer(A93),
    LightSensor(A94),
    TemperatureSensor(A95),
    Accelerometer(A96),
    Gyroscope(A97),
    Gyroscope2(A98),
    Accelerometer2(A99),
    UiDebug(A100),
    Microphone(A101),
    NavModel(A102),
    MapRenderState(A103),
    UiPlan(A104),
    CustomReserved0(A105),
    CustomReserved1(A106),
    CustomReserved2(A107),
    CustomReserved3(A108),
    CustomReserved4(A109),
    CustomReserved5(A110),
    CustomReserved6(A111),
    CustomReserved7(A112),
    CustomReserved8(A113),
    CustomReserved9(A114),
    LivestreamRoadEncodeIdx(A115),
    LivestreamWideRoadEncodeIdx(A116),
    LivestreamDriverEncodeIdx(A117),
    LivestreamRoadEncodeData(A118),
    LivestreamWideRoadEncodeData(A119),
    LivestreamDriverEncodeData(A120),
    TemperatureSensor2(A121),
    CustomReservedRawData0(A122),
    CustomReservedRawData1(A123),
    CustomReservedRawData2(A124),
    CarOutput(A125),
  }
  pub type WhichReader<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::init_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::frame_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::g_p_s_n_m_e_a_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::can_data::Owned>>,::capnp::Result<crate::cereal::log_capnp::device_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::legacy_capnp::live_event_data::Owned>>,::capnp::Result<crate::cereal::legacy_capnp::model_data::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::calibration_features::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::sensor_event_data::Owned>>,::capnp::Result<crate::cereal::log_capnp::panda_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::radar_state::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_u_i::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::live_tracks::Owned>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::can_data::Owned>>,::capnp::Result<::capnp::text::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::live_calibration_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::android_log_entry::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::gps_location_data::Reader<'a>>,::capnp::Result<crate::cereal::car_capnp::car_state::Reader<'a>>,::capnp::Result<crate::cereal::car_capnp::car_control::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::longitudinal_plan::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::legacy_capnp::ethernet_packet::Owned>>,::capnp::Result<crate::cereal::legacy_capnp::nav_update::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::legacy_capnp::cell_info::Owned>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::legacy_capnp::wifi_scan::Owned>>,::capnp::Result<crate::cereal::legacy_capnp::android_gnss::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::qcom_gnss::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::lidar_pts::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::proc_log::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::clocks::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::live_mpc_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::live_longitudinal_mpc_data::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::nav_status::Reader<'a>>,::capnp::Result<::capnp::data::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::g_p_s_planner_points::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::g_p_s_planner_plan::Reader<'a>>,::capnp::Result<::capnp::data::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::legacy_capnp::traffic_event::Owned>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orbslam_correction::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::legacy_capnp::orb_observation::Owned>>,::capnp::Result<crate::cereal::log_capnp::gps_location_data::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::ui_navigation_event::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::joystick::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orb_odometry::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orb_features::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orb_key_frame::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::ui_layout_state::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orb_features_summary::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::driver_state_d_e_p_r_e_c_a_t_e_d::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::boot::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::live_parameters_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::live_map_data_d_e_p_r_e_c_a_t_e_d::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::camera_odometry::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::lateral_plan::Reader<'a>>,::capnp::Result<crate::cereal::legacy_capnp::kalman_odometry::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::thumbnail::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::car_capnp::car_event::Owned>>,::capnp::Result<crate::cereal::car_capnp::car_params::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::frame_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::driver_monitoring_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::live_location_kalman::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sentinel::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::frame_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::model_data_v2::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::manager_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::uploader_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::peripheral_state::Reader<'a>>,::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::log_capnp::panda_state::Owned>>,::capnp::Result<crate::cereal::log_capnp::nav_instruction::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::nav_route::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::thumbnail::Reader<'a>>,::capnp::Result<::capnp::text::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::gnss_measurements::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::driver_state_v2::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::user_flag::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::live_torque_parameters_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::u_i_debug::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::microphone::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::nav_model_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::map_render_state::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::ui_plan::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved0::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved1::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved2::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved3::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved4::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved5::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved6::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved7::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved8::Reader<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved9::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Reader<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Reader<'a>>,::capnp::Result<::capnp::data::Reader<'a>>,::capnp::Result<::capnp::data::Reader<'a>>,::capnp::Result<::capnp::data::Reader<'a>>,::capnp::Result<crate::cereal::car_capnp::car_output::Reader<'a>>>;
  pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::cereal::log_capnp::init_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::frame_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::g_p_s_n_m_e_a_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::can_data::Owned>>,::capnp::Result<crate::cereal::log_capnp::device_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::controls_state::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::live_event_data::Owned>>,::capnp::Result<crate::cereal::legacy_capnp::model_data::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::calibration_features::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::sensor_event_data::Owned>>,::capnp::Result<crate::cereal::log_capnp::panda_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::radar_state::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_u_i::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::live_tracks::Owned>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::can_data::Owned>>,::capnp::Result<::capnp::text::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::live_calibration_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::android_log_entry::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::gps_location_data::Builder<'a>>,::capnp::Result<crate::cereal::car_capnp::car_state::Builder<'a>>,::capnp::Result<crate::cereal::car_capnp::car_control::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::longitudinal_plan::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::ethernet_packet::Owned>>,::capnp::Result<crate::cereal::legacy_capnp::nav_update::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::cell_info::Owned>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::wifi_scan::Owned>>,::capnp::Result<crate::cereal::legacy_capnp::android_gnss::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::qcom_gnss::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::lidar_pts::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::proc_log::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::ublox_gnss::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::clocks::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::live_mpc_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::live_longitudinal_mpc_data::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::nav_status::Builder<'a>>,::capnp::Result<::capnp::data::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::g_p_s_planner_points::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::g_p_s_planner_plan::Builder<'a>>,::capnp::Result<::capnp::data::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::traffic_event::Owned>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orbslam_correction::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::legacy_capnp::orb_observation::Owned>>,::capnp::Result<crate::cereal::log_capnp::gps_location_data::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::ui_navigation_event::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::joystick::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orb_odometry::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orb_features::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::live_location_data::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orb_key_frame::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::ui_layout_state::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::orb_features_summary::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::driver_state_d_e_p_r_e_c_a_t_e_d::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::boot::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::live_parameters_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::live_map_data_d_e_p_r_e_c_a_t_e_d::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::camera_odometry::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::lateral_plan::Builder<'a>>,::capnp::Result<crate::cereal::legacy_capnp::kalman_odometry::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::thumbnail::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_event::Owned>>,::capnp::Result<crate::cereal::car_capnp::car_params::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::frame_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::driver_monitoring_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::live_location_kalman::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sentinel::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::frame_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::model_data_v2::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::manager_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::uploader_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::peripheral_state::Builder<'a>>,::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::log_capnp::panda_state::Owned>>,::capnp::Result<crate::cereal::log_capnp::nav_instruction::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::nav_route::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::thumbnail::Builder<'a>>,::capnp::Result<::capnp::text::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::gnss_measurements::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::driver_state_v2::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::user_flag::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::live_torque_parameters_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::u_i_debug::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::microphone::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::nav_model_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::map_render_state::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::ui_plan::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved0::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved1::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved2::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved3::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved4::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved5::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved6::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved7::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved8::Builder<'a>>,::capnp::Result<crate::cereal::custom_capnp::custom_reserved9::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_index::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::encode_data::Builder<'a>>,::capnp::Result<crate::cereal::log_capnp::sensor_event_data::Builder<'a>>,::capnp::Result<::capnp::data::Builder<'a>>,::capnp::Result<::capnp::data::Builder<'a>>,::capnp::Result<::capnp::data::Builder<'a>>,::capnp::Result<crate::cereal::car_capnp::car_output::Builder<'a>>>;
}
