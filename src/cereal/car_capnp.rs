// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: car.capnp


pub mod car_event {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_name(self) -> ::core::result::Result<crate::cereal::car_capnp::car_event::EventName,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_enable(self) -> bool {
      self.reader.get_bool_field(16)
    }
    #[inline]
    pub fn get_no_entry(self) -> bool {
      self.reader.get_bool_field(17)
    }
    #[inline]
    pub fn get_warning(self) -> bool {
      self.reader.get_bool_field(18)
    }
    #[inline]
    pub fn get_user_disable(self) -> bool {
      self.reader.get_bool_field(19)
    }
    #[inline]
    pub fn get_soft_disable(self) -> bool {
      self.reader.get_bool_field(20)
    }
    #[inline]
    pub fn get_immediate_disable(self) -> bool {
      self.reader.get_bool_field(21)
    }
    #[inline]
    pub fn get_pre_enable(self) -> bool {
      self.reader.get_bool_field(22)
    }
    #[inline]
    pub fn get_permanent(self) -> bool {
      self.reader.get_bool_field(23)
    }
    #[inline]
    pub fn get_override_longitudinal(self) -> bool {
      self.reader.get_bool_field(24)
    }
    #[inline]
    pub fn get_override_lateral(self) -> bool {
      self.reader.get_bool_field(25)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_name(self) -> ::core::result::Result<crate::cereal::car_capnp::car_event::EventName,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_name(&mut self, value: crate::cereal::car_capnp::car_event::EventName)  {
      self.builder.set_data_field::<u16>(0, value as u16);
    }
    #[inline]
    pub fn get_enable(self) -> bool {
      self.builder.get_bool_field(16)
    }
    #[inline]
    pub fn set_enable(&mut self, value: bool)  {
      self.builder.set_bool_field(16, value);
    }
    #[inline]
    pub fn get_no_entry(self) -> bool {
      self.builder.get_bool_field(17)
    }
    #[inline]
    pub fn set_no_entry(&mut self, value: bool)  {
      self.builder.set_bool_field(17, value);
    }
    #[inline]
    pub fn get_warning(self) -> bool {
      self.builder.get_bool_field(18)
    }
    #[inline]
    pub fn set_warning(&mut self, value: bool)  {
      self.builder.set_bool_field(18, value);
    }
    #[inline]
    pub fn get_user_disable(self) -> bool {
      self.builder.get_bool_field(19)
    }
    #[inline]
    pub fn set_user_disable(&mut self, value: bool)  {
      self.builder.set_bool_field(19, value);
    }
    #[inline]
    pub fn get_soft_disable(self) -> bool {
      self.builder.get_bool_field(20)
    }
    #[inline]
    pub fn set_soft_disable(&mut self, value: bool)  {
      self.builder.set_bool_field(20, value);
    }
    #[inline]
    pub fn get_immediate_disable(self) -> bool {
      self.builder.get_bool_field(21)
    }
    #[inline]
    pub fn set_immediate_disable(&mut self, value: bool)  {
      self.builder.set_bool_field(21, value);
    }
    #[inline]
    pub fn get_pre_enable(self) -> bool {
      self.builder.get_bool_field(22)
    }
    #[inline]
    pub fn set_pre_enable(&mut self, value: bool)  {
      self.builder.set_bool_field(22, value);
    }
    #[inline]
    pub fn get_permanent(self) -> bool {
      self.builder.get_bool_field(23)
    }
    #[inline]
    pub fn set_permanent(&mut self, value: bool)  {
      self.builder.set_bool_field(23, value);
    }
    #[inline]
    pub fn get_override_longitudinal(self) -> bool {
      self.builder.get_bool_field(24)
    }
    #[inline]
    pub fn set_override_longitudinal(&mut self, value: bool)  {
      self.builder.set_bool_field(24, value);
    }
    #[inline]
    pub fn get_override_lateral(self) -> bool {
      self.builder.get_bool_field(25)
    }
    #[inline]
    pub fn set_override_lateral(&mut self, value: bool)  {
      self.builder.set_bool_field(25, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 195] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(211, 58, 175, 76, 243, 87, 22, 155),
      ::capnp::word(10, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(141, 139, 175, 8, 231, 241, 42, 142),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 111, 2, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 114, 69, 118, 101),
      ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(222, 39, 247, 5, 213, 197, 168, 186),
      ::capnp::word(1, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(69, 118, 101, 110, 116, 78, 97, 109),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(44, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 1, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 1, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(44, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 1, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 1, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 1, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 1, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(100, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 1, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(112, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 1, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(222, 39, 247, 5, 213, 197, 168, 186),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 97, 98, 108, 101, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 111, 69, 110, 116, 114, 121, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 97, 114, 110, 105, 110, 103, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 115, 101, 114, 68, 105, 115, 97),
      ::capnp::word(98, 108, 101, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 102, 116, 68, 105, 115, 97),
      ::capnp::word(98, 108, 101, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 109, 109, 101, 100, 105, 97, 116),
      ::capnp::word(101, 68, 105, 115, 97, 98, 108, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 101, 69, 110, 97, 98, 108),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 101, 114, 109, 97, 110, 101, 110),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 118, 101, 114, 114, 105, 100, 101),
      ::capnp::word(76, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 118, 101, 114, 114, 105, 100, 101),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <crate::cereal::car_capnp::car_event::EventName as ::capnp::introspect::Introspect>::introspect(),
        1 => <bool as ::capnp::introspect::Introspect>::introspect(),
        2 => <bool as ::capnp::introspect::Introspect>::introspect(),
        3 => <bool as ::capnp::introspect::Introspect>::introspect(),
        4 => <bool as ::capnp::introspect::Introspect>::introspect(),
        5 => <bool as ::capnp::introspect::Introspect>::introspect(),
        6 => <bool as ::capnp::introspect::Introspect>::introspect(),
        7 => <bool as ::capnp::introspect::Introspect>::introspect(),
        8 => <bool as ::capnp::introspect::Introspect>::introspect(),
        9 => <bool as ::capnp::introspect::Introspect>::introspect(),
        10 => <bool as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,6,0,2,10,9,8,7,5,4,3];
    pub const TYPE_ID: u64 = 0x9b16_57f3_4caf_3ad3;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum EventName {
    CanError = 0,
    SteerUnavailable = 1,
    BrakeUnavailableDEPRECATED = 2,
    GasUnavailableDEPRECATED = 3,
    WrongGear = 4,
    DoorOpen = 5,
    SeatbeltNotLatched = 6,
    EspDisabled = 7,
    WrongCarMode = 8,
    SteerTempUnavailable = 9,
    ReverseGear = 10,
    ButtonCancel = 11,
    ButtonEnable = 12,
    PedalPressed = 13,
    CruiseDisabled = 14,
    RadarCanErrorDEPRECATED = 15,
    DataNeededDEPRECATED = 16,
    SpeedTooLow = 17,
    OutOfSpace = 18,
    Overheat = 19,
    CalibrationIncomplete = 20,
    CalibrationInvalid = 21,
    ControlsMismatch = 22,
    PcmEnable = 23,
    PcmDisable = 24,
    NoTargetDEPRECATED = 25,
    RadarFault = 26,
    ModelCommIssueDEPRECATED = 27,
    BrakeHold = 28,
    ParkBrake = 29,
    ManualRestart = 30,
    LowSpeedLockout = 31,
    PlannerErrorDEPRECATED = 32,
    IpasOverrideDEPRECATED = 33,
    JoystickDebug = 34,
    SteerTempUnavailableSilent = 35,
    ResumeRequired = 36,
    PreDriverDistracted = 37,
    PromptDriverDistracted = 38,
    DriverDistracted = 39,
    GeofenceDEPRECATED = 40,
    DriverMonitorOnDEPRECATED = 41,
    DriverMonitorOffDEPRECATED = 42,
    PreDriverUnresponsive = 43,
    PromptDriverUnresponsive = 44,
    DriverUnresponsive = 45,
    BelowSteerSpeed = 46,
    CalibrationProgressDEPRECATED = 47,
    LowBattery = 48,
    InvalidGiraffeHondaDEPRECATED = 49,
    ParamsdTemporaryError = 50,
    AccFaulted = 51,
    SensorDataInvalid = 52,
    CommIssue = 53,
    TooDistracted = 54,
    PosenetInvalid = 55,
    SoundsUnavailable = 56,
    PreLaneChangeLeft = 57,
    PreLaneChangeRight = 58,
    LaneChange = 59,
    InvalidGiraffeToyotaDEPRECATED = 60,
    InternetConnectivityNeededDEPRECATED = 61,
    CommunityFeatureDisallowedDEPRECATED = 62,
    LowMemory = 63,
    StockAeb = 64,
    Ldw = 65,
    CarUnrecognized = 66,
    RadarCommIssueDEPRECATED = 67,
    DriverMonitorLowAccDEPRECATED = 68,
    InvalidLkasSetting = 69,
    SpeedTooHigh = 70,
    LaneChangeBlocked = 71,
    RelayMalfunction = 72,
    PreEnableStandstill = 73,
    StockFcw = 74,
    Startup = 75,
    StartupNoCar = 76,
    StartupNoControl = 77,
    StartupMaster = 78,
    Fcw = 79,
    SteerSaturated = 80,
    WhitePandaUnsupportedDEPRECATED = 81,
    StartupOneplusDEPRECATED = 82,
    CommIssueWarningDEPRECATED = 83,
    BelowEngageSpeed = 84,
    NoGps = 85,
    FocusRecoverActiveDEPRECATED = 86,
    WrongCruiseMode = 87,
    NeosUpdateRequiredDEPRECATED = 88,
    ModeldLagging = 89,
    DeviceFalling = 90,
    FanMalfunction = 91,
    CameraMalfunction = 92,
    ModelLagWarningDEPRECATED = 93,
    GpsMalfunction = 94,
    ProcessNotRunning = 95,
    DashcamMode = 96,
    StartupFuzzyFingerprintDEPRECATED = 97,
    ControlsInitializing = 98,
    UsbError = 99,
    RoadCameraError = 100,
    DriverCameraError = 101,
    WideRoadCameraError = 102,
    LocationdTemporaryError = 103,
    StartupNoFw = 104,
    HighCpuUsage = 105,
    CruiseMismatch = 106,
    LkasDisabled = 107,
    GasPressedOverride = 108,
    CommIssueAvgFreq = 109,
    CameraFrameRate = 110,
    CanBusMissing = 111,
    ControlsdLagging = 112,
    ResumeBlocked = 113,
    SteerOverride = 114,
    SteerTimeLimit = 115,
    VehicleSensorsInvalid = 116,
    CalibrationRecalibrating = 117,
    LocationdPermanentError = 118,
    ParamsdPermanentError = 119,
  }

  impl ::capnp::introspect::Introspect for EventName {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &event_name::ENCODED_NODE, annotation_types: event_name::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<EventName> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: EventName) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &event_name::ENCODED_NODE, annotation_types: event_name::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for EventName {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <EventName as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::CanError),
        1 => ::core::result::Result::Ok(Self::SteerUnavailable),
        2 => ::core::result::Result::Ok(Self::BrakeUnavailableDEPRECATED),
        3 => ::core::result::Result::Ok(Self::GasUnavailableDEPRECATED),
        4 => ::core::result::Result::Ok(Self::WrongGear),
        5 => ::core::result::Result::Ok(Self::DoorOpen),
        6 => ::core::result::Result::Ok(Self::SeatbeltNotLatched),
        7 => ::core::result::Result::Ok(Self::EspDisabled),
        8 => ::core::result::Result::Ok(Self::WrongCarMode),
        9 => ::core::result::Result::Ok(Self::SteerTempUnavailable),
        10 => ::core::result::Result::Ok(Self::ReverseGear),
        11 => ::core::result::Result::Ok(Self::ButtonCancel),
        12 => ::core::result::Result::Ok(Self::ButtonEnable),
        13 => ::core::result::Result::Ok(Self::PedalPressed),
        14 => ::core::result::Result::Ok(Self::CruiseDisabled),
        15 => ::core::result::Result::Ok(Self::RadarCanErrorDEPRECATED),
        16 => ::core::result::Result::Ok(Self::DataNeededDEPRECATED),
        17 => ::core::result::Result::Ok(Self::SpeedTooLow),
        18 => ::core::result::Result::Ok(Self::OutOfSpace),
        19 => ::core::result::Result::Ok(Self::Overheat),
        20 => ::core::result::Result::Ok(Self::CalibrationIncomplete),
        21 => ::core::result::Result::Ok(Self::CalibrationInvalid),
        22 => ::core::result::Result::Ok(Self::ControlsMismatch),
        23 => ::core::result::Result::Ok(Self::PcmEnable),
        24 => ::core::result::Result::Ok(Self::PcmDisable),
        25 => ::core::result::Result::Ok(Self::NoTargetDEPRECATED),
        26 => ::core::result::Result::Ok(Self::RadarFault),
        27 => ::core::result::Result::Ok(Self::ModelCommIssueDEPRECATED),
        28 => ::core::result::Result::Ok(Self::BrakeHold),
        29 => ::core::result::Result::Ok(Self::ParkBrake),
        30 => ::core::result::Result::Ok(Self::ManualRestart),
        31 => ::core::result::Result::Ok(Self::LowSpeedLockout),
        32 => ::core::result::Result::Ok(Self::PlannerErrorDEPRECATED),
        33 => ::core::result::Result::Ok(Self::IpasOverrideDEPRECATED),
        34 => ::core::result::Result::Ok(Self::JoystickDebug),
        35 => ::core::result::Result::Ok(Self::SteerTempUnavailableSilent),
        36 => ::core::result::Result::Ok(Self::ResumeRequired),
        37 => ::core::result::Result::Ok(Self::PreDriverDistracted),
        38 => ::core::result::Result::Ok(Self::PromptDriverDistracted),
        39 => ::core::result::Result::Ok(Self::DriverDistracted),
        40 => ::core::result::Result::Ok(Self::GeofenceDEPRECATED),
        41 => ::core::result::Result::Ok(Self::DriverMonitorOnDEPRECATED),
        42 => ::core::result::Result::Ok(Self::DriverMonitorOffDEPRECATED),
        43 => ::core::result::Result::Ok(Self::PreDriverUnresponsive),
        44 => ::core::result::Result::Ok(Self::PromptDriverUnresponsive),
        45 => ::core::result::Result::Ok(Self::DriverUnresponsive),
        46 => ::core::result::Result::Ok(Self::BelowSteerSpeed),
        47 => ::core::result::Result::Ok(Self::CalibrationProgressDEPRECATED),
        48 => ::core::result::Result::Ok(Self::LowBattery),
        49 => ::core::result::Result::Ok(Self::InvalidGiraffeHondaDEPRECATED),
        50 => ::core::result::Result::Ok(Self::ParamsdTemporaryError),
        51 => ::core::result::Result::Ok(Self::AccFaulted),
        52 => ::core::result::Result::Ok(Self::SensorDataInvalid),
        53 => ::core::result::Result::Ok(Self::CommIssue),
        54 => ::core::result::Result::Ok(Self::TooDistracted),
        55 => ::core::result::Result::Ok(Self::PosenetInvalid),
        56 => ::core::result::Result::Ok(Self::SoundsUnavailable),
        57 => ::core::result::Result::Ok(Self::PreLaneChangeLeft),
        58 => ::core::result::Result::Ok(Self::PreLaneChangeRight),
        59 => ::core::result::Result::Ok(Self::LaneChange),
        60 => ::core::result::Result::Ok(Self::InvalidGiraffeToyotaDEPRECATED),
        61 => ::core::result::Result::Ok(Self::InternetConnectivityNeededDEPRECATED),
        62 => ::core::result::Result::Ok(Self::CommunityFeatureDisallowedDEPRECATED),
        63 => ::core::result::Result::Ok(Self::LowMemory),
        64 => ::core::result::Result::Ok(Self::StockAeb),
        65 => ::core::result::Result::Ok(Self::Ldw),
        66 => ::core::result::Result::Ok(Self::CarUnrecognized),
        67 => ::core::result::Result::Ok(Self::RadarCommIssueDEPRECATED),
        68 => ::core::result::Result::Ok(Self::DriverMonitorLowAccDEPRECATED),
        69 => ::core::result::Result::Ok(Self::InvalidLkasSetting),
        70 => ::core::result::Result::Ok(Self::SpeedTooHigh),
        71 => ::core::result::Result::Ok(Self::LaneChangeBlocked),
        72 => ::core::result::Result::Ok(Self::RelayMalfunction),
        73 => ::core::result::Result::Ok(Self::PreEnableStandstill),
        74 => ::core::result::Result::Ok(Self::StockFcw),
        75 => ::core::result::Result::Ok(Self::Startup),
        76 => ::core::result::Result::Ok(Self::StartupNoCar),
        77 => ::core::result::Result::Ok(Self::StartupNoControl),
        78 => ::core::result::Result::Ok(Self::StartupMaster),
        79 => ::core::result::Result::Ok(Self::Fcw),
        80 => ::core::result::Result::Ok(Self::SteerSaturated),
        81 => ::core::result::Result::Ok(Self::WhitePandaUnsupportedDEPRECATED),
        82 => ::core::result::Result::Ok(Self::StartupOneplusDEPRECATED),
        83 => ::core::result::Result::Ok(Self::CommIssueWarningDEPRECATED),
        84 => ::core::result::Result::Ok(Self::BelowEngageSpeed),
        85 => ::core::result::Result::Ok(Self::NoGps),
        86 => ::core::result::Result::Ok(Self::FocusRecoverActiveDEPRECATED),
        87 => ::core::result::Result::Ok(Self::WrongCruiseMode),
        88 => ::core::result::Result::Ok(Self::NeosUpdateRequiredDEPRECATED),
        89 => ::core::result::Result::Ok(Self::ModeldLagging),
        90 => ::core::result::Result::Ok(Self::DeviceFalling),
        91 => ::core::result::Result::Ok(Self::FanMalfunction),
        92 => ::core::result::Result::Ok(Self::CameraMalfunction),
        93 => ::core::result::Result::Ok(Self::ModelLagWarningDEPRECATED),
        94 => ::core::result::Result::Ok(Self::GpsMalfunction),
        95 => ::core::result::Result::Ok(Self::ProcessNotRunning),
        96 => ::core::result::Result::Ok(Self::DashcamMode),
        97 => ::core::result::Result::Ok(Self::StartupFuzzyFingerprintDEPRECATED),
        98 => ::core::result::Result::Ok(Self::ControlsInitializing),
        99 => ::core::result::Result::Ok(Self::UsbError),
        100 => ::core::result::Result::Ok(Self::RoadCameraError),
        101 => ::core::result::Result::Ok(Self::DriverCameraError),
        102 => ::core::result::Result::Ok(Self::WideRoadCameraError),
        103 => ::core::result::Result::Ok(Self::LocationdTemporaryError),
        104 => ::core::result::Result::Ok(Self::StartupNoFw),
        105 => ::core::result::Result::Ok(Self::HighCpuUsage),
        106 => ::core::result::Result::Ok(Self::CruiseMismatch),
        107 => ::core::result::Result::Ok(Self::LkasDisabled),
        108 => ::core::result::Result::Ok(Self::GasPressedOverride),
        109 => ::core::result::Result::Ok(Self::CommIssueAvgFreq),
        110 => ::core::result::Result::Ok(Self::CameraFrameRate),
        111 => ::core::result::Result::Ok(Self::CanBusMissing),
        112 => ::core::result::Result::Ok(Self::ControlsdLagging),
        113 => ::core::result::Result::Ok(Self::ResumeBlocked),
        114 => ::core::result::Result::Ok(Self::SteerOverride),
        115 => ::core::result::Result::Ok(Self::SteerTimeLimit),
        116 => ::core::result::Result::Ok(Self::VehicleSensorsInvalid),
        117 => ::core::result::Result::Ok(Self::CalibrationRecalibrating),
        118 => ::core::result::Result::Ok(Self::LocationdPermanentError),
        119 => ::core::result::Result::Ok(Self::ParamsdPermanentError),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<EventName> for u16 {
    #[inline]
    fn from(x: EventName) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for EventName {
    const TYPE_ID: u64 = 0xbaa8_c5d5_05f7_27deu64;
  }
  mod event_name {
  pub static ENCODED_NODE: [::capnp::Word; 701] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(222, 39, 247, 5, 213, 197, 168, 186),
    ::capnp::word(19, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(211, 58, 175, 76, 243, 87, 22, 155),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 234, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 71, 11, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 97, 114, 69, 118, 101),
    ::capnp::word(110, 116, 46, 69, 118, 101, 110, 116),
    ::capnp::word(78, 97, 109, 101, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(224, 1, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(153, 5, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(149, 5, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(118, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(149, 5, 0, 0, 218, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(153, 5, 0, 0, 202, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(157, 5, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(153, 5, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(149, 5, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(149, 5, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(145, 5, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(141, 5, 0, 0, 170, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(141, 5, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(137, 5, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(133, 5, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(129, 5, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(125, 5, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(95, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(121, 5, 0, 0, 194, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(121, 5, 0, 0, 170, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(121, 5, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 5, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(113, 5, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(19, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 5, 0, 0, 178, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(20, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 5, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(22, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 5, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(23, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 5, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(24, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 5, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 5, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 5, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 5, 0, 0, 202, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(26, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 5, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(27, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 5, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(28, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 5, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 5, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(119, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 5, 0, 0, 186, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 5, 0, 0, 186, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(30, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 5, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(31, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 5, 0, 0, 218, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(32, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 5, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 5, 0, 0, 162, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(34, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 5, 0, 0, 186, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(35, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 5, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 5, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(104, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 5, 0, 0, 210, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 5, 0, 0, 218, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(36, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 5, 0, 0, 178, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 5, 0, 0, 202, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(38, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 5, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(39, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 5, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(106, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 5, 0, 0, 242, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(40, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 5, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(107, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 5, 0, 0, 242, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 5, 0, 0, 178, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 5, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(42, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 5, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(43, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 5, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 5, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(46, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 5, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(47, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(48, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(50, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 5, 0, 0, 250, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 42, 1, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(96, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 5, 0, 0, 42, 1, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(51, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 5, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(52, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 5, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 5, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(54, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 5, 0, 0, 202, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 242, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(55, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 5, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(56, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 5, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(58, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 162, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(59, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 5, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(60, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 5, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 5, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(62, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 5, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(63, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 5, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 5, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(66, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 5, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 5, 0, 0, 2, 1, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 5, 0, 0, 202, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(111, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 5, 0, 0, 218, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(67, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 5, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 5, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 5, 0, 0, 234, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(69, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 5, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(113, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 5, 0, 0, 234, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(70, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 5, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(71, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 5, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(72, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 5, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 5, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 5, 0, 0, 210, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(75, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 5, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(76, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 5, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 5, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 5, 0, 0, 18, 1, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(78, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 5, 0, 0, 170, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(79, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 5, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(80, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 5, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 5, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(82, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 5, 0, 0, 162, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(91, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 5, 0, 0, 194, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(64, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 5, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(83, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 5, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(84, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 5, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 5, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 5, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(44, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 5, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(74, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 5, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(86, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 5, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(87, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 5, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(88, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 5, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 5, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 5, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(90, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 5, 0, 0, 178, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 5, 0, 0, 202, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(92, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 5, 0, 0, 194, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(94, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 5, 0, 0, 178, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 110, 69, 114, 114, 111, 114),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 116, 101, 101, 114, 85, 110, 97),
    ::capnp::word(118, 97, 105, 108, 97, 98, 108, 101),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 114, 97, 107, 101, 85, 110, 97),
    ::capnp::word(118, 97, 105, 108, 97, 98, 108, 101),
    ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
    ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 97, 115, 85, 110, 97, 118, 97),
    ::capnp::word(105, 108, 97, 98, 108, 101, 68, 69),
    ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(119, 114, 111, 110, 103, 71, 101, 97),
    ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(100, 111, 111, 114, 79, 112, 101, 110),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 101, 97, 116, 98, 101, 108, 116),
    ::capnp::word(78, 111, 116, 76, 97, 116, 99, 104),
    ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 115, 112, 68, 105, 115, 97, 98),
    ::capnp::word(108, 101, 100, 0, 0, 0, 0, 0),
    ::capnp::word(119, 114, 111, 110, 103, 67, 97, 114),
    ::capnp::word(77, 111, 100, 101, 0, 0, 0, 0),
    ::capnp::word(115, 116, 101, 101, 114, 84, 101, 109),
    ::capnp::word(112, 85, 110, 97, 118, 97, 105, 108),
    ::capnp::word(97, 98, 108, 101, 0, 0, 0, 0),
    ::capnp::word(114, 101, 118, 101, 114, 115, 101, 71),
    ::capnp::word(101, 97, 114, 0, 0, 0, 0, 0),
    ::capnp::word(98, 117, 116, 116, 111, 110, 67, 97),
    ::capnp::word(110, 99, 101, 108, 0, 0, 0, 0),
    ::capnp::word(98, 117, 116, 116, 111, 110, 69, 110),
    ::capnp::word(97, 98, 108, 101, 0, 0, 0, 0),
    ::capnp::word(112, 101, 100, 97, 108, 80, 114, 101),
    ::capnp::word(115, 115, 101, 100, 0, 0, 0, 0),
    ::capnp::word(99, 114, 117, 105, 115, 101, 68, 105),
    ::capnp::word(115, 97, 98, 108, 101, 100, 0, 0),
    ::capnp::word(114, 97, 100, 97, 114, 67, 97, 110),
    ::capnp::word(69, 114, 114, 111, 114, 68, 69, 80),
    ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
    ::capnp::word(100, 97, 116, 97, 78, 101, 101, 100),
    ::capnp::word(101, 100, 68, 69, 80, 82, 69, 67),
    ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
    ::capnp::word(115, 112, 101, 101, 100, 84, 111, 111),
    ::capnp::word(76, 111, 119, 0, 0, 0, 0, 0),
    ::capnp::word(111, 117, 116, 79, 102, 83, 112, 97),
    ::capnp::word(99, 101, 0, 0, 0, 0, 0, 0),
    ::capnp::word(111, 118, 101, 114, 104, 101, 97, 116),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 108, 105, 98, 114, 97, 116),
    ::capnp::word(105, 111, 110, 73, 110, 99, 111, 109),
    ::capnp::word(112, 108, 101, 116, 101, 0, 0, 0),
    ::capnp::word(99, 97, 108, 105, 98, 114, 97, 116),
    ::capnp::word(105, 111, 110, 73, 110, 118, 97, 108),
    ::capnp::word(105, 100, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 111, 110, 116, 114, 111, 108, 115),
    ::capnp::word(77, 105, 115, 109, 97, 116, 99, 104),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 99, 109, 69, 110, 97, 98, 108),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 99, 109, 68, 105, 115, 97, 98),
    ::capnp::word(108, 101, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 84, 97, 114, 103, 101, 116),
    ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
    ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 97, 100, 97, 114, 70, 97, 117),
    ::capnp::word(108, 116, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 111, 100, 101, 108, 67, 111, 109),
    ::capnp::word(109, 73, 115, 115, 117, 101, 68, 69),
    ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 114, 97, 107, 101, 72, 111, 108),
    ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 97, 114, 107, 66, 114, 97, 107),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 97, 110, 117, 97, 108, 82, 101),
    ::capnp::word(115, 116, 97, 114, 116, 0, 0, 0),
    ::capnp::word(108, 111, 119, 83, 112, 101, 101, 100),
    ::capnp::word(76, 111, 99, 107, 111, 117, 116, 0),
    ::capnp::word(112, 108, 97, 110, 110, 101, 114, 69),
    ::capnp::word(114, 114, 111, 114, 68, 69, 80, 82),
    ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
    ::capnp::word(105, 112, 97, 115, 79, 118, 101, 114),
    ::capnp::word(114, 105, 100, 101, 68, 69, 80, 82),
    ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
    ::capnp::word(106, 111, 121, 115, 116, 105, 99, 107),
    ::capnp::word(68, 101, 98, 117, 103, 0, 0, 0),
    ::capnp::word(115, 116, 101, 101, 114, 84, 101, 109),
    ::capnp::word(112, 85, 110, 97, 118, 97, 105, 108),
    ::capnp::word(97, 98, 108, 101, 83, 105, 108, 101),
    ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 101, 115, 117, 109, 101, 82, 101),
    ::capnp::word(113, 117, 105, 114, 101, 100, 0, 0),
    ::capnp::word(112, 114, 101, 68, 114, 105, 118, 101),
    ::capnp::word(114, 68, 105, 115, 116, 114, 97, 99),
    ::capnp::word(116, 101, 100, 0, 0, 0, 0, 0),
    ::capnp::word(112, 114, 111, 109, 112, 116, 68, 114),
    ::capnp::word(105, 118, 101, 114, 68, 105, 115, 116),
    ::capnp::word(114, 97, 99, 116, 101, 100, 0, 0),
    ::capnp::word(100, 114, 105, 118, 101, 114, 68, 105),
    ::capnp::word(115, 116, 114, 97, 99, 116, 101, 100),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 101, 111, 102, 101, 110, 99, 101),
    ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
    ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
    ::capnp::word(100, 114, 105, 118, 101, 114, 77, 111),
    ::capnp::word(110, 105, 116, 111, 114, 79, 110, 68),
    ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
    ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(100, 114, 105, 118, 101, 114, 77, 111),
    ::capnp::word(110, 105, 116, 111, 114, 79, 102, 102),
    ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
    ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 114, 101, 68, 114, 105, 118, 101),
    ::capnp::word(114, 85, 110, 114, 101, 115, 112, 111),
    ::capnp::word(110, 115, 105, 118, 101, 0, 0, 0),
    ::capnp::word(112, 114, 111, 109, 112, 116, 68, 114),
    ::capnp::word(105, 118, 101, 114, 85, 110, 114, 101),
    ::capnp::word(115, 112, 111, 110, 115, 105, 118, 101),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(100, 114, 105, 118, 101, 114, 85, 110),
    ::capnp::word(114, 101, 115, 112, 111, 110, 115, 105),
    ::capnp::word(118, 101, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 101, 108, 111, 119, 83, 116, 101),
    ::capnp::word(101, 114, 83, 112, 101, 101, 100, 0),
    ::capnp::word(99, 97, 108, 105, 98, 114, 97, 116),
    ::capnp::word(105, 111, 110, 80, 114, 111, 103, 114),
    ::capnp::word(101, 115, 115, 68, 69, 80, 82, 69),
    ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
    ::capnp::word(108, 111, 119, 66, 97, 116, 116, 101),
    ::capnp::word(114, 121, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 118, 97, 108, 105, 100, 71),
    ::capnp::word(105, 114, 97, 102, 102, 101, 72, 111),
    ::capnp::word(110, 100, 97, 68, 69, 80, 82, 69),
    ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
    ::capnp::word(112, 97, 114, 97, 109, 115, 100, 84),
    ::capnp::word(101, 109, 112, 111, 114, 97, 114, 121),
    ::capnp::word(69, 114, 114, 111, 114, 0, 0, 0),
    ::capnp::word(97, 99, 99, 70, 97, 117, 108, 116),
    ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 101, 110, 115, 111, 114, 68, 97),
    ::capnp::word(116, 97, 73, 110, 118, 97, 108, 105),
    ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 111, 109, 109, 73, 115, 115, 117),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 111, 111, 68, 105, 115, 116, 114),
    ::capnp::word(97, 99, 116, 101, 100, 0, 0, 0),
    ::capnp::word(112, 111, 115, 101, 110, 101, 116, 73),
    ::capnp::word(110, 118, 97, 108, 105, 100, 0, 0),
    ::capnp::word(115, 111, 117, 110, 100, 115, 85, 110),
    ::capnp::word(97, 118, 97, 105, 108, 97, 98, 108),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 114, 101, 76, 97, 110, 101, 67),
    ::capnp::word(104, 97, 110, 103, 101, 76, 101, 102),
    ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 114, 101, 76, 97, 110, 101, 67),
    ::capnp::word(104, 97, 110, 103, 101, 82, 105, 103),
    ::capnp::word(104, 116, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
    ::capnp::word(103, 101, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 110, 118, 97, 108, 105, 100, 71),
    ::capnp::word(105, 114, 97, 102, 102, 101, 84, 111),
    ::capnp::word(121, 111, 116, 97, 68, 69, 80, 82),
    ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
    ::capnp::word(105, 110, 116, 101, 114, 110, 101, 116),
    ::capnp::word(67, 111, 110, 110, 101, 99, 116, 105),
    ::capnp::word(118, 105, 116, 121, 78, 101, 101, 100),
    ::capnp::word(101, 100, 68, 69, 80, 82, 69, 67),
    ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
    ::capnp::word(99, 111, 109, 109, 117, 110, 105, 116),
    ::capnp::word(121, 70, 101, 97, 116, 117, 114, 101),
    ::capnp::word(68, 105, 115, 97, 108, 108, 111, 119),
    ::capnp::word(101, 100, 68, 69, 80, 82, 69, 67),
    ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
    ::capnp::word(108, 111, 119, 77, 101, 109, 111, 114),
    ::capnp::word(121, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 116, 111, 99, 107, 65, 101, 98),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 100, 119, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 85, 110, 114, 101, 99),
    ::capnp::word(111, 103, 110, 105, 122, 101, 100, 0),
    ::capnp::word(114, 97, 100, 97, 114, 67, 111, 109),
    ::capnp::word(109, 73, 115, 115, 117, 101, 68, 69),
    ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(100, 114, 105, 118, 101, 114, 77, 111),
    ::capnp::word(110, 105, 116, 111, 114, 76, 111, 119),
    ::capnp::word(65, 99, 99, 68, 69, 80, 82, 69),
    ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
    ::capnp::word(105, 110, 118, 97, 108, 105, 100, 76),
    ::capnp::word(107, 97, 115, 83, 101, 116, 116, 105),
    ::capnp::word(110, 103, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 112, 101, 101, 100, 84, 111, 111),
    ::capnp::word(72, 105, 103, 104, 0, 0, 0, 0),
    ::capnp::word(108, 97, 110, 101, 67, 104, 97, 110),
    ::capnp::word(103, 101, 66, 108, 111, 99, 107, 101),
    ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 101, 108, 97, 121, 77, 97, 108),
    ::capnp::word(102, 117, 110, 99, 116, 105, 111, 110),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 114, 101, 69, 110, 97, 98, 108),
    ::capnp::word(101, 83, 116, 97, 110, 100, 115, 116),
    ::capnp::word(105, 108, 108, 0, 0, 0, 0, 0),
    ::capnp::word(115, 116, 111, 99, 107, 70, 99, 119),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 116, 97, 114, 116, 117, 112, 0),
    ::capnp::word(115, 116, 97, 114, 116, 117, 112, 78),
    ::capnp::word(111, 67, 97, 114, 0, 0, 0, 0),
    ::capnp::word(115, 116, 97, 114, 116, 117, 112, 78),
    ::capnp::word(111, 67, 111, 110, 116, 114, 111, 108),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 116, 97, 114, 116, 117, 112, 77),
    ::capnp::word(97, 115, 116, 101, 114, 0, 0, 0),
    ::capnp::word(102, 99, 119, 0, 0, 0, 0, 0),
    ::capnp::word(115, 116, 101, 101, 114, 83, 97, 116),
    ::capnp::word(117, 114, 97, 116, 101, 100, 0, 0),
    ::capnp::word(119, 104, 105, 116, 101, 80, 97, 110),
    ::capnp::word(100, 97, 85, 110, 115, 117, 112, 112),
    ::capnp::word(111, 114, 116, 101, 100, 68, 69, 80),
    ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
    ::capnp::word(115, 116, 97, 114, 116, 117, 112, 79),
    ::capnp::word(110, 101, 112, 108, 117, 115, 68, 69),
    ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 111, 109, 109, 73, 115, 115, 117),
    ::capnp::word(101, 87, 97, 114, 110, 105, 110, 103),
    ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
    ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 101, 108, 111, 119, 69, 110, 103),
    ::capnp::word(97, 103, 101, 83, 112, 101, 101, 100),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(110, 111, 71, 112, 115, 0, 0, 0),
    ::capnp::word(102, 111, 99, 117, 115, 82, 101, 99),
    ::capnp::word(111, 118, 101, 114, 65, 99, 116, 105),
    ::capnp::word(118, 101, 68, 69, 80, 82, 69, 67),
    ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
    ::capnp::word(119, 114, 111, 110, 103, 67, 114, 117),
    ::capnp::word(105, 115, 101, 77, 111, 100, 101, 0),
    ::capnp::word(110, 101, 111, 115, 85, 112, 100, 97),
    ::capnp::word(116, 101, 82, 101, 113, 117, 105, 114),
    ::capnp::word(101, 100, 68, 69, 80, 82, 69, 67),
    ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
    ::capnp::word(109, 111, 100, 101, 108, 100, 76, 97),
    ::capnp::word(103, 103, 105, 110, 103, 0, 0, 0),
    ::capnp::word(100, 101, 118, 105, 99, 101, 70, 97),
    ::capnp::word(108, 108, 105, 110, 103, 0, 0, 0),
    ::capnp::word(102, 97, 110, 77, 97, 108, 102, 117),
    ::capnp::word(110, 99, 116, 105, 111, 110, 0, 0),
    ::capnp::word(99, 97, 109, 101, 114, 97, 77, 97),
    ::capnp::word(108, 102, 117, 110, 99, 116, 105, 111),
    ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 111, 100, 101, 108, 76, 97, 103),
    ::capnp::word(87, 97, 114, 110, 105, 110, 103, 68),
    ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
    ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 112, 115, 77, 97, 108, 102, 117),
    ::capnp::word(110, 99, 116, 105, 111, 110, 0, 0),
    ::capnp::word(112, 114, 111, 99, 101, 115, 115, 78),
    ::capnp::word(111, 116, 82, 117, 110, 110, 105, 110),
    ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(100, 97, 115, 104, 99, 97, 109, 77),
    ::capnp::word(111, 100, 101, 0, 0, 0, 0, 0),
    ::capnp::word(115, 116, 97, 114, 116, 117, 112, 70),
    ::capnp::word(117, 122, 122, 121, 70, 105, 110, 103),
    ::capnp::word(101, 114, 112, 114, 105, 110, 116, 68),
    ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
    ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 111, 110, 116, 114, 111, 108, 115),
    ::capnp::word(73, 110, 105, 116, 105, 97, 108, 105),
    ::capnp::word(122, 105, 110, 103, 0, 0, 0, 0),
    ::capnp::word(117, 115, 98, 69, 114, 114, 111, 114),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 111, 97, 100, 67, 97, 109, 101),
    ::capnp::word(114, 97, 69, 114, 114, 111, 114, 0),
    ::capnp::word(100, 114, 105, 118, 101, 114, 67, 97),
    ::capnp::word(109, 101, 114, 97, 69, 114, 114, 111),
    ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(119, 105, 100, 101, 82, 111, 97, 100),
    ::capnp::word(67, 97, 109, 101, 114, 97, 69, 114),
    ::capnp::word(114, 111, 114, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 99, 97, 116, 105, 111, 110),
    ::capnp::word(100, 84, 101, 109, 112, 111, 114, 97),
    ::capnp::word(114, 121, 69, 114, 114, 111, 114, 0),
    ::capnp::word(115, 116, 97, 114, 116, 117, 112, 78),
    ::capnp::word(111, 70, 119, 0, 0, 0, 0, 0),
    ::capnp::word(104, 105, 103, 104, 67, 112, 117, 85),
    ::capnp::word(115, 97, 103, 101, 0, 0, 0, 0),
    ::capnp::word(99, 114, 117, 105, 115, 101, 77, 105),
    ::capnp::word(115, 109, 97, 116, 99, 104, 0, 0),
    ::capnp::word(108, 107, 97, 115, 68, 105, 115, 97),
    ::capnp::word(98, 108, 101, 100, 0, 0, 0, 0),
    ::capnp::word(103, 97, 115, 80, 114, 101, 115, 115),
    ::capnp::word(101, 100, 79, 118, 101, 114, 114, 105),
    ::capnp::word(100, 101, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 111, 109, 109, 73, 115, 115, 117),
    ::capnp::word(101, 65, 118, 103, 70, 114, 101, 113),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 109, 101, 114, 97, 70, 114),
    ::capnp::word(97, 109, 101, 82, 97, 116, 101, 0),
    ::capnp::word(99, 97, 110, 66, 117, 115, 77, 105),
    ::capnp::word(115, 115, 105, 110, 103, 0, 0, 0),
    ::capnp::word(99, 111, 110, 116, 114, 111, 108, 115),
    ::capnp::word(100, 76, 97, 103, 103, 105, 110, 103),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 101, 115, 117, 109, 101, 66, 108),
    ::capnp::word(111, 99, 107, 101, 100, 0, 0, 0),
    ::capnp::word(115, 116, 101, 101, 114, 79, 118, 101),
    ::capnp::word(114, 114, 105, 100, 101, 0, 0, 0),
    ::capnp::word(115, 116, 101, 101, 114, 84, 105, 109),
    ::capnp::word(101, 76, 105, 109, 105, 116, 0, 0),
    ::capnp::word(118, 101, 104, 105, 99, 108, 101, 83),
    ::capnp::word(101, 110, 115, 111, 114, 115, 73, 110),
    ::capnp::word(118, 97, 108, 105, 100, 0, 0, 0),
    ::capnp::word(99, 97, 108, 105, 98, 114, 97, 116),
    ::capnp::word(105, 111, 110, 82, 101, 99, 97, 108),
    ::capnp::word(105, 98, 114, 97, 116, 105, 110, 103),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(108, 111, 99, 97, 116, 105, 111, 110),
    ::capnp::word(100, 80, 101, 114, 109, 97, 110, 101),
    ::capnp::word(110, 116, 69, 114, 114, 111, 114, 0),
    ::capnp::word(112, 97, 114, 97, 109, 115, 100, 80),
    ::capnp::word(101, 114, 109, 97, 110, 101, 110, 116),
    ::capnp::word(69, 114, 114, 111, 114, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}

pub mod car_state {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_errors_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::enum_list::Reader<'a,crate::cereal::car_capnp::car_event::EventName>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_errors_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_v_ego(self) -> f32 {
      self.reader.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn get_wheel_speeds(self) -> ::capnp::Result<crate::cereal::car_capnp::car_state::wheel_speeds::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_wheel_speeds(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_gas(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_gas_pressed(self) -> bool {
      self.reader.get_bool_field(64)
    }
    #[inline]
    pub fn get_brake(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_brake_pressed(self) -> bool {
      self.reader.get_bool_field(65)
    }
    #[inline]
    pub fn get_steering_angle_deg(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_steering_torque(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_steering_pressed(self) -> bool {
      self.reader.get_bool_field(66)
    }
    #[inline]
    pub fn get_cruise_state(self) -> ::capnp::Result<crate::cereal::car_capnp::car_state::cruise_state::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_cruise_state(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_button_events(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::car_capnp::car_state::button_event::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_button_events(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_can_mono_times_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,u64>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_can_mono_times_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_events(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::car_capnp::car_event::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_events(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_gear_shifter(self) -> ::core::result::Result<crate::cereal::car_capnp::car_state::GearShifter,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(5))
    }
    #[inline]
    pub fn get_steering_rate_deg(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_a_ego(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_v_ego_raw(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn get_standstill(self) -> bool {
      self.reader.get_bool_field(67)
    }
    #[inline]
    pub fn get_brake_lights_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(68)
    }
    #[inline]
    pub fn get_left_blinker(self) -> bool {
      self.reader.get_bool_field(69)
    }
    #[inline]
    pub fn get_right_blinker(self) -> bool {
      self.reader.get_bool_field(70)
    }
    #[inline]
    pub fn get_yaw_rate(self) -> f32 {
      self.reader.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn get_generic_toggle(self) -> bool {
      self.reader.get_bool_field(71)
    }
    #[inline]
    pub fn get_door_open(self) -> bool {
      self.reader.get_bool_field(72)
    }
    #[inline]
    pub fn get_seatbelt_unlatched(self) -> bool {
      self.reader.get_bool_field(73)
    }
    #[inline]
    pub fn get_can_valid(self) -> bool {
      self.reader.get_bool_field(74)
    }
    #[inline]
    pub fn get_steering_torque_eps(self) -> f32 {
      self.reader.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn get_clutch_pressed(self) -> bool {
      self.reader.get_bool_field(75)
    }
    #[inline]
    pub fn get_steering_rate_limited_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(76)
    }
    #[inline]
    pub fn get_stock_aeb(self) -> bool {
      self.reader.get_bool_field(77)
    }
    #[inline]
    pub fn get_stock_fcw(self) -> bool {
      self.reader.get_bool_field(78)
    }
    #[inline]
    pub fn get_esp_disabled(self) -> bool {
      self.reader.get_bool_field(79)
    }
    #[inline]
    pub fn get_left_blindspot(self) -> bool {
      self.reader.get_bool_field(352)
    }
    #[inline]
    pub fn get_right_blindspot(self) -> bool {
      self.reader.get_bool_field(353)
    }
    #[inline]
    pub fn get_steer_fault_temporary(self) -> bool {
      self.reader.get_bool_field(354)
    }
    #[inline]
    pub fn get_steer_fault_permanent(self) -> bool {
      self.reader.get_bool_field(355)
    }
    #[inline]
    pub fn get_steering_angle_offset_deg(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_brake_hold_active(self) -> bool {
      self.reader.get_bool_field(356)
    }
    #[inline]
    pub fn get_parking_brake(self) -> bool {
      self.reader.get_bool_field(357)
    }
    #[inline]
    pub fn get_can_timeout(self) -> bool {
      self.reader.get_bool_field(358)
    }
    #[inline]
    pub fn get_fuel_gauge(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_acc_faulted(self) -> bool {
      self.reader.get_bool_field(359)
    }
    #[inline]
    pub fn get_charging(self) -> bool {
      self.reader.get_bool_field(360)
    }
    #[inline]
    pub fn get_v_ego_cluster(self) -> f32 {
      self.reader.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn get_regen_braking(self) -> bool {
      self.reader.get_bool_field(361)
    }
    #[inline]
    pub fn get_engine_rpm(self) -> f32 {
      self.reader.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn get_car_faulted_non_critical(self) -> bool {
      self.reader.get_bool_field(362)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 8, pointers: 6 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_errors_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::enum_list::Builder<'a,crate::cereal::car_capnp::car_event::EventName>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_errors_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::enum_list::Owned<crate::cereal::car_capnp::car_event::EventName>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_errors_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::enum_list::Builder<'a,crate::cereal::car_capnp::car_event::EventName> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_errors_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_v_ego(self) -> f32 {
      self.builder.get_data_field::<f32>(0)
    }
    #[inline]
    pub fn set_v_ego(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(0, value);
    }
    #[inline]
    pub fn get_wheel_speeds(self) -> ::capnp::Result<crate::cereal::car_capnp::car_state::wheel_speeds::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_wheel_speeds(&mut self, value: crate::cereal::car_capnp::car_state::wheel_speeds::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_wheel_speeds(self, ) -> crate::cereal::car_capnp::car_state::wheel_speeds::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_wheel_speeds(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_gas(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_gas(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_gas_pressed(self) -> bool {
      self.builder.get_bool_field(64)
    }
    #[inline]
    pub fn set_gas_pressed(&mut self, value: bool)  {
      self.builder.set_bool_field(64, value);
    }
    #[inline]
    pub fn get_brake(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_brake(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_brake_pressed(self) -> bool {
      self.builder.get_bool_field(65)
    }
    #[inline]
    pub fn set_brake_pressed(&mut self, value: bool)  {
      self.builder.set_bool_field(65, value);
    }
    #[inline]
    pub fn get_steering_angle_deg(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_steering_angle_deg(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_steering_torque(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_steering_torque(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_steering_pressed(self) -> bool {
      self.builder.get_bool_field(66)
    }
    #[inline]
    pub fn set_steering_pressed(&mut self, value: bool)  {
      self.builder.set_bool_field(66, value);
    }
    #[inline]
    pub fn get_cruise_state(self) -> ::capnp::Result<crate::cereal::car_capnp::car_state::cruise_state::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_cruise_state(&mut self, value: crate::cereal::car_capnp::car_state::cruise_state::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_cruise_state(self, ) -> crate::cereal::car_capnp::car_state::cruise_state::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    #[inline]
    pub fn has_cruise_state(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_button_events(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_state::button_event::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_button_events(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::car_capnp::car_state::button_event::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_button_events(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_state::button_event::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_button_events(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_can_mono_times_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,u64>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_can_mono_times_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<u64>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_can_mono_times_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,u64> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_can_mono_times_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_events(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_event::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_events(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::car_capnp::car_event::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_events(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_event::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_events(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_gear_shifter(self) -> ::core::result::Result<crate::cereal::car_capnp::car_state::GearShifter,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(5))
    }
    #[inline]
    pub fn set_gear_shifter(&mut self, value: crate::cereal::car_capnp::car_state::GearShifter)  {
      self.builder.set_data_field::<u16>(5, value as u16);
    }
    #[inline]
    pub fn get_steering_rate_deg(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_steering_rate_deg(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_a_ego(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_a_ego(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_v_ego_raw(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_v_ego_raw(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
    #[inline]
    pub fn get_standstill(self) -> bool {
      self.builder.get_bool_field(67)
    }
    #[inline]
    pub fn set_standstill(&mut self, value: bool)  {
      self.builder.set_bool_field(67, value);
    }
    #[inline]
    pub fn get_brake_lights_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(68)
    }
    #[inline]
    pub fn set_brake_lights_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(68, value);
    }
    #[inline]
    pub fn get_left_blinker(self) -> bool {
      self.builder.get_bool_field(69)
    }
    #[inline]
    pub fn set_left_blinker(&mut self, value: bool)  {
      self.builder.set_bool_field(69, value);
    }
    #[inline]
    pub fn get_right_blinker(self) -> bool {
      self.builder.get_bool_field(70)
    }
    #[inline]
    pub fn set_right_blinker(&mut self, value: bool)  {
      self.builder.set_bool_field(70, value);
    }
    #[inline]
    pub fn get_yaw_rate(self) -> f32 {
      self.builder.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn set_yaw_rate(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(9, value);
    }
    #[inline]
    pub fn get_generic_toggle(self) -> bool {
      self.builder.get_bool_field(71)
    }
    #[inline]
    pub fn set_generic_toggle(&mut self, value: bool)  {
      self.builder.set_bool_field(71, value);
    }
    #[inline]
    pub fn get_door_open(self) -> bool {
      self.builder.get_bool_field(72)
    }
    #[inline]
    pub fn set_door_open(&mut self, value: bool)  {
      self.builder.set_bool_field(72, value);
    }
    #[inline]
    pub fn get_seatbelt_unlatched(self) -> bool {
      self.builder.get_bool_field(73)
    }
    #[inline]
    pub fn set_seatbelt_unlatched(&mut self, value: bool)  {
      self.builder.set_bool_field(73, value);
    }
    #[inline]
    pub fn get_can_valid(self) -> bool {
      self.builder.get_bool_field(74)
    }
    #[inline]
    pub fn set_can_valid(&mut self, value: bool)  {
      self.builder.set_bool_field(74, value);
    }
    #[inline]
    pub fn get_steering_torque_eps(self) -> f32 {
      self.builder.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn set_steering_torque_eps(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(10, value);
    }
    #[inline]
    pub fn get_clutch_pressed(self) -> bool {
      self.builder.get_bool_field(75)
    }
    #[inline]
    pub fn set_clutch_pressed(&mut self, value: bool)  {
      self.builder.set_bool_field(75, value);
    }
    #[inline]
    pub fn get_steering_rate_limited_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(76)
    }
    #[inline]
    pub fn set_steering_rate_limited_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(76, value);
    }
    #[inline]
    pub fn get_stock_aeb(self) -> bool {
      self.builder.get_bool_field(77)
    }
    #[inline]
    pub fn set_stock_aeb(&mut self, value: bool)  {
      self.builder.set_bool_field(77, value);
    }
    #[inline]
    pub fn get_stock_fcw(self) -> bool {
      self.builder.get_bool_field(78)
    }
    #[inline]
    pub fn set_stock_fcw(&mut self, value: bool)  {
      self.builder.set_bool_field(78, value);
    }
    #[inline]
    pub fn get_esp_disabled(self) -> bool {
      self.builder.get_bool_field(79)
    }
    #[inline]
    pub fn set_esp_disabled(&mut self, value: bool)  {
      self.builder.set_bool_field(79, value);
    }
    #[inline]
    pub fn get_left_blindspot(self) -> bool {
      self.builder.get_bool_field(352)
    }
    #[inline]
    pub fn set_left_blindspot(&mut self, value: bool)  {
      self.builder.set_bool_field(352, value);
    }
    #[inline]
    pub fn get_right_blindspot(self) -> bool {
      self.builder.get_bool_field(353)
    }
    #[inline]
    pub fn set_right_blindspot(&mut self, value: bool)  {
      self.builder.set_bool_field(353, value);
    }
    #[inline]
    pub fn get_steer_fault_temporary(self) -> bool {
      self.builder.get_bool_field(354)
    }
    #[inline]
    pub fn set_steer_fault_temporary(&mut self, value: bool)  {
      self.builder.set_bool_field(354, value);
    }
    #[inline]
    pub fn get_steer_fault_permanent(self) -> bool {
      self.builder.get_bool_field(355)
    }
    #[inline]
    pub fn set_steer_fault_permanent(&mut self, value: bool)  {
      self.builder.set_bool_field(355, value);
    }
    #[inline]
    pub fn get_steering_angle_offset_deg(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_steering_angle_offset_deg(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_brake_hold_active(self) -> bool {
      self.builder.get_bool_field(356)
    }
    #[inline]
    pub fn set_brake_hold_active(&mut self, value: bool)  {
      self.builder.set_bool_field(356, value);
    }
    #[inline]
    pub fn get_parking_brake(self) -> bool {
      self.builder.get_bool_field(357)
    }
    #[inline]
    pub fn set_parking_brake(&mut self, value: bool)  {
      self.builder.set_bool_field(357, value);
    }
    #[inline]
    pub fn get_can_timeout(self) -> bool {
      self.builder.get_bool_field(358)
    }
    #[inline]
    pub fn set_can_timeout(&mut self, value: bool)  {
      self.builder.set_bool_field(358, value);
    }
    #[inline]
    pub fn get_fuel_gauge(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_fuel_gauge(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_acc_faulted(self) -> bool {
      self.builder.get_bool_field(359)
    }
    #[inline]
    pub fn set_acc_faulted(&mut self, value: bool)  {
      self.builder.set_bool_field(359, value);
    }
    #[inline]
    pub fn get_charging(self) -> bool {
      self.builder.get_bool_field(360)
    }
    #[inline]
    pub fn set_charging(&mut self, value: bool)  {
      self.builder.set_bool_field(360, value);
    }
    #[inline]
    pub fn get_v_ego_cluster(self) -> f32 {
      self.builder.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn set_v_ego_cluster(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(14, value);
    }
    #[inline]
    pub fn get_regen_braking(self) -> bool {
      self.builder.get_bool_field(361)
    }
    #[inline]
    pub fn set_regen_braking(&mut self, value: bool)  {
      self.builder.set_bool_field(361, value);
    }
    #[inline]
    pub fn get_engine_rpm(self) -> f32 {
      self.builder.get_data_field::<f32>(15)
    }
    #[inline]
    pub fn set_engine_rpm(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(15, value);
    }
    #[inline]
    pub fn get_car_faulted_non_critical(self) -> bool {
      self.builder.get_bool_field(362)
    }
    #[inline]
    pub fn set_car_faulted_non_critical(&mut self, value: bool)  {
      self.builder.set_bool_field(362, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_wheel_speeds(&self) -> crate::cereal::car_capnp::car_state::wheel_speeds::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_cruise_state(&self) -> crate::cereal::car_capnp::car_state::cruise_state::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 822] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(60, 144, 82, 224, 9, 250, 164, 157),
      ::capnp::word(10, 0, 0, 0, 1, 0, 8, 0),
      ::capnp::word(141, 139, 175, 8, 231, 241, 42, 142),
      ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 71, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 0, 0, 0, 135, 10, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 114, 83, 116, 97),
      ::capnp::word(116, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(163, 53, 89, 21, 166, 55, 26, 153),
      ::capnp::word(25, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(175, 96, 110, 142, 71, 129, 78, 230),
      ::capnp::word(25, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(137, 106, 111, 19, 69, 202, 4, 224),
      ::capnp::word(25, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(246, 206, 74, 91, 131, 166, 92, 255),
      ::capnp::word(25, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(87, 104, 101, 101, 108, 83, 112, 101),
      ::capnp::word(101, 100, 115, 0, 0, 0, 0, 0),
      ::capnp::word(67, 114, 117, 105, 115, 101, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(71, 101, 97, 114, 83, 104, 105, 102),
      ::capnp::word(116, 101, 114, 0, 0, 0, 0, 0),
      ::capnp::word(66, 117, 116, 116, 111, 110, 69, 118),
      ::capnp::word(101, 110, 116, 0, 0, 0, 0, 0),
      ::capnp::word(192, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(44, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 5, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 5, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 5, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 5, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 64, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 5, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 5, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 65, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 5, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(116, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 5, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 5, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 5, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(31, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 5, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(33, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 5, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(148, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(47, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 5, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(0, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 5, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(32, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 5, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 5, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 5, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 5, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 5, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 67, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 5, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 5, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(45, 0, 0, 0, 68, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 5, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(34, 0, 0, 0, 69, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 6, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(35, 0, 0, 0, 70, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 6, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 6, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(36, 0, 0, 0, 71, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 6, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(37, 0, 0, 0, 72, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 6, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(38, 0, 0, 0, 73, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 6, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 6, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(68, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 6, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(39, 0, 0, 0, 75, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 6, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(46, 0, 0, 0, 76, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 6, 0, 0, 242, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(104, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 77, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 6, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(112, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(27, 0, 0, 0, 78, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 6, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 79, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 6, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(40, 0, 0, 0, 96, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 6, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(41, 0, 0, 0, 97, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(133, 6, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(132, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(144, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 98, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 35, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 6, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(156, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 99, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 36, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 6, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 37, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 6, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 100, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 38, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 6, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 101, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 39, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 6, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 102, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 40, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 6, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(42, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 41, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 6, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(29, 0, 0, 0, 103, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 6, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(43, 0, 0, 0, 104, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 43, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 6, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 44, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 6, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 105, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 45, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 6, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 46, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 6, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 6, 0, 0, 2, 0, 1, 0),
      ::capnp::word(30, 0, 0, 0, 106, 1, 0, 0),
      ::capnp::word(0, 0, 1, 0, 47, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 6, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 6, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(101, 114, 114, 111, 114, 115, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(222, 39, 247, 5, 213, 197, 168, 186),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 69, 103, 111, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 104, 101, 101, 108, 83, 112, 101),
      ::capnp::word(101, 100, 115, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(163, 53, 89, 21, 166, 55, 26, 153),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 97, 115, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 97, 115, 80, 114, 101, 115, 115),
      ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 114, 97, 107, 101, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 114, 97, 107, 101, 80, 114, 101),
      ::capnp::word(115, 115, 101, 100, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(65, 110, 103, 108, 101, 68, 101, 103),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(84, 111, 114, 113, 117, 101, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(80, 114, 101, 115, 115, 101, 100, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 114, 117, 105, 115, 101, 83, 116),
      ::capnp::word(97, 116, 101, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(175, 96, 110, 142, 71, 129, 78, 230),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 117, 116, 116, 111, 110, 69, 118),
      ::capnp::word(101, 110, 116, 115, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(246, 206, 74, 91, 131, 166, 92, 255),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 77, 111, 110, 111, 84),
      ::capnp::word(105, 109, 101, 115, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 118, 101, 110, 116, 115, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(211, 58, 175, 76, 243, 87, 22, 155),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 101, 97, 114, 83, 104, 105, 102),
      ::capnp::word(116, 101, 114, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 106, 111, 19, 69, 202, 4, 224),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(82, 97, 116, 101, 68, 101, 103, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 69, 103, 111, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 69, 103, 111, 82, 97, 119, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 110, 100, 115, 116, 105),
      ::capnp::word(108, 108, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 114, 97, 107, 101, 76, 105, 103),
      ::capnp::word(104, 116, 115, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 102, 116, 66, 108, 105, 110),
      ::capnp::word(107, 101, 114, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 105, 103, 104, 116, 66, 108, 105),
      ::capnp::word(110, 107, 101, 114, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 97, 119, 82, 97, 116, 101, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 101, 110, 101, 114, 105, 99, 84),
      ::capnp::word(111, 103, 103, 108, 101, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 111, 111, 114, 79, 112, 101, 110),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 97, 116, 98, 101, 108, 116),
      ::capnp::word(85, 110, 108, 97, 116, 99, 104, 101),
      ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 86, 97, 108, 105, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(84, 111, 114, 113, 117, 101, 69, 112),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 108, 117, 116, 99, 104, 80, 114),
      ::capnp::word(101, 115, 115, 101, 100, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(82, 97, 116, 101, 76, 105, 109, 105),
      ::capnp::word(116, 101, 100, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 111, 99, 107, 65, 101, 98),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 111, 99, 107, 70, 99, 119),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 115, 112, 68, 105, 115, 97, 98),
      ::capnp::word(108, 101, 100, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 102, 116, 66, 108, 105, 110),
      ::capnp::word(100, 115, 112, 111, 116, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 105, 103, 104, 116, 66, 108, 105),
      ::capnp::word(110, 100, 115, 112, 111, 116, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 70, 97, 117),
      ::capnp::word(108, 116, 84, 101, 109, 112, 111, 114),
      ::capnp::word(97, 114, 121, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 70, 97, 117),
      ::capnp::word(108, 116, 80, 101, 114, 109, 97, 110),
      ::capnp::word(101, 110, 116, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(65, 110, 103, 108, 101, 79, 102, 102),
      ::capnp::word(115, 101, 116, 68, 101, 103, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 114, 97, 107, 101, 72, 111, 108),
      ::capnp::word(100, 65, 99, 116, 105, 118, 101, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 114, 107, 105, 110, 103, 66),
      ::capnp::word(114, 97, 107, 101, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 84, 105, 109, 101, 111),
      ::capnp::word(117, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 117, 101, 108, 71, 97, 117, 103),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 70, 97, 117, 108, 116),
      ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 104, 97, 114, 103, 105, 110, 103),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 69, 103, 111, 67, 108, 117, 115),
      ::capnp::word(116, 101, 114, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 101, 103, 101, 110, 66, 114, 97),
      ::capnp::word(107, 105, 110, 103, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 103, 105, 110, 101, 82, 112),
      ::capnp::word(109, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 70, 97, 117, 108, 116),
      ::capnp::word(101, 100, 78, 111, 110, 67, 114, 105),
      ::capnp::word(116, 105, 99, 97, 108, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::enum_list::Owned<crate::cereal::car_capnp::car_event::EventName> as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <crate::cereal::car_capnp::car_state::wheel_speeds::Owned as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <bool as ::capnp::introspect::Introspect>::introspect(),
        5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <bool as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <bool as ::capnp::introspect::Introspect>::introspect(),
        10 => <crate::cereal::car_capnp::car_state::cruise_state::Owned as ::capnp::introspect::Introspect>::introspect(),
        11 => <::capnp::struct_list::Owned<crate::cereal::car_capnp::car_state::button_event::Owned> as ::capnp::introspect::Introspect>::introspect(),
        12 => <::capnp::primitive_list::Owned<u64> as ::capnp::introspect::Introspect>::introspect(),
        13 => <::capnp::struct_list::Owned<crate::cereal::car_capnp::car_event::Owned> as ::capnp::introspect::Introspect>::introspect(),
        14 => <crate::cereal::car_capnp::car_state::GearShifter as ::capnp::introspect::Introspect>::introspect(),
        15 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        16 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        17 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        18 => <bool as ::capnp::introspect::Introspect>::introspect(),
        19 => <bool as ::capnp::introspect::Introspect>::introspect(),
        20 => <bool as ::capnp::introspect::Introspect>::introspect(),
        21 => <bool as ::capnp::introspect::Introspect>::introspect(),
        22 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        23 => <bool as ::capnp::introspect::Introspect>::introspect(),
        24 => <bool as ::capnp::introspect::Introspect>::introspect(),
        25 => <bool as ::capnp::introspect::Introspect>::introspect(),
        26 => <bool as ::capnp::introspect::Introspect>::introspect(),
        27 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        28 => <bool as ::capnp::introspect::Introspect>::introspect(),
        29 => <bool as ::capnp::introspect::Introspect>::introspect(),
        30 => <bool as ::capnp::introspect::Introspect>::introspect(),
        31 => <bool as ::capnp::introspect::Introspect>::introspect(),
        32 => <bool as ::capnp::introspect::Introspect>::introspect(),
        33 => <bool as ::capnp::introspect::Introspect>::introspect(),
        34 => <bool as ::capnp::introspect::Introspect>::introspect(),
        35 => <bool as ::capnp::introspect::Introspect>::introspect(),
        36 => <bool as ::capnp::introspect::Introspect>::introspect(),
        37 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        38 => <bool as ::capnp::introspect::Introspect>::introspect(),
        39 => <bool as ::capnp::introspect::Introspect>::introspect(),
        40 => <bool as ::capnp::introspect::Introspect>::introspect(),
        41 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        42 => <bool as ::capnp::introspect::Introspect>::introspect(),
        43 => <bool as ::capnp::introspect::Introspect>::introspect(),
        44 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        45 => <bool as ::capnp::introspect::Introspect>::introspect(),
        46 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        47 => <bool as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[16,42,5,38,19,6,11,12,40,26,47,43,28,10,24,46,0,32,13,41,3,4,14,23,33,20,39,45,34,21,25,18,36,35,7,37,9,15,29,8,27,30,31,1,44,17,2,22];
    pub const TYPE_ID: u64 = 0x9da4_fa09_e052_903c;
  }

  pub mod wheel_speeds {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_fl(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_fr(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_rl(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_rr(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_fl(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_fl(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_fr(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_fr(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_rl(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_rl(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_rr(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_rr(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 78] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(163, 53, 89, 21, 166, 55, 26, 153),
        ::capnp::word(19, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(60, 144, 82, 224, 9, 250, 164, 157),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 231, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 83, 116, 97),
        ::capnp::word(116, 101, 46, 87, 104, 101, 101, 108),
        ::capnp::word(83, 112, 101, 101, 100, 115, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(112, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(102, 108, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 108, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 114, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1,2,3];
      pub const TYPE_ID: u64 = 0x991a_37a6_1559_35a3;
    }
  }

  pub mod cruise_state {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_enabled(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_speed(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_available(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_speed_offset(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_standstill(self) -> bool {
        self.reader.get_bool_field(2)
      }
      #[inline]
      pub fn get_non_adaptive(self) -> bool {
        self.reader.get_bool_field(3)
      }
      #[inline]
      pub fn get_speed_cluster(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_enabled(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_enabled(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_speed(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_speed(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_available(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_available(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_speed_offset(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_speed_offset(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_standstill(self) -> bool {
        self.builder.get_bool_field(2)
      }
      #[inline]
      pub fn set_standstill(&mut self, value: bool)  {
        self.builder.set_bool_field(2, value);
      }
      #[inline]
      pub fn get_non_adaptive(self) -> bool {
        self.builder.get_bool_field(3)
      }
      #[inline]
      pub fn set_non_adaptive(&mut self, value: bool)  {
        self.builder.set_bool_field(3, value);
      }
      #[inline]
      pub fn get_speed_cluster(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_speed_cluster(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 128] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(175, 96, 110, 142, 71, 129, 78, 230),
        ::capnp::word(19, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(60, 144, 82, 224, 9, 250, 164, 157),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 143, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 83, 116, 97),
        ::capnp::word(116, 101, 46, 67, 114, 117, 105, 115),
        ::capnp::word(101, 83, 116, 97, 116, 101, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 0, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 0, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 0, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(101, 110, 97, 98, 108, 101, 100, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 112, 101, 101, 100, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 118, 97, 105, 108, 97, 98, 108),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 112, 101, 101, 100, 79, 102, 102),
        ::capnp::word(115, 101, 116, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 97, 110, 100, 115, 116, 105),
        ::capnp::word(108, 108, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(110, 111, 110, 65, 100, 97, 112, 116),
        ::capnp::word(105, 118, 101, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 112, 101, 101, 100, 67, 108, 117),
        ::capnp::word(115, 116, 101, 114, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <bool as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <bool as ::capnp::introspect::Introspect>::introspect(),
          5 => <bool as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[2,0,5,1,6,3,4];
      pub const TYPE_ID: u64 = 0xe64e_8147_8e6e_60af;
    }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum GearShifter {
    Unknown = 0,
    Park = 1,
    Drive = 2,
    Neutral = 3,
    Reverse = 4,
    Sport = 5,
    Low = 6,
    Brake = 7,
    Eco = 8,
    Manumatic = 9,
  }

  impl ::capnp::introspect::Introspect for GearShifter {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &gear_shifter::ENCODED_NODE, annotation_types: gear_shifter::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<GearShifter> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: GearShifter) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &gear_shifter::ENCODED_NODE, annotation_types: gear_shifter::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for GearShifter {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <GearShifter as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Unknown),
        1 => ::core::result::Result::Ok(Self::Park),
        2 => ::core::result::Result::Ok(Self::Drive),
        3 => ::core::result::Result::Ok(Self::Neutral),
        4 => ::core::result::Result::Ok(Self::Reverse),
        5 => ::core::result::Result::Ok(Self::Sport),
        6 => ::core::result::Result::Ok(Self::Low),
        7 => ::core::result::Result::Ok(Self::Brake),
        8 => ::core::result::Result::Ok(Self::Eco),
        9 => ::core::result::Result::Ok(Self::Manumatic),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<GearShifter> for u16 {
    #[inline]
    fn from(x: GearShifter) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for GearShifter {
    const TYPE_ID: u64 = 0xe004_ca45_136f_6a89u64;
  }
  mod gear_shifter {
  pub static ENCODED_NODE: [::capnp::Word; 59] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(137, 106, 111, 19, 69, 202, 4, 224),
    ::capnp::word(19, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(60, 144, 82, 224, 9, 250, 164, 157),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 247, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 97, 114, 83, 116, 97),
    ::capnp::word(116, 101, 46, 71, 101, 97, 114, 83),
    ::capnp::word(104, 105, 102, 116, 101, 114, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(40, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(113, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(105, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(89, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(81, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(57, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(49, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
    ::capnp::word(112, 97, 114, 107, 0, 0, 0, 0),
    ::capnp::word(100, 114, 105, 118, 101, 0, 0, 0),
    ::capnp::word(110, 101, 117, 116, 114, 97, 108, 0),
    ::capnp::word(114, 101, 118, 101, 114, 115, 101, 0),
    ::capnp::word(115, 112, 111, 114, 116, 0, 0, 0),
    ::capnp::word(108, 111, 119, 0, 0, 0, 0, 0),
    ::capnp::word(98, 114, 97, 107, 101, 0, 0, 0),
    ::capnp::word(101, 99, 111, 0, 0, 0, 0, 0),
    ::capnp::word(109, 97, 110, 117, 109, 97, 116, 105),
    ::capnp::word(99, 0, 0, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod button_event {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_pressed(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::cereal::car_capnp::car_state::button_event::Type,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_pressed(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_pressed(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::cereal::car_capnp::car_state::button_event::Type,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
      }
      #[inline]
      pub fn set_type(&mut self, value: crate::cereal::car_capnp::car_state::button_event::Type)  {
        self.builder.set_data_field::<u16>(1, value as u16);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 51] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(246, 206, 74, 91, 131, 166, 92, 255),
        ::capnp::word(19, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(60, 144, 82, 224, 9, 250, 164, 157),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 83, 116, 97),
        ::capnp::word(116, 101, 46, 66, 117, 116, 116, 111),
        ::capnp::word(110, 69, 118, 101, 110, 116, 0, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(124, 113, 20, 84, 32, 0, 97, 225),
        ::capnp::word(1, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(84, 121, 112, 101, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(112, 114, 101, 115, 115, 101, 100, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 113, 20, 84, 32, 0, 97, 225),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <crate::cereal::car_capnp::car_state::button_event::Type as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
      pub const TYPE_ID: u64 = 0xff5c_a683_5b4a_cef6;
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum Type {
      Unknown = 0,
      LeftBlinker = 1,
      RightBlinker = 2,
      AccelCruise = 3,
      DecelCruise = 4,
      Cancel = 5,
      AltButton1 = 6,
      AltButton2 = 7,
      AltButton3 = 8,
      SetCruise = 9,
      ResumeCruise = 10,
      GapAdjustCruise = 11,
    }

    impl ::capnp::introspect::Introspect for Type {
      fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &type_::ENCODED_NODE, annotation_types: type_::get_annotation_types }).into() }
    }
    impl <'a> ::core::convert::From<Type> for ::capnp::dynamic_value::Reader<'a> {
      fn from(e: Type) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &type_::ENCODED_NODE, annotation_types: type_::get_annotation_types }.into()).into() }
    }
    impl ::core::convert::TryFrom<u16> for Type {
      type Error = ::capnp::NotInSchema;
      fn try_from(value: u16) -> ::core::result::Result<Self, <Type as ::core::convert::TryFrom<u16>>::Error> {
        match value {
          0 => ::core::result::Result::Ok(Self::Unknown),
          1 => ::core::result::Result::Ok(Self::LeftBlinker),
          2 => ::core::result::Result::Ok(Self::RightBlinker),
          3 => ::core::result::Result::Ok(Self::AccelCruise),
          4 => ::core::result::Result::Ok(Self::DecelCruise),
          5 => ::core::result::Result::Ok(Self::Cancel),
          6 => ::core::result::Result::Ok(Self::AltButton1),
          7 => ::core::result::Result::Ok(Self::AltButton2),
          8 => ::core::result::Result::Ok(Self::AltButton3),
          9 => ::core::result::Result::Ok(Self::SetCruise),
          10 => ::core::result::Result::Ok(Self::ResumeCruise),
          11 => ::core::result::Result::Ok(Self::GapAdjustCruise),
          n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
        }
      }
    }
    impl From<Type> for u16 {
      #[inline]
      fn from(x: Type) -> u16 { x as u16 }
    }
    impl ::capnp::traits::HasTypeId for Type {
      const TYPE_ID: u64 = 0xe161_0020_5414_717cu64;
    }
    mod type_ {
    pub static ENCODED_NODE: [::capnp::Word; 77] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(124, 113, 20, 84, 32, 0, 97, 225),
      ::capnp::word(31, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(246, 206, 74, 91, 131, 166, 92, 255),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 34, 1, 0, 0),
      ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 39, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 114, 83, 116, 97),
      ::capnp::word(116, 101, 46, 66, 117, 116, 116, 111),
      ::capnp::word(110, 69, 118, 101, 110, 116, 46, 84),
      ::capnp::word(121, 112, 101, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(48, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(113, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
      ::capnp::word(108, 101, 102, 116, 66, 108, 105, 110),
      ::capnp::word(107, 101, 114, 0, 0, 0, 0, 0),
      ::capnp::word(114, 105, 103, 104, 116, 66, 108, 105),
      ::capnp::word(110, 107, 101, 114, 0, 0, 0, 0),
      ::capnp::word(97, 99, 99, 101, 108, 67, 114, 117),
      ::capnp::word(105, 115, 101, 0, 0, 0, 0, 0),
      ::capnp::word(100, 101, 99, 101, 108, 67, 114, 117),
      ::capnp::word(105, 115, 101, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 99, 101, 108, 0, 0),
      ::capnp::word(97, 108, 116, 66, 117, 116, 116, 111),
      ::capnp::word(110, 49, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 116, 66, 117, 116, 116, 111),
      ::capnp::word(110, 50, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 116, 66, 117, 116, 116, 111),
      ::capnp::word(110, 51, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 116, 67, 114, 117, 105, 115),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 101, 115, 117, 109, 101, 67, 114),
      ::capnp::word(117, 105, 115, 101, 0, 0, 0, 0),
      ::capnp::word(103, 97, 112, 65, 100, 106, 117, 115),
      ::capnp::word(116, 67, 114, 117, 105, 115, 101, 0),
    ];
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    }
  }
}

pub mod radar_data {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_errors(self) -> ::capnp::Result<::capnp::enum_list::Reader<'a,crate::cereal::car_capnp::radar_data::Error>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_errors(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_points(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::car_capnp::radar_data::radar_point::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_points(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_can_mono_times_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,u64>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_can_mono_times_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 3 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_errors(self) -> ::capnp::Result<::capnp::enum_list::Builder<'a,crate::cereal::car_capnp::radar_data::Error>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_errors(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::enum_list::Owned<crate::cereal::car_capnp::radar_data::Error>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_errors(self, size: u32) -> ::capnp::enum_list::Builder<'a,crate::cereal::car_capnp::radar_data::Error> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_errors(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_points(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::radar_data::radar_point::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_points(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::car_capnp::radar_data::radar_point::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_points(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::radar_data::radar_point::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    #[inline]
    pub fn has_points(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_can_mono_times_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,u64>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_can_mono_times_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<u64>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_can_mono_times_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,u64> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_can_mono_times_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 83] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(203, 170, 240, 28, 88, 214, 138, 136),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(141, 139, 175, 8, 231, 241, 42, 142),
      ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 39, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 0, 0, 0, 175, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 82, 97, 100, 97, 114, 68),
      ::capnp::word(97, 116, 97, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(173, 118, 186, 235, 121, 102, 168, 232),
      ::capnp::word(9, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(54, 223, 31, 172, 235, 51, 243, 143),
      ::capnp::word(5, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(69, 114, 114, 111, 114, 0, 0, 0),
      ::capnp::word(82, 97, 100, 97, 114, 80, 111, 105),
      ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(112, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 0, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(101, 114, 114, 111, 114, 115, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 118, 186, 235, 121, 102, 168, 232),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 111, 105, 110, 116, 115, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(54, 223, 31, 172, 235, 51, 243, 143),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 110, 77, 111, 110, 111, 84),
      ::capnp::word(105, 109, 101, 115, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::enum_list::Owned<crate::cereal::car_capnp::radar_data::Error> as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::struct_list::Owned<crate::cereal::car_capnp::radar_data::radar_point::Owned> as ::capnp::introspect::Introspect>::introspect(),
        2 => <::capnp::primitive_list::Owned<u64> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[2,0,1];
    pub const TYPE_ID: u64 = 0x888a_d658_1cf0_aacb;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum Error {
    CanError = 0,
    Fault = 1,
    WrongConfig = 2,
  }

  impl ::capnp::introspect::Introspect for Error {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &error::ENCODED_NODE, annotation_types: error::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<Error> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: Error) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &error::ENCODED_NODE, annotation_types: error::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for Error {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <Error as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::CanError),
        1 => ::core::result::Result::Ok(Self::Fault),
        2 => ::core::result::Result::Ok(Self::WrongConfig),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<Error> for u16 {
    #[inline]
    fn from(x: Error) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for Error {
    const TYPE_ID: u64 = 0xe8a8_6679_ebba_76adu64;
  }
  mod error {
  pub static ENCODED_NODE: [::capnp::Word; 32] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(173, 118, 186, 235, 121, 102, 168, 232),
    ::capnp::word(20, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(203, 170, 240, 28, 88, 214, 138, 136),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 210, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 79, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 82, 97, 100, 97, 114, 68),
    ::capnp::word(97, 116, 97, 46, 69, 114, 114, 111),
    ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 110, 69, 114, 114, 111, 114),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 97, 117, 108, 116, 0, 0, 0),
    ::capnp::word(119, 114, 111, 110, 103, 67, 111, 110),
    ::capnp::word(102, 105, 103, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod radar_point {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_track_id(self) -> u64 {
        self.reader.get_data_field::<u64>(0)
      }
      #[inline]
      pub fn get_d_rel(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_y_rel(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_v_rel(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_a_rel(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_yv_rel(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_measured(self) -> bool {
        self.reader.get_bool_field(224)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 4, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_track_id(self) -> u64 {
        self.builder.get_data_field::<u64>(0)
      }
      #[inline]
      pub fn set_track_id(&mut self, value: u64)  {
        self.builder.set_data_field::<u64>(0, value);
      }
      #[inline]
      pub fn get_d_rel(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_d_rel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_y_rel(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_y_rel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_v_rel(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_v_rel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_a_rel(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_a_rel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_yv_rel(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_yv_rel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_measured(self) -> bool {
        self.builder.get_bool_field(224)
      }
      #[inline]
      pub fn set_measured(&mut self, value: bool)  {
        self.builder.set_bool_field(224, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 124] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(54, 223, 31, 172, 235, 51, 243, 143),
        ::capnp::word(20, 0, 0, 0, 1, 0, 4, 0),
        ::capnp::word(203, 170, 240, 28, 88, 214, 138, 136),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 143, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 82, 97, 100, 97, 114, 68),
        ::capnp::word(97, 116, 97, 46, 82, 97, 100, 97),
        ::capnp::word(114, 80, 111, 105, 110, 116, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(184, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(196, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(193, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(200, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(197, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(192, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(201, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 224, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(116, 114, 97, 99, 107, 73, 100, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 82, 101, 108, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 82, 101, 108, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 82, 101, 108, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 82, 101, 108, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 118, 82, 101, 108, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 101, 97, 115, 117, 114, 101, 100),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <bool as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[4,1,6,0,3,2,5];
      pub const TYPE_ID: u64 = 0x8ff3_33eb_ac1f_df36;
    }
  }
}

pub mod car_control {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_enabled(self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_gas_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_brake_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_steering_torque_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn get_cruise_control(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::cruise_control::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_cruise_control(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_hud_control(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::h_u_d_control::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_hud_control(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_actuators(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::actuators::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_actuators(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_active_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(1)
    }
    #[inline]
    pub fn get_roll_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_pitch_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_actuators_output_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::actuators::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_actuators_output_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_lat_active(self) -> bool {
      self.reader.get_bool_field(2)
    }
    #[inline]
    pub fn get_long_active(self) -> bool {
      self.reader.get_bool_field(3)
    }
    #[inline]
    pub fn get_orientation_n_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_orientation_n_e_d(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_angular_velocity(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_angular_velocity(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_left_blinker(self) -> bool {
      self.reader.get_bool_field(4)
    }
    #[inline]
    pub fn get_right_blinker(self) -> bool {
      self.reader.get_bool_field(5)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 3, pointers: 6 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_enabled(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_enabled(&mut self, value: bool)  {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_gas_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_gas_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_brake_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_brake_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_steering_torque_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(3)
    }
    #[inline]
    pub fn set_steering_torque_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(3, value);
    }
    #[inline]
    pub fn get_cruise_control(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::cruise_control::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_cruise_control(&mut self, value: crate::cereal::car_capnp::car_control::cruise_control::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_cruise_control(self, ) -> crate::cereal::car_capnp::car_control::cruise_control::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_cruise_control(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_hud_control(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::h_u_d_control::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_hud_control(&mut self, value: crate::cereal::car_capnp::car_control::h_u_d_control::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_hud_control(self, ) -> crate::cereal::car_capnp::car_control::h_u_d_control::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    #[inline]
    pub fn has_hud_control(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_actuators(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::actuators::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_actuators(&mut self, value: crate::cereal::car_capnp::car_control::actuators::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_actuators(self, ) -> crate::cereal::car_capnp::car_control::actuators::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    #[inline]
    pub fn has_actuators(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_active_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(1)
    }
    #[inline]
    pub fn set_active_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(1, value);
    }
    #[inline]
    pub fn get_roll_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_roll_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_pitch_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_pitch_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_actuators_output_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::actuators::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_actuators_output_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::car_capnp::car_control::actuators::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_actuators_output_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::car_capnp::car_control::actuators::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    #[inline]
    pub fn has_actuators_output_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_lat_active(self) -> bool {
      self.builder.get_bool_field(2)
    }
    #[inline]
    pub fn set_lat_active(&mut self, value: bool)  {
      self.builder.set_bool_field(2, value);
    }
    #[inline]
    pub fn get_long_active(self) -> bool {
      self.builder.get_bool_field(3)
    }
    #[inline]
    pub fn set_long_active(&mut self, value: bool)  {
      self.builder.set_bool_field(3, value);
    }
    #[inline]
    pub fn get_orientation_n_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_orientation_n_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_orientation_n_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_orientation_n_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_angular_velocity(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_angular_velocity(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_angular_velocity(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_angular_velocity(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_left_blinker(self) -> bool {
      self.builder.get_bool_field(4)
    }
    #[inline]
    pub fn set_left_blinker(&mut self, value: bool)  {
      self.builder.set_bool_field(4, value);
    }
    #[inline]
    pub fn get_right_blinker(self) -> bool {
      self.builder.get_bool_field(5)
    }
    #[inline]
    pub fn set_right_blinker(&mut self, value: bool)  {
      self.builder.set_bool_field(5, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_cruise_control(&self) -> crate::cereal::car_capnp::car_control::cruise_control::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
    pub fn get_hud_control(&self) -> crate::cereal::car_capnp::car_control::h_u_d_control::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_actuators(&self) -> crate::cereal::car_capnp::car_control::actuators::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
    pub fn get_actuators_output_d_e_p_r_e_c_a_t_e_d(&self) -> crate::cereal::car_capnp::car_control::actuators::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 313] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(175, 20, 184, 154, 4, 41, 136, 247),
      ::capnp::word(10, 0, 0, 0, 1, 0, 3, 0),
      ::capnp::word(141, 139, 175, 8, 231, 241, 42, 142),
      ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 170, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 55, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 0, 0, 0, 191, 3, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 114, 67, 111, 110),
      ::capnp::word(116, 114, 111, 108, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(40, 40, 67, 25, 169, 117, 114, 233),
      ::capnp::word(17, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(211, 168, 11, 14, 110, 56, 14, 178),
      ::capnp::word(17, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(56, 58, 176, 78, 124, 200, 149, 216),
      ::capnp::word(17, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(65, 99, 116, 117, 97, 116, 111, 114),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(67, 114, 117, 105, 115, 101, 67, 111),
      ::capnp::word(110, 116, 114, 111, 108, 0, 0, 0),
      ::capnp::word(72, 85, 68, 67, 111, 110, 116, 114),
      ::capnp::word(111, 108, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 1, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 1, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 1, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 1, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(232, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(244, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(241, 1, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 1, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 1, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 1, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 2, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 2, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 2, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 2, 0, 0, 210, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(44, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(52, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 2, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 2, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 2, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 2, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 2, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(124, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(136, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(101, 110, 97, 98, 108, 101, 100, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 97, 115, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 114, 97, 107, 101, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
      ::capnp::word(84, 111, 114, 113, 117, 101, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 114, 117, 105, 115, 101, 67, 111),
      ::capnp::word(110, 116, 114, 111, 108, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(211, 168, 11, 14, 110, 56, 14, 178),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 117, 100, 67, 111, 110, 116, 114),
      ::capnp::word(111, 108, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 58, 176, 78, 124, 200, 149, 216),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 116, 117, 97, 116, 111, 114),
      ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 40, 67, 25, 169, 117, 114, 233),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 116, 105, 118, 101, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 108, 108, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 105, 116, 99, 104, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 99, 116, 117, 97, 116, 111, 114),
      ::capnp::word(115, 79, 117, 116, 112, 117, 116, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 40, 67, 25, 169, 117, 114, 233),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 65, 99, 116, 105, 118),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 65, 99, 116, 105),
      ::capnp::word(118, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 114, 105, 101, 110, 116, 97, 116),
      ::capnp::word(105, 111, 110, 78, 69, 68, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 110, 103, 117, 108, 97, 114, 86),
      ::capnp::word(101, 108, 111, 99, 105, 116, 121, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 102, 116, 66, 108, 105, 110),
      ::capnp::word(107, 101, 114, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 105, 103, 104, 116, 66, 108, 105),
      ::capnp::word(110, 107, 101, 114, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <bool as ::capnp::introspect::Introspect>::introspect(),
        1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <crate::cereal::car_capnp::car_control::cruise_control::Owned as ::capnp::introspect::Introspect>::introspect(),
        5 => <crate::cereal::car_capnp::car_control::h_u_d_control::Owned as ::capnp::introspect::Introspect>::introspect(),
        6 => <crate::cereal::car_capnp::car_control::actuators::Owned as ::capnp::introspect::Introspect>::introspect(),
        7 => <bool as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        10 => <crate::cereal::car_capnp::car_control::actuators::Owned as ::capnp::introspect::Introspect>::introspect(),
        11 => <bool as ::capnp::introspect::Introspect>::introspect(),
        12 => <bool as ::capnp::introspect::Introspect>::introspect(),
        13 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        14 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        15 => <bool as ::capnp::introspect::Introspect>::introspect(),
        16 => <bool as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[7,6,10,14,2,4,0,1,5,11,15,12,13,9,16,8,3];
    pub const TYPE_ID: u64 = 0xf788_2904_9ab8_14af;
  }

  pub mod actuators {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_gas(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_brake(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_steer(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_accel(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_long_control_state(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::actuators::LongControlState,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(10))
      }
      #[inline]
      pub fn get_speed(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_curvature(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn get_steer_output_can(self) -> f32 {
        self.reader.get_data_field::<f32>(8)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 5, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_gas(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_gas(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_brake(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_brake(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_steer(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_steer(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_steering_angle_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_steering_angle_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_accel(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_accel(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_long_control_state(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::actuators::LongControlState,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(10))
      }
      #[inline]
      pub fn set_long_control_state(&mut self, value: crate::cereal::car_capnp::car_control::actuators::LongControlState)  {
        self.builder.set_data_field::<u16>(10, value as u16);
      }
      #[inline]
      pub fn get_speed(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_speed(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_curvature(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_curvature(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
      #[inline]
      pub fn get_steer_output_can(self) -> f32 {
        self.builder.get_data_field::<f32>(8)
      }
      #[inline]
      pub fn set_steer_output_can(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(8, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 164] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(40, 40, 67, 25, 169, 117, 114, 233),
        ::capnp::word(21, 0, 0, 0, 1, 0, 5, 0),
        ::capnp::word(175, 20, 184, 154, 4, 41, 136, 247),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(49, 0, 0, 0, 255, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 67, 111, 110),
        ::capnp::word(116, 114, 111, 108, 46, 65, 99, 116),
        ::capnp::word(117, 97, 116, 111, 114, 115, 0, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(130, 130, 144, 125, 145, 58, 15, 228),
        ::capnp::word(1, 0, 0, 0, 138, 0, 0, 0),
        ::capnp::word(76, 111, 110, 103, 67, 111, 110, 116),
        ::capnp::word(114, 111, 108, 83, 116, 97, 116, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(236, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(248, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(245, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(240, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(252, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(249, 0, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(252, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 1, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(24, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(103, 97, 115, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 114, 97, 107, 101, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 103),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 99, 101, 108, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 110, 103, 67, 111, 110, 116),
        ::capnp::word(114, 111, 108, 83, 116, 97, 116, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(130, 130, 144, 125, 145, 58, 15, 228),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 112, 101, 101, 100, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
        ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 79, 117, 116),
        ::capnp::word(112, 117, 116, 67, 97, 110, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <crate::cereal::car_capnp::car_control::actuators::LongControlState as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[4,1,7,0,5,6,2,8,3];
      pub const TYPE_ID: u64 = 0xe972_75a9_1943_2828;
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum LongControlState {
      Off = 0,
      Pid = 1,
      Stopping = 2,
      Starting = 3,
    }

    impl ::capnp::introspect::Introspect for LongControlState {
      fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &long_control_state::ENCODED_NODE, annotation_types: long_control_state::get_annotation_types }).into() }
    }
    impl <'a> ::core::convert::From<LongControlState> for ::capnp::dynamic_value::Reader<'a> {
      fn from(e: LongControlState) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &long_control_state::ENCODED_NODE, annotation_types: long_control_state::get_annotation_types }.into()).into() }
    }
    impl ::core::convert::TryFrom<u16> for LongControlState {
      type Error = ::capnp::NotInSchema;
      fn try_from(value: u16) -> ::core::result::Result<Self, <LongControlState as ::core::convert::TryFrom<u16>>::Error> {
        match value {
          0 => ::core::result::Result::Ok(Self::Off),
          1 => ::core::result::Result::Ok(Self::Pid),
          2 => ::core::result::Result::Ok(Self::Stopping),
          3 => ::core::result::Result::Ok(Self::Starting),
          n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
        }
      }
    }
    impl From<LongControlState> for u16 {
      #[inline]
      fn from(x: LongControlState) -> u16 { x as u16 }
    }
    impl ::capnp::traits::HasTypeId for LongControlState {
      const TYPE_ID: u64 = 0xe40f_3a91_7d90_8282u64;
    }
    mod long_control_state {
    pub static ENCODED_NODE: [::capnp::Word; 38] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(130, 130, 144, 125, 145, 58, 15, 228),
      ::capnp::word(31, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(40, 40, 67, 25, 169, 117, 114, 233),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 130, 1, 0, 0),
      ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 0, 0, 0, 103, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 114, 67, 111, 110),
      ::capnp::word(116, 114, 111, 108, 46, 65, 99, 116),
      ::capnp::word(117, 97, 116, 111, 114, 115, 46, 76),
      ::capnp::word(111, 110, 103, 67, 111, 110, 116, 114),
      ::capnp::word(111, 108, 83, 116, 97, 116, 101, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 102, 102, 0, 0, 0, 0, 0),
      ::capnp::word(112, 105, 100, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 111, 112, 112, 105, 110, 103),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 114, 116, 105, 110, 103),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    }
  }

  pub mod cruise_control {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_cancel(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_resume(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_speed_override_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_accel_override_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_override(self) -> bool {
        self.reader.get_bool_field(2)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_cancel(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_cancel(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_resume(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_resume(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_speed_override_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_speed_override_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_accel_override_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_accel_override_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_override(self) -> bool {
        self.builder.get_bool_field(2)
      }
      #[inline]
      pub fn set_override(&mut self, value: bool)  {
        self.builder.set_bool_field(2, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 99] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(211, 168, 11, 14, 110, 56, 14, 178),
        ::capnp::word(21, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(175, 20, 184, 154, 4, 41, 136, 247),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 26, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 31, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 67, 111, 110),
        ::capnp::word(116, 114, 111, 108, 46, 67, 114, 117),
        ::capnp::word(105, 115, 101, 67, 111, 110, 116, 114),
        ::capnp::word(111, 108, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(125, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(136, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(133, 0, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(136, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 0, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(148, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(160, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(157, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(156, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(99, 97, 110, 99, 101, 108, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 101, 115, 117, 109, 101, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 112, 101, 101, 100, 79, 118, 101),
        ::capnp::word(114, 114, 105, 100, 101, 68, 69, 80),
        ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 99, 101, 108, 79, 118, 101),
        ::capnp::word(114, 114, 105, 100, 101, 68, 69, 80),
        ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 118, 101, 114, 114, 105, 100, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <bool as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <bool as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[3,0,4,1,2];
      pub const TYPE_ID: u64 = 0xb20e_386e_0e0b_a8d3;
    }
  }

  pub mod h_u_d_control {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_speed_visible(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_set_speed(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_lanes_visible(self) -> bool {
        self.reader.get_bool_field(1)
      }
      #[inline]
      pub fn get_lead_visible(self) -> bool {
        self.reader.get_bool_field(2)
      }
      #[inline]
      pub fn get_visual_alert(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::h_u_d_control::VisualAlert,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
      }
      #[inline]
      pub fn get_audible_alert(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::h_u_d_control::AudibleAlert,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(4))
      }
      #[inline]
      pub fn get_right_lane_visible(self) -> bool {
        self.reader.get_bool_field(3)
      }
      #[inline]
      pub fn get_left_lane_visible(self) -> bool {
        self.reader.get_bool_field(4)
      }
      #[inline]
      pub fn get_right_lane_depart(self) -> bool {
        self.reader.get_bool_field(5)
      }
      #[inline]
      pub fn get_left_lane_depart(self) -> bool {
        self.reader.get_bool_field(6)
      }
      #[inline]
      pub fn get_lead_distance_bars(self) -> i8 {
        self.reader.get_data_field::<i8>(1)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_speed_visible(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_speed_visible(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_set_speed(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_set_speed(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_lanes_visible(self) -> bool {
        self.builder.get_bool_field(1)
      }
      #[inline]
      pub fn set_lanes_visible(&mut self, value: bool)  {
        self.builder.set_bool_field(1, value);
      }
      #[inline]
      pub fn get_lead_visible(self) -> bool {
        self.builder.get_bool_field(2)
      }
      #[inline]
      pub fn set_lead_visible(&mut self, value: bool)  {
        self.builder.set_bool_field(2, value);
      }
      #[inline]
      pub fn get_visual_alert(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::h_u_d_control::VisualAlert,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
      }
      #[inline]
      pub fn set_visual_alert(&mut self, value: crate::cereal::car_capnp::car_control::h_u_d_control::VisualAlert)  {
        self.builder.set_data_field::<u16>(1, value as u16);
      }
      #[inline]
      pub fn get_audible_alert(self) -> ::core::result::Result<crate::cereal::car_capnp::car_control::h_u_d_control::AudibleAlert,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(4))
      }
      #[inline]
      pub fn set_audible_alert(&mut self, value: crate::cereal::car_capnp::car_control::h_u_d_control::AudibleAlert)  {
        self.builder.set_data_field::<u16>(4, value as u16);
      }
      #[inline]
      pub fn get_right_lane_visible(self) -> bool {
        self.builder.get_bool_field(3)
      }
      #[inline]
      pub fn set_right_lane_visible(&mut self, value: bool)  {
        self.builder.set_bool_field(3, value);
      }
      #[inline]
      pub fn get_left_lane_visible(self) -> bool {
        self.builder.get_bool_field(4)
      }
      #[inline]
      pub fn set_left_lane_visible(&mut self, value: bool)  {
        self.builder.set_bool_field(4, value);
      }
      #[inline]
      pub fn get_right_lane_depart(self) -> bool {
        self.builder.get_bool_field(5)
      }
      #[inline]
      pub fn set_right_lane_depart(&mut self, value: bool)  {
        self.builder.set_bool_field(5, value);
      }
      #[inline]
      pub fn get_left_lane_depart(self) -> bool {
        self.builder.get_bool_field(6)
      }
      #[inline]
      pub fn set_left_lane_depart(&mut self, value: bool)  {
        self.builder.set_bool_field(6, value);
      }
      #[inline]
      pub fn get_lead_distance_bars(self) -> i8 {
        self.builder.get_data_field::<i8>(1)
      }
      #[inline]
      pub fn set_lead_distance_bars(&mut self, value: i8)  {
        self.builder.set_data_field::<i8>(1, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 204] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(56, 58, 176, 78, 124, 200, 149, 216),
        ::capnp::word(21, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(175, 20, 184, 154, 4, 41, 136, 247),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
        ::capnp::word(33, 0, 0, 0, 39, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 0, 0, 0, 111, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 67, 111, 110),
        ::capnp::word(116, 114, 111, 108, 46, 72, 85, 68),
        ::capnp::word(67, 111, 110, 116, 114, 111, 108, 0),
        ::capnp::word(8, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(212, 23, 110, 97, 132, 142, 215, 144),
        ::capnp::word(9, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(158, 51, 78, 149, 108, 226, 165, 245),
        ::capnp::word(9, 0, 0, 0, 106, 0, 0, 0),
        ::capnp::word(86, 105, 115, 117, 97, 108, 65, 108),
        ::capnp::word(101, 114, 116, 0, 0, 0, 0, 0),
        ::capnp::word(65, 117, 100, 105, 98, 108, 101, 65),
        ::capnp::word(108, 101, 114, 116, 0, 0, 0, 0),
        ::capnp::word(44, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 1, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 1, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(44, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 1, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(52, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 1, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(60, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(72, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 1, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(68, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(80, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(77, 1, 0, 0, 106, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(76, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(88, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(85, 1, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(88, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(100, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(104, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(116, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(113, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(124, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(121, 1, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(124, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(136, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 112, 101, 101, 100, 86, 105, 115),
        ::capnp::word(105, 98, 108, 101, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 101, 116, 83, 112, 101, 101, 100),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 110, 101, 115, 86, 105, 115),
        ::capnp::word(105, 98, 108, 101, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 101, 97, 100, 86, 105, 115, 105),
        ::capnp::word(98, 108, 101, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 105, 115, 117, 97, 108, 65, 108),
        ::capnp::word(101, 114, 116, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 23, 110, 97, 132, 142, 215, 144),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 117, 100, 105, 98, 108, 101, 65),
        ::capnp::word(108, 101, 114, 116, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(158, 51, 78, 149, 108, 226, 165, 245),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 105, 103, 104, 116, 76, 97, 110),
        ::capnp::word(101, 86, 105, 115, 105, 98, 108, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 101, 102, 116, 76, 97, 110, 101),
        ::capnp::word(86, 105, 115, 105, 98, 108, 101, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 105, 103, 104, 116, 76, 97, 110),
        ::capnp::word(101, 68, 101, 112, 97, 114, 116, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 101, 102, 116, 76, 97, 110, 101),
        ::capnp::word(68, 101, 112, 97, 114, 116, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 101, 97, 100, 68, 105, 115, 116),
        ::capnp::word(97, 110, 99, 101, 66, 97, 114, 115),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <bool as ::capnp::introspect::Introspect>::introspect(),
          3 => <bool as ::capnp::introspect::Introspect>::introspect(),
          4 => <crate::cereal::car_capnp::car_control::h_u_d_control::VisualAlert as ::capnp::introspect::Introspect>::introspect(),
          5 => <crate::cereal::car_capnp::car_control::h_u_d_control::AudibleAlert as ::capnp::introspect::Introspect>::introspect(),
          6 => <bool as ::capnp::introspect::Introspect>::introspect(),
          7 => <bool as ::capnp::introspect::Introspect>::introspect(),
          8 => <bool as ::capnp::introspect::Introspect>::introspect(),
          9 => <bool as ::capnp::introspect::Introspect>::introspect(),
          10 => <i8 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[5,2,10,3,9,7,8,6,1,0,4];
      pub const TYPE_ID: u64 = 0xd895_c87c_4eb0_3a38;
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum VisualAlert {
      None = 0,
      Fcw = 1,
      SteerRequired = 2,
      BrakePressed = 3,
      WrongGear = 4,
      SeatbeltUnbuckled = 5,
      SpeedTooHigh = 6,
      Ldw = 7,
    }

    impl ::capnp::introspect::Introspect for VisualAlert {
      fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &visual_alert::ENCODED_NODE, annotation_types: visual_alert::get_annotation_types }).into() }
    }
    impl <'a> ::core::convert::From<VisualAlert> for ::capnp::dynamic_value::Reader<'a> {
      fn from(e: VisualAlert) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &visual_alert::ENCODED_NODE, annotation_types: visual_alert::get_annotation_types }.into()).into() }
    }
    impl ::core::convert::TryFrom<u16> for VisualAlert {
      type Error = ::capnp::NotInSchema;
      fn try_from(value: u16) -> ::core::result::Result<Self, <VisualAlert as ::core::convert::TryFrom<u16>>::Error> {
        match value {
          0 => ::core::result::Result::Ok(Self::None),
          1 => ::core::result::Result::Ok(Self::Fcw),
          2 => ::core::result::Result::Ok(Self::SteerRequired),
          3 => ::core::result::Result::Ok(Self::BrakePressed),
          4 => ::core::result::Result::Ok(Self::WrongGear),
          5 => ::core::result::Result::Ok(Self::SeatbeltUnbuckled),
          6 => ::core::result::Result::Ok(Self::SpeedTooHigh),
          7 => ::core::result::Result::Ok(Self::Ldw),
          n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
        }
      }
    }
    impl From<VisualAlert> for u16 {
      #[inline]
      fn from(x: VisualAlert) -> u16 { x as u16 }
    }
    impl ::capnp::traits::HasTypeId for VisualAlert {
      const TYPE_ID: u64 = 0x90d7_8e84_616e_17d4u64;
    }
    mod visual_alert {
    pub static ENCODED_NODE: [::capnp::Word; 58] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(212, 23, 110, 97, 132, 142, 215, 144),
      ::capnp::word(32, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(56, 58, 176, 78, 124, 200, 149, 216),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 98, 1, 0, 0),
      ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 0, 0, 0, 199, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 114, 67, 111, 110),
      ::capnp::word(116, 114, 111, 108, 46, 72, 85, 68),
      ::capnp::word(67, 111, 110, 116, 114, 111, 108, 46),
      ::capnp::word(86, 105, 115, 117, 97, 108, 65, 108),
      ::capnp::word(101, 114, 116, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(32, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
      ::capnp::word(102, 99, 119, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 82, 101, 113),
      ::capnp::word(117, 105, 114, 101, 100, 0, 0, 0),
      ::capnp::word(98, 114, 97, 107, 101, 80, 114, 101),
      ::capnp::word(115, 115, 101, 100, 0, 0, 0, 0),
      ::capnp::word(119, 114, 111, 110, 103, 71, 101, 97),
      ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 101, 97, 116, 98, 101, 108, 116),
      ::capnp::word(85, 110, 98, 117, 99, 107, 108, 101),
      ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 112, 101, 101, 100, 84, 111, 111),
      ::capnp::word(72, 105, 103, 104, 0, 0, 0, 0),
      ::capnp::word(108, 100, 119, 0, 0, 0, 0, 0),
    ];
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum AudibleAlert {
      None = 0,
      Engage = 1,
      Disengage = 2,
      Refuse = 3,
      WarningSoft = 4,
      WarningImmediate = 5,
      Prompt = 6,
      PromptRepeat = 7,
      PromptDistracted = 8,
    }

    impl ::capnp::introspect::Introspect for AudibleAlert {
      fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &audible_alert::ENCODED_NODE, annotation_types: audible_alert::get_annotation_types }).into() }
    }
    impl <'a> ::core::convert::From<AudibleAlert> for ::capnp::dynamic_value::Reader<'a> {
      fn from(e: AudibleAlert) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &audible_alert::ENCODED_NODE, annotation_types: audible_alert::get_annotation_types }.into()).into() }
    }
    impl ::core::convert::TryFrom<u16> for AudibleAlert {
      type Error = ::capnp::NotInSchema;
      fn try_from(value: u16) -> ::core::result::Result<Self, <AudibleAlert as ::core::convert::TryFrom<u16>>::Error> {
        match value {
          0 => ::core::result::Result::Ok(Self::None),
          1 => ::core::result::Result::Ok(Self::Engage),
          2 => ::core::result::Result::Ok(Self::Disengage),
          3 => ::core::result::Result::Ok(Self::Refuse),
          4 => ::core::result::Result::Ok(Self::WarningSoft),
          5 => ::core::result::Result::Ok(Self::WarningImmediate),
          6 => ::core::result::Result::Ok(Self::Prompt),
          7 => ::core::result::Result::Ok(Self::PromptRepeat),
          8 => ::core::result::Result::Ok(Self::PromptDistracted),
          n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
        }
      }
    }
    impl From<AudibleAlert> for u16 {
      #[inline]
      fn from(x: AudibleAlert) -> u16 { x as u16 }
    }
    impl ::capnp::traits::HasTypeId for AudibleAlert {
      const TYPE_ID: u64 = 0xf5a5_e26c_954e_339eu64;
    }
    mod audible_alert {
    pub static ENCODED_NODE: [::capnp::Word; 63] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(158, 51, 78, 149, 108, 226, 165, 245),
      ::capnp::word(32, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(56, 58, 176, 78, 124, 200, 149, 216),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 106, 1, 0, 0),
      ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 0, 0, 0, 223, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 114, 67, 111, 110),
      ::capnp::word(116, 114, 111, 108, 46, 72, 85, 68),
      ::capnp::word(67, 111, 110, 116, 114, 111, 108, 46),
      ::capnp::word(65, 117, 100, 105, 98, 108, 101, 65),
      ::capnp::word(108, 101, 114, 116, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(36, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 0, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
      ::capnp::word(101, 110, 103, 97, 103, 101, 0, 0),
      ::capnp::word(100, 105, 115, 101, 110, 103, 97, 103),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 101, 102, 117, 115, 101, 0, 0),
      ::capnp::word(119, 97, 114, 110, 105, 110, 103, 83),
      ::capnp::word(111, 102, 116, 0, 0, 0, 0, 0),
      ::capnp::word(119, 97, 114, 110, 105, 110, 103, 73),
      ::capnp::word(109, 109, 101, 100, 105, 97, 116, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 111, 109, 112, 116, 0, 0),
      ::capnp::word(112, 114, 111, 109, 112, 116, 82, 101),
      ::capnp::word(112, 101, 97, 116, 0, 0, 0, 0),
      ::capnp::word(112, 114, 111, 109, 112, 116, 68, 105),
      ::capnp::word(115, 116, 114, 97, 99, 116, 101, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    }
  }
}

pub mod car_output {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_actuators_output(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::actuators::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_actuators_output(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 1 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_actuators_output(self) -> ::capnp::Result<crate::cereal::car_capnp::car_control::actuators::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_actuators_output(&mut self, value: crate::cereal::car_capnp::car_control::actuators::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_actuators_output(self, ) -> crate::cereal::car_capnp::car_control::actuators::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    #[inline]
    pub fn has_actuators_output(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_actuators_output(&self) -> crate::cereal::car_capnp::car_control::actuators::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 33] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(133, 202, 21, 81, 101, 214, 23, 216),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(141, 139, 175, 8, 231, 241, 42, 142),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 63, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 114, 79, 117, 116),
      ::capnp::word(112, 117, 116, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(97, 99, 116, 117, 97, 116, 111, 114),
      ::capnp::word(115, 79, 117, 116, 112, 117, 116, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 40, 67, 25, 169, 117, 114, 233),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <crate::cereal::car_capnp::car_control::actuators::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0];
    pub const TYPE_ID: u64 = 0xd817_d665_5115_ca85;
  }
}

pub mod car_params {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_car_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_car_name(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_car_fingerprint(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_car_fingerprint(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_enable_gas_interceptor_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_pcm_cruise(self) -> bool {
      self.reader.get_bool_field(1)
    }
    #[inline]
    pub fn get_enable_camera_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(2)
    }
    #[inline]
    pub fn get_enable_dsu(self) -> bool {
      self.reader.get_bool_field(3)
    }
    #[inline]
    pub fn get_enable_apgs_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(4)
    }
    #[inline]
    pub fn get_min_enable_speed(self) -> f32 {
      self.reader.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn get_min_steer_speed(self) -> f32 {
      self.reader.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn get_safety_model_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SafetyModel,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn get_safety_param_d_e_p_r_e_c_a_t_e_d(self) -> i16 {
      self.reader.get_data_field::<i16>(6)
    }
    #[inline]
    pub fn get_steer_max_b_p_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_steer_max_b_p_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_steer_max_v_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_steer_max_v_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_gas_max_b_p_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_gas_max_b_p_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_gas_max_v_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_gas_max_v_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_brake_max_b_p_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_brake_max_b_p_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
    #[inline]
    pub fn get_brake_max_v_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_brake_max_v_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.reader.get_pointer_field(7).is_null()
    }
    #[inline]
    pub fn get_mass(self) -> f32 {
      self.reader.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn get_wheelbase(self) -> f32 {
      self.reader.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn get_center_to_front(self) -> f32 {
      self.reader.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn get_steer_ratio(self) -> f32 {
      self.reader.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn get_steer_ratio_rear(self) -> f32 {
      self.reader.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn get_rotational_inertia(self) -> f32 {
      self.reader.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn get_tire_stiffness_front(self) -> f32 {
      self.reader.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn get_tire_stiffness_rear(self) -> f32 {
      self.reader.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn get_longitudinal_tuning(self) -> ::capnp::Result<crate::cereal::car_capnp::car_params::longitudinal_p_i_d_tuning::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_longitudinal_tuning(&self) -> bool {
      !self.reader.get_pointer_field(8).is_null()
    }
    #[inline]
    pub fn get_lateral_tuning(self) -> crate::cereal::car_capnp::car_params::lateral_tuning::Reader<'a> {
      self.reader.into()
    }
    #[inline]
    pub fn get_steer_limit_alert(self) -> bool {
      self.reader.get_bool_field(5)
    }
    #[inline]
    pub fn get_v_ego_stopping(self) -> f32 {
      self.reader.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn get_direct_accel_control_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(6)
    }
    #[inline]
    pub fn get_stopping_control(self) -> bool {
      self.reader.get_bool_field(7)
    }
    #[inline]
    pub fn get_start_accel(self) -> f32 {
      self.reader.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn get_steer_rate_cost_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn get_steer_control_type(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SteerControlType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(30))
    }
    #[inline]
    pub fn get_radar_unavailable(self) -> bool {
      self.reader.get_bool_field(8)
    }
    #[inline]
    pub fn get_steer_actuator_delay(self) -> f32 {
      self.reader.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn get_openpilot_longitudinal_control(self) -> bool {
      self.reader.get_bool_field(9)
    }
    #[inline]
    pub fn get_car_vin(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_car_vin(&self) -> bool {
      !self.reader.get_pointer_field(10).is_null()
    }
    #[inline]
    pub fn get_is_panda_black_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(10)
    }
    #[inline]
    pub fn get_dashcam_only(self) -> bool {
      self.reader.get_bool_field(11)
    }
    #[inline]
    pub fn get_safety_model_passive_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SafetyModel,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(31))
    }
    #[inline]
    pub fn get_transmission_type(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::TransmissionType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(34))
    }
    #[inline]
    pub fn get_car_fw(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::car_capnp::car_params::car_fw::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(11), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_car_fw(&self) -> bool {
      !self.reader.get_pointer_field(11).is_null()
    }
    #[inline]
    pub fn get_radar_time_step(self) -> f32 {
      self.reader.get_data_field_mask::<f32>(18, 1028443341)
    }
    #[inline]
    pub fn get_community_feature_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(12)
    }
    #[inline]
    pub fn get_steer_limit_timer(self) -> f32 {
      self.reader.get_data_field::<f32>(19)
    }
    #[inline]
    pub fn get_lateral_params(self) -> ::capnp::Result<crate::cereal::car_capnp::car_params::lateral_params::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(12), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_lateral_params(&self) -> bool {
      !self.reader.get_pointer_field(12).is_null()
    }
    #[inline]
    pub fn get_fingerprint_source(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::FingerprintSource,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(35))
    }
    #[inline]
    pub fn get_network_location(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::NetworkLocation,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(40))
    }
    #[inline]
    pub fn get_min_speed_can_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(21)
    }
    #[inline]
    pub fn get_stopping_decel_rate(self) -> f32 {
      self.reader.get_data_field::<f32>(22)
    }
    #[inline]
    pub fn get_starting_accel_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(23)
    }
    #[inline]
    pub fn get_max_steering_angle_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.reader.get_data_field::<f32>(24)
    }
    #[inline]
    pub fn get_fuzzy_fingerprint(self) -> bool {
      self.reader.get_bool_field(13)
    }
    #[inline]
    pub fn get_enable_bsm(self) -> bool {
      self.reader.get_bool_field(14)
    }
    #[inline]
    pub fn get_has_stock_camera_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.reader.get_bool_field(15)
    }
    #[inline]
    pub fn get_longitudinal_actuator_delay_upper_bound(self) -> f32 {
      self.reader.get_data_field::<f32>(25)
    }
    #[inline]
    pub fn get_v_ego_starting(self) -> f32 {
      self.reader.get_data_field::<f32>(26)
    }
    #[inline]
    pub fn get_stop_accel(self) -> f32 {
      self.reader.get_data_field::<f32>(27)
    }
    #[inline]
    pub fn get_longitudinal_actuator_delay_lower_bound(self) -> f32 {
      self.reader.get_data_field::<f32>(28)
    }
    #[inline]
    pub fn get_safety_configs(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::cereal::car_capnp::car_params::safety_config::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(13), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_safety_configs(&self) -> bool {
      !self.reader.get_pointer_field(13).is_null()
    }
    #[inline]
    pub fn get_wheel_speed_factor(self) -> f32 {
      self.reader.get_data_field::<f32>(29)
    }
    #[inline]
    pub fn get_flags(self) -> u32 {
      self.reader.get_data_field::<u32>(30)
    }
    #[inline]
    pub fn get_alternative_experience(self) -> i16 {
      self.reader.get_data_field::<i16>(41)
    }
    #[inline]
    pub fn get_not_car(self) -> bool {
      self.reader.get_bool_field(992)
    }
    #[inline]
    pub fn get_max_lateral_accel(self) -> f32 {
      self.reader.get_data_field::<f32>(32)
    }
    #[inline]
    pub fn get_auto_resume_sng(self) -> bool {
      self.reader.get_bool_field(993)
    }
    #[inline]
    pub fn get_starting_state(self) -> bool {
      self.reader.get_bool_field(994)
    }
    #[inline]
    pub fn get_experimental_longitudinal_available(self) -> bool {
      self.reader.get_bool_field(995)
    }
    #[inline]
    pub fn get_tire_stiffness_factor(self) -> f32 {
      self.reader.get_data_field::<f32>(33)
    }
    #[inline]
    pub fn get_passive(self) -> bool {
      self.reader.get_bool_field(996)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 17, pointers: 14 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_car_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_car_name(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false).unwrap()
    }
    #[inline]
    pub fn init_car_name(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    #[inline]
    pub fn has_car_name(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_car_fingerprint(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_car_fingerprint(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false).unwrap()
    }
    #[inline]
    pub fn init_car_fingerprint(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    #[inline]
    pub fn has_car_fingerprint(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_enable_gas_interceptor_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_enable_gas_interceptor_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_pcm_cruise(self) -> bool {
      self.builder.get_bool_field(1)
    }
    #[inline]
    pub fn set_pcm_cruise(&mut self, value: bool)  {
      self.builder.set_bool_field(1, value);
    }
    #[inline]
    pub fn get_enable_camera_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(2)
    }
    #[inline]
    pub fn set_enable_camera_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(2, value);
    }
    #[inline]
    pub fn get_enable_dsu(self) -> bool {
      self.builder.get_bool_field(3)
    }
    #[inline]
    pub fn set_enable_dsu(&mut self, value: bool)  {
      self.builder.set_bool_field(3, value);
    }
    #[inline]
    pub fn get_enable_apgs_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(4)
    }
    #[inline]
    pub fn set_enable_apgs_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(4, value);
    }
    #[inline]
    pub fn get_min_enable_speed(self) -> f32 {
      self.builder.get_data_field::<f32>(1)
    }
    #[inline]
    pub fn set_min_enable_speed(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(1, value);
    }
    #[inline]
    pub fn get_min_steer_speed(self) -> f32 {
      self.builder.get_data_field::<f32>(2)
    }
    #[inline]
    pub fn set_min_steer_speed(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(2, value);
    }
    #[inline]
    pub fn get_safety_model_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SafetyModel,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn set_safety_model_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::car_capnp::car_params::SafetyModel)  {
      self.builder.set_data_field::<u16>(1, value as u16);
    }
    #[inline]
    pub fn get_safety_param_d_e_p_r_e_c_a_t_e_d(self) -> i16 {
      self.builder.get_data_field::<i16>(6)
    }
    #[inline]
    pub fn set_safety_param_d_e_p_r_e_c_a_t_e_d(&mut self, value: i16)  {
      self.builder.set_data_field::<i16>(6, value);
    }
    #[inline]
    pub fn get_steer_max_b_p_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_steer_max_b_p_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_steer_max_b_p_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    #[inline]
    pub fn has_steer_max_b_p_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_steer_max_v_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_steer_max_v_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_steer_max_v_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    #[inline]
    pub fn has_steer_max_v_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(3)
    }
    #[inline]
    pub fn get_gas_max_b_p_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_gas_max_b_p_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_gas_max_b_p_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    #[inline]
    pub fn has_gas_max_b_p_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(4)
    }
    #[inline]
    pub fn get_gas_max_v_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_gas_max_v_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_gas_max_v_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    #[inline]
    pub fn has_gas_max_v_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(5)
    }
    #[inline]
    pub fn get_brake_max_b_p_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_brake_max_b_p_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_brake_max_b_p_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    #[inline]
    pub fn has_brake_max_b_p_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(6)
    }
    #[inline]
    pub fn get_brake_max_v_d_e_p_r_e_c_a_t_e_d(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_brake_max_v_d_e_p_r_e_c_a_t_e_d(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
    }
    #[inline]
    pub fn init_brake_max_v_d_e_p_r_e_c_a_t_e_d(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
    }
    #[inline]
    pub fn has_brake_max_v_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
      !self.builder.is_pointer_field_null(7)
    }
    #[inline]
    pub fn get_mass(self) -> f32 {
      self.builder.get_data_field::<f32>(4)
    }
    #[inline]
    pub fn set_mass(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(4, value);
    }
    #[inline]
    pub fn get_wheelbase(self) -> f32 {
      self.builder.get_data_field::<f32>(5)
    }
    #[inline]
    pub fn set_wheelbase(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(5, value);
    }
    #[inline]
    pub fn get_center_to_front(self) -> f32 {
      self.builder.get_data_field::<f32>(6)
    }
    #[inline]
    pub fn set_center_to_front(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(6, value);
    }
    #[inline]
    pub fn get_steer_ratio(self) -> f32 {
      self.builder.get_data_field::<f32>(7)
    }
    #[inline]
    pub fn set_steer_ratio(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(7, value);
    }
    #[inline]
    pub fn get_steer_ratio_rear(self) -> f32 {
      self.builder.get_data_field::<f32>(8)
    }
    #[inline]
    pub fn set_steer_ratio_rear(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(8, value);
    }
    #[inline]
    pub fn get_rotational_inertia(self) -> f32 {
      self.builder.get_data_field::<f32>(9)
    }
    #[inline]
    pub fn set_rotational_inertia(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(9, value);
    }
    #[inline]
    pub fn get_tire_stiffness_front(self) -> f32 {
      self.builder.get_data_field::<f32>(10)
    }
    #[inline]
    pub fn set_tire_stiffness_front(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(10, value);
    }
    #[inline]
    pub fn get_tire_stiffness_rear(self) -> f32 {
      self.builder.get_data_field::<f32>(11)
    }
    #[inline]
    pub fn set_tire_stiffness_rear(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(11, value);
    }
    #[inline]
    pub fn get_longitudinal_tuning(self) -> ::capnp::Result<crate::cereal::car_capnp::car_params::longitudinal_p_i_d_tuning::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(8), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_longitudinal_tuning(&mut self, value: crate::cereal::car_capnp::car_params::longitudinal_p_i_d_tuning::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(8), value, false)
    }
    #[inline]
    pub fn init_longitudinal_tuning(self, ) -> crate::cereal::car_capnp::car_params::longitudinal_p_i_d_tuning::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(8), 0)
    }
    #[inline]
    pub fn has_longitudinal_tuning(&self) -> bool {
      !self.builder.is_pointer_field_null(8)
    }
    #[inline]
    pub fn get_lateral_tuning(self) -> crate::cereal::car_capnp::car_params::lateral_tuning::Builder<'a> {
      self.builder.into()
    }
    #[inline]
    pub fn init_lateral_tuning(mut self, ) -> crate::cereal::car_capnp::car_params::lateral_tuning::Builder<'a> {
      self.builder.set_data_field::<u16>(7, 0);
      self.builder.reborrow().get_pointer_field(9).clear();
      self.builder.into()
    }
    #[inline]
    pub fn get_steer_limit_alert(self) -> bool {
      self.builder.get_bool_field(5)
    }
    #[inline]
    pub fn set_steer_limit_alert(&mut self, value: bool)  {
      self.builder.set_bool_field(5, value);
    }
    #[inline]
    pub fn get_v_ego_stopping(self) -> f32 {
      self.builder.get_data_field::<f32>(12)
    }
    #[inline]
    pub fn set_v_ego_stopping(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(12, value);
    }
    #[inline]
    pub fn get_direct_accel_control_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(6)
    }
    #[inline]
    pub fn set_direct_accel_control_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(6, value);
    }
    #[inline]
    pub fn get_stopping_control(self) -> bool {
      self.builder.get_bool_field(7)
    }
    #[inline]
    pub fn set_stopping_control(&mut self, value: bool)  {
      self.builder.set_bool_field(7, value);
    }
    #[inline]
    pub fn get_start_accel(self) -> f32 {
      self.builder.get_data_field::<f32>(13)
    }
    #[inline]
    pub fn set_start_accel(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(13, value);
    }
    #[inline]
    pub fn get_steer_rate_cost_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(14)
    }
    #[inline]
    pub fn set_steer_rate_cost_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(14, value);
    }
    #[inline]
    pub fn get_steer_control_type(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SteerControlType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(30))
    }
    #[inline]
    pub fn set_steer_control_type(&mut self, value: crate::cereal::car_capnp::car_params::SteerControlType)  {
      self.builder.set_data_field::<u16>(30, value as u16);
    }
    #[inline]
    pub fn get_radar_unavailable(self) -> bool {
      self.builder.get_bool_field(8)
    }
    #[inline]
    pub fn set_radar_unavailable(&mut self, value: bool)  {
      self.builder.set_bool_field(8, value);
    }
    #[inline]
    pub fn get_steer_actuator_delay(self) -> f32 {
      self.builder.get_data_field::<f32>(16)
    }
    #[inline]
    pub fn set_steer_actuator_delay(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(16, value);
    }
    #[inline]
    pub fn get_openpilot_longitudinal_control(self) -> bool {
      self.builder.get_bool_field(9)
    }
    #[inline]
    pub fn set_openpilot_longitudinal_control(&mut self, value: bool)  {
      self.builder.set_bool_field(9, value);
    }
    #[inline]
    pub fn get_car_vin(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(10), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_car_vin(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(10), value, false).unwrap()
    }
    #[inline]
    pub fn init_car_vin(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(10).init_text(size)
    }
    #[inline]
    pub fn has_car_vin(&self) -> bool {
      !self.builder.is_pointer_field_null(10)
    }
    #[inline]
    pub fn get_is_panda_black_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(10)
    }
    #[inline]
    pub fn set_is_panda_black_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(10, value);
    }
    #[inline]
    pub fn get_dashcam_only(self) -> bool {
      self.builder.get_bool_field(11)
    }
    #[inline]
    pub fn set_dashcam_only(&mut self, value: bool)  {
      self.builder.set_bool_field(11, value);
    }
    #[inline]
    pub fn get_safety_model_passive_d_e_p_r_e_c_a_t_e_d(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SafetyModel,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(31))
    }
    #[inline]
    pub fn set_safety_model_passive_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::car_capnp::car_params::SafetyModel)  {
      self.builder.set_data_field_mask::<u16>(31, value as u16, 0);
    }
    #[inline]
    pub fn get_transmission_type(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::TransmissionType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(34))
    }
    #[inline]
    pub fn set_transmission_type(&mut self, value: crate::cereal::car_capnp::car_params::TransmissionType)  {
      self.builder.set_data_field::<u16>(34, value as u16);
    }
    #[inline]
    pub fn get_car_fw(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_params::car_fw::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(11), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_car_fw(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::car_capnp::car_params::car_fw::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(11), value, false)
    }
    #[inline]
    pub fn init_car_fw(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_params::car_fw::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(11), size)
    }
    #[inline]
    pub fn has_car_fw(&self) -> bool {
      !self.builder.is_pointer_field_null(11)
    }
    #[inline]
    pub fn get_radar_time_step(self) -> f32 {
      self.builder.get_data_field_mask::<f32>(18, 1028443341)
    }
    #[inline]
    pub fn set_radar_time_step(&mut self, value: f32)  {
      self.builder.set_data_field_mask::<f32>(18, value, 1028443341u32);
    }
    #[inline]
    pub fn get_community_feature_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(12)
    }
    #[inline]
    pub fn set_community_feature_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(12, value);
    }
    #[inline]
    pub fn get_steer_limit_timer(self) -> f32 {
      self.builder.get_data_field::<f32>(19)
    }
    #[inline]
    pub fn set_steer_limit_timer(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(19, value);
    }
    #[inline]
    pub fn get_lateral_params(self) -> ::capnp::Result<crate::cereal::car_capnp::car_params::lateral_params::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(12), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_lateral_params(&mut self, value: crate::cereal::car_capnp::car_params::lateral_params::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(12), value, false)
    }
    #[inline]
    pub fn init_lateral_params(self, ) -> crate::cereal::car_capnp::car_params::lateral_params::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(12), 0)
    }
    #[inline]
    pub fn has_lateral_params(&self) -> bool {
      !self.builder.is_pointer_field_null(12)
    }
    #[inline]
    pub fn get_fingerprint_source(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::FingerprintSource,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(35))
    }
    #[inline]
    pub fn set_fingerprint_source(&mut self, value: crate::cereal::car_capnp::car_params::FingerprintSource)  {
      self.builder.set_data_field::<u16>(35, value as u16);
    }
    #[inline]
    pub fn get_network_location(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::NetworkLocation,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(40))
    }
    #[inline]
    pub fn set_network_location(&mut self, value: crate::cereal::car_capnp::car_params::NetworkLocation)  {
      self.builder.set_data_field::<u16>(40, value as u16);
    }
    #[inline]
    pub fn get_min_speed_can_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(21)
    }
    #[inline]
    pub fn set_min_speed_can_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(21, value);
    }
    #[inline]
    pub fn get_stopping_decel_rate(self) -> f32 {
      self.builder.get_data_field::<f32>(22)
    }
    #[inline]
    pub fn set_stopping_decel_rate(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(22, value);
    }
    #[inline]
    pub fn get_starting_accel_rate_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(23)
    }
    #[inline]
    pub fn set_starting_accel_rate_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(23, value);
    }
    #[inline]
    pub fn get_max_steering_angle_deg_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
      self.builder.get_data_field::<f32>(24)
    }
    #[inline]
    pub fn set_max_steering_angle_deg_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(24, value);
    }
    #[inline]
    pub fn get_fuzzy_fingerprint(self) -> bool {
      self.builder.get_bool_field(13)
    }
    #[inline]
    pub fn set_fuzzy_fingerprint(&mut self, value: bool)  {
      self.builder.set_bool_field(13, value);
    }
    #[inline]
    pub fn get_enable_bsm(self) -> bool {
      self.builder.get_bool_field(14)
    }
    #[inline]
    pub fn set_enable_bsm(&mut self, value: bool)  {
      self.builder.set_bool_field(14, value);
    }
    #[inline]
    pub fn get_has_stock_camera_d_e_p_r_e_c_a_t_e_d(self) -> bool {
      self.builder.get_bool_field(15)
    }
    #[inline]
    pub fn set_has_stock_camera_d_e_p_r_e_c_a_t_e_d(&mut self, value: bool)  {
      self.builder.set_bool_field(15, value);
    }
    #[inline]
    pub fn get_longitudinal_actuator_delay_upper_bound(self) -> f32 {
      self.builder.get_data_field::<f32>(25)
    }
    #[inline]
    pub fn set_longitudinal_actuator_delay_upper_bound(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(25, value);
    }
    #[inline]
    pub fn get_v_ego_starting(self) -> f32 {
      self.builder.get_data_field::<f32>(26)
    }
    #[inline]
    pub fn set_v_ego_starting(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(26, value);
    }
    #[inline]
    pub fn get_stop_accel(self) -> f32 {
      self.builder.get_data_field::<f32>(27)
    }
    #[inline]
    pub fn set_stop_accel(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(27, value);
    }
    #[inline]
    pub fn get_longitudinal_actuator_delay_lower_bound(self) -> f32 {
      self.builder.get_data_field::<f32>(28)
    }
    #[inline]
    pub fn set_longitudinal_actuator_delay_lower_bound(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(28, value);
    }
    #[inline]
    pub fn get_safety_configs(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_params::safety_config::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(13), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_safety_configs(&mut self, value: ::capnp::struct_list::Reader<'_,crate::cereal::car_capnp::car_params::safety_config::Owned>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(13), value, false)
    }
    #[inline]
    pub fn init_safety_configs(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::cereal::car_capnp::car_params::safety_config::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(13), size)
    }
    #[inline]
    pub fn has_safety_configs(&self) -> bool {
      !self.builder.is_pointer_field_null(13)
    }
    #[inline]
    pub fn get_wheel_speed_factor(self) -> f32 {
      self.builder.get_data_field::<f32>(29)
    }
    #[inline]
    pub fn set_wheel_speed_factor(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(29, value);
    }
    #[inline]
    pub fn get_flags(self) -> u32 {
      self.builder.get_data_field::<u32>(30)
    }
    #[inline]
    pub fn set_flags(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(30, value);
    }
    #[inline]
    pub fn get_alternative_experience(self) -> i16 {
      self.builder.get_data_field::<i16>(41)
    }
    #[inline]
    pub fn set_alternative_experience(&mut self, value: i16)  {
      self.builder.set_data_field::<i16>(41, value);
    }
    #[inline]
    pub fn get_not_car(self) -> bool {
      self.builder.get_bool_field(992)
    }
    #[inline]
    pub fn set_not_car(&mut self, value: bool)  {
      self.builder.set_bool_field(992, value);
    }
    #[inline]
    pub fn get_max_lateral_accel(self) -> f32 {
      self.builder.get_data_field::<f32>(32)
    }
    #[inline]
    pub fn set_max_lateral_accel(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(32, value);
    }
    #[inline]
    pub fn get_auto_resume_sng(self) -> bool {
      self.builder.get_bool_field(993)
    }
    #[inline]
    pub fn set_auto_resume_sng(&mut self, value: bool)  {
      self.builder.set_bool_field(993, value);
    }
    #[inline]
    pub fn get_starting_state(self) -> bool {
      self.builder.get_bool_field(994)
    }
    #[inline]
    pub fn set_starting_state(&mut self, value: bool)  {
      self.builder.set_bool_field(994, value);
    }
    #[inline]
    pub fn get_experimental_longitudinal_available(self) -> bool {
      self.builder.get_bool_field(995)
    }
    #[inline]
    pub fn set_experimental_longitudinal_available(&mut self, value: bool)  {
      self.builder.set_bool_field(995, value);
    }
    #[inline]
    pub fn get_tire_stiffness_factor(self) -> f32 {
      self.builder.get_data_field::<f32>(33)
    }
    #[inline]
    pub fn set_tire_stiffness_factor(&mut self, value: f32)  {
      self.builder.set_data_field::<f32>(33, value);
    }
    #[inline]
    pub fn get_passive(self) -> bool {
      self.builder.get_bool_field(996)
    }
    #[inline]
    pub fn set_passive(&mut self, value: bool)  {
      self.builder.set_bool_field(996, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_longitudinal_tuning(&self) -> crate::cereal::car_capnp::car_params::longitudinal_p_i_d_tuning::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(8))
    }
    pub fn get_lateral_tuning(&self) -> crate::cereal::car_capnp::car_params::lateral_tuning::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
    }
    pub fn get_lateral_params(&self) -> crate::cereal::car_capnp::car_params::lateral_params::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(12))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 1285] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
      ::capnp::word(10, 0, 0, 0, 1, 0, 17, 0),
      ::capnp::word(141, 139, 175, 8, 231, 241, 42, 142),
      ::capnp::word(14, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 231, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 1, 0, 0, 143, 15, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
      ::capnp::word(97, 109, 115, 0, 0, 0, 0, 0),
      ::capnp::word(56, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(201, 176, 86, 96, 156, 52, 54, 232),
      ::capnp::word(105, 0, 0, 0, 106, 0, 0, 0),
      ::capnp::word(163, 221, 137, 28, 59, 178, 129, 181),
      ::capnp::word(105, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(46, 76, 209, 203, 63, 114, 34, 150),
      ::capnp::word(105, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(29, 204, 78, 128, 14, 110, 54, 128),
      ::capnp::word(109, 0, 0, 0, 162, 0, 0, 0),
      ::capnp::word(142, 155, 62, 48, 252, 206, 66, 195),
      ::capnp::word(113, 0, 0, 0, 178, 0, 0, 0),
      ::capnp::word(179, 51, 85, 4, 46, 71, 52, 163),
      ::capnp::word(117, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(18, 106, 97, 40, 63, 30, 21, 157),
      ::capnp::word(121, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(81, 244, 218, 30, 91, 30, 85, 149),
      ::capnp::word(125, 0, 0, 0, 98, 0, 0, 0),
      ::capnp::word(127, 247, 222, 226, 43, 81, 97, 214),
      ::capnp::word(125, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(236, 192, 191, 20, 235, 46, 22, 143),
      ::capnp::word(129, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(206, 89, 147, 12, 24, 86, 43, 150),
      ::capnp::word(133, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(145, 214, 209, 89, 183, 155, 17, 247),
      ::capnp::word(129, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(206, 64, 220, 216, 35, 85, 217, 159),
      ::capnp::word(125, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(81, 60, 131, 42, 104, 227, 153, 255),
      ::capnp::word(129, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(83, 97, 102, 101, 116, 121, 67, 111),
      ::capnp::word(110, 102, 105, 103, 0, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 80),
      ::capnp::word(97, 114, 97, 109, 115, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 80),
      ::capnp::word(73, 68, 84, 117, 110, 105, 110, 103),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 84),
      ::capnp::word(111, 114, 113, 117, 101, 84, 117, 110),
      ::capnp::word(105, 110, 103, 0, 0, 0, 0, 0),
      ::capnp::word(76, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 80, 73, 68, 84),
      ::capnp::word(117, 110, 105, 110, 103, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 73),
      ::capnp::word(78, 68, 73, 84, 117, 110, 105, 110),
      ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 97, 116, 101, 114, 97, 108, 76),
      ::capnp::word(81, 82, 84, 117, 110, 105, 110, 103),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(83, 97, 102, 101, 116, 121, 77, 111),
      ::capnp::word(100, 101, 108, 0, 0, 0, 0, 0),
      ::capnp::word(83, 116, 101, 101, 114, 67, 111, 110),
      ::capnp::word(116, 114, 111, 108, 84, 121, 112, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 114, 97, 110, 115, 109, 105, 115),
      ::capnp::word(115, 105, 111, 110, 84, 121, 112, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(67, 97, 114, 70, 119, 0, 0, 0),
      ::capnp::word(69, 99, 117, 0, 0, 0, 0, 0),
      ::capnp::word(70, 105, 110, 103, 101, 114, 112, 114),
      ::capnp::word(105, 110, 116, 83, 111, 117, 114, 99),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(78, 101, 116, 119, 111, 114, 107, 76),
      ::capnp::word(111, 99, 97, 116, 105, 111, 110, 0),
      ::capnp::word(28, 1, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 7, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 7, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(51, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 7, 0, 0, 250, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 7, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(52, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 7, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 7, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(53, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 7, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 7, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 7, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 7, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 8, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(58, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 8, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(57, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 8, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(24, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(36, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(63, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 8, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(64, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(64, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 8, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(65, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 8, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(92, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(66, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 8, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(67, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 8, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(148, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(68, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 8, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 8, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(205, 8, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(204, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(216, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(213, 8, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(212, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(224, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(221, 8, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(220, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(232, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(229, 8, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(228, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(240, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(237, 8, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(252, 8, 0, 0, 2, 0, 1, 0),
      ::capnp::word(22, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(249, 8, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 8, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(23, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(5, 9, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(24, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 9, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(20, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(32, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(26, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 149, 51, 53, 10, 88, 252, 147),
      ::capnp::word(29, 9, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(27, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 9, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(20, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(29, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 29, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(17, 9, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(28, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(69, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 9, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(32, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(44, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(31, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 9, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(36, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(49, 9, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(60, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(54, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(57, 9, 0, 0, 194, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(32, 0, 0, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 9, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(33, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 35, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 9, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(38, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 36, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 9, 0, 0, 154, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(41, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 37, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 9, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(124, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(42, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 38, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 9, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(55, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 39, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 9, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(43, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 41, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 9, 0, 0, 98, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(59, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 42, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 9, 0, 0, 234, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(152, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(164, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(45, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 43, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(161, 9, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(164, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(176, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(46, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 44, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(173, 9, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(47, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 45, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 9, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(61, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 46, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 9, 0, 0, 218, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(28, 0, 0, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 47, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 9, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(25, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 48, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 9, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(224, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(236, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(48, 0, 0, 0, 35, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 49, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(233, 9, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 9, 0, 0, 2, 0, 1, 0),
      ::capnp::word(49, 0, 0, 0, 40, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 9, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(244, 9, 0, 0, 3, 0, 1, 0),
      ::capnp::word(0, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(60, 0, 0, 0, 21, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 51, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(253, 9, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(12, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(35, 0, 0, 0, 22, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 52, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 10, 0, 0, 146, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(24, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(62, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 53, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 10, 0, 0, 226, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(28, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(40, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(70, 0, 0, 0, 24, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 54, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(37, 10, 0, 0, 242, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(44, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 55, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(53, 10, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(56, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(68, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 56, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(65, 10, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(56, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 57, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 10, 0, 0, 202, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(80, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(92, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(40, 0, 0, 0, 25, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(89, 10, 0, 0, 34, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(112, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(30, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 59, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 10, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(120, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(34, 0, 0, 0, 27, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 60, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 10, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(128, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(39, 0, 0, 0, 28, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 61, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 10, 0, 0, 34, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 62, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 10, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(144, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(50, 0, 0, 0, 29, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 63, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 10, 0, 0, 138, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 30, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 64, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 10, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 41, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 65, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 10, 0, 0, 178, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(188, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(200, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 224, 3, 0, 0),
      ::capnp::word(0, 0, 1, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(197, 10, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 32, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 68, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 10, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(200, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(212, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 225, 3, 0, 0),
      ::capnp::word(0, 0, 1, 0, 69, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(209, 10, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(208, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(220, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(37, 0, 0, 0, 226, 3, 0, 0),
      ::capnp::word(0, 0, 1, 0, 70, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(217, 10, 0, 0, 114, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(216, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(228, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 227, 3, 0, 0),
      ::capnp::word(0, 0, 1, 0, 71, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(225, 10, 0, 0, 18, 1, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(248, 10, 0, 0, 2, 0, 1, 0),
      ::capnp::word(21, 0, 0, 0, 33, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 72, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(245, 10, 0, 0, 162, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(248, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(4, 11, 0, 0, 2, 0, 1, 0),
      ::capnp::word(44, 0, 0, 0, 228, 3, 0, 0),
      ::capnp::word(0, 0, 1, 0, 73, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 11, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(252, 10, 0, 0, 3, 0, 1, 0),
      ::capnp::word(8, 11, 0, 0, 2, 0, 1, 0),
      ::capnp::word(99, 97, 114, 78, 97, 109, 101, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 70, 105, 110, 103, 101),
      ::capnp::word(114, 112, 114, 105, 110, 116, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 97, 98, 108, 101, 71, 97),
      ::capnp::word(115, 73, 110, 116, 101, 114, 99, 101),
      ::capnp::word(112, 116, 111, 114, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 99, 109, 67, 114, 117, 105, 115),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 97, 98, 108, 101, 67, 97),
      ::capnp::word(109, 101, 114, 97, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 97, 98, 108, 101, 68, 115),
      ::capnp::word(117, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 97, 98, 108, 101, 65, 112),
      ::capnp::word(103, 115, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 105, 110, 69, 110, 97, 98, 108),
      ::capnp::word(101, 83, 112, 101, 101, 100, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 105, 110, 83, 116, 101, 101, 114),
      ::capnp::word(83, 112, 101, 101, 100, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 77, 111),
      ::capnp::word(100, 101, 108, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 244, 218, 30, 91, 30, 85, 149),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 80, 97),
      ::capnp::word(114, 97, 109, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 77, 97, 120),
      ::capnp::word(66, 80, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 77, 97, 120),
      ::capnp::word(86, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 97, 115, 77, 97, 120, 66, 80),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(103, 97, 115, 77, 97, 120, 86, 68),
      ::capnp::word(69, 80, 82, 69, 67, 65, 84, 69),
      ::capnp::word(68, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 114, 97, 107, 101, 77, 97, 120),
      ::capnp::word(66, 80, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(98, 114, 97, 107, 101, 77, 97, 120),
      ::capnp::word(86, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 115, 115, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 104, 101, 101, 108, 98, 97, 115),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 101, 110, 116, 101, 114, 84, 111),
      ::capnp::word(70, 114, 111, 110, 116, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 82, 97, 116),
      ::capnp::word(105, 111, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 82, 97, 116),
      ::capnp::word(105, 111, 82, 101, 97, 114, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 111, 116, 97, 116, 105, 111, 110),
      ::capnp::word(97, 108, 73, 110, 101, 114, 116, 105),
      ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 114, 101, 83, 116, 105, 102),
      ::capnp::word(102, 110, 101, 115, 115, 70, 114, 111),
      ::capnp::word(110, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 114, 101, 83, 116, 105, 102),
      ::capnp::word(102, 110, 101, 115, 115, 82, 101, 97),
      ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 84, 117, 110, 105),
      ::capnp::word(110, 103, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(142, 155, 62, 48, 252, 206, 66, 195),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 101, 114, 97, 108, 84),
      ::capnp::word(117, 110, 105, 110, 103, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 76, 105, 109),
      ::capnp::word(105, 116, 65, 108, 101, 114, 116, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 69, 103, 111, 83, 116, 111, 112),
      ::capnp::word(112, 105, 110, 103, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 105, 114, 101, 99, 116, 65, 99),
      ::capnp::word(99, 101, 108, 67, 111, 110, 116, 114),
      ::capnp::word(111, 108, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 111, 112, 112, 105, 110, 103),
      ::capnp::word(67, 111, 110, 116, 114, 111, 108, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 114, 116, 65, 99, 99),
      ::capnp::word(101, 108, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 82, 97, 116),
      ::capnp::word(101, 67, 111, 115, 116, 68, 69, 80),
      ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 67, 111, 110),
      ::capnp::word(116, 114, 111, 108, 84, 121, 112, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(127, 247, 222, 226, 43, 81, 97, 214),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 100, 97, 114, 85, 110, 97),
      ::capnp::word(118, 97, 105, 108, 97, 98, 108, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 65, 99, 116),
      ::capnp::word(117, 97, 116, 111, 114, 68, 101, 108),
      ::capnp::word(97, 121, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 112, 101, 110, 112, 105, 108, 111),
      ::capnp::word(116, 76, 111, 110, 103, 105, 116, 117),
      ::capnp::word(100, 105, 110, 97, 108, 67, 111, 110),
      ::capnp::word(116, 114, 111, 108, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 86, 105, 110, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 115, 80, 97, 110, 100, 97, 66),
      ::capnp::word(108, 97, 99, 107, 68, 69, 80, 82),
      ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 97, 115, 104, 99, 97, 109, 79),
      ::capnp::word(110, 108, 121, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 77, 111),
      ::capnp::word(100, 101, 108, 80, 97, 115, 115, 105),
      ::capnp::word(118, 101, 68, 69, 80, 82, 69, 67),
      ::capnp::word(65, 84, 69, 68, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 244, 218, 30, 91, 30, 85, 149),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 114, 97, 110, 115, 109, 105, 115),
      ::capnp::word(115, 105, 111, 110, 84, 121, 112, 101),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(236, 192, 191, 20, 235, 46, 22, 143),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 97, 114, 70, 119, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(206, 89, 147, 12, 24, 86, 43, 150),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(114, 97, 100, 97, 114, 84, 105, 109),
      ::capnp::word(101, 83, 116, 101, 112, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 205, 204, 76, 61),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(99, 111, 109, 109, 117, 110, 105, 116),
      ::capnp::word(121, 70, 101, 97, 116, 117, 114, 101),
      ::capnp::word(68, 69, 80, 82, 69, 67, 65, 84),
      ::capnp::word(69, 68, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 101, 101, 114, 76, 105, 109),
      ::capnp::word(105, 116, 84, 105, 109, 101, 114, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 97, 116, 101, 114, 97, 108, 80),
      ::capnp::word(97, 114, 97, 109, 115, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(163, 221, 137, 28, 59, 178, 129, 181),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 105, 110, 103, 101, 114, 112, 114),
      ::capnp::word(105, 110, 116, 83, 111, 117, 114, 99),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(206, 64, 220, 216, 35, 85, 217, 159),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 101, 116, 119, 111, 114, 107, 76),
      ::capnp::word(111, 99, 97, 116, 105, 111, 110, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 60, 131, 42, 104, 227, 153, 255),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 105, 110, 83, 112, 101, 101, 100),
      ::capnp::word(67, 97, 110, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 111, 112, 112, 105, 110, 103),
      ::capnp::word(68, 101, 99, 101, 108, 82, 97, 116),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 114, 116, 105, 110, 103),
      ::capnp::word(65, 99, 99, 101, 108, 82, 97, 116),
      ::capnp::word(101, 68, 69, 80, 82, 69, 67, 65),
      ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 120, 83, 116, 101, 101, 114),
      ::capnp::word(105, 110, 103, 65, 110, 103, 108, 101),
      ::capnp::word(68, 101, 103, 68, 69, 80, 82, 69),
      ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 117, 122, 122, 121, 70, 105, 110),
      ::capnp::word(103, 101, 114, 112, 114, 105, 110, 116),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 110, 97, 98, 108, 101, 66, 115),
      ::capnp::word(109, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 97, 115, 83, 116, 111, 99, 107),
      ::capnp::word(67, 97, 109, 101, 114, 97, 68, 69),
      ::capnp::word(80, 82, 69, 67, 65, 84, 69, 68),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 65, 99, 116, 117),
      ::capnp::word(97, 116, 111, 114, 68, 101, 108, 97),
      ::capnp::word(121, 85, 112, 112, 101, 114, 66, 111),
      ::capnp::word(117, 110, 100, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(118, 69, 103, 111, 83, 116, 97, 114),
      ::capnp::word(116, 105, 110, 103, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 111, 112, 65, 99, 99, 101),
      ::capnp::word(108, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 111, 110, 103, 105, 116, 117, 100),
      ::capnp::word(105, 110, 97, 108, 65, 99, 116, 117),
      ::capnp::word(97, 116, 111, 114, 68, 101, 108, 97),
      ::capnp::word(121, 76, 111, 119, 101, 114, 66, 111),
      ::capnp::word(117, 110, 100, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 102, 101, 116, 121, 67, 111),
      ::capnp::word(110, 102, 105, 103, 115, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 176, 86, 96, 156, 52, 54, 232),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(119, 104, 101, 101, 108, 83, 112, 101),
      ::capnp::word(101, 100, 70, 97, 99, 116, 111, 114),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(102, 108, 97, 103, 115, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 108, 116, 101, 114, 110, 97, 116),
      ::capnp::word(105, 118, 101, 69, 120, 112, 101, 114),
      ::capnp::word(105, 101, 110, 99, 101, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(110, 111, 116, 67, 97, 114, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 97, 120, 76, 97, 116, 101, 114),
      ::capnp::word(97, 108, 65, 99, 99, 101, 108, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 117, 116, 111, 82, 101, 115, 117),
      ::capnp::word(109, 101, 83, 110, 103, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 97, 114, 116, 105, 110, 103),
      ::capnp::word(83, 116, 97, 116, 101, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 120, 112, 101, 114, 105, 109, 101),
      ::capnp::word(110, 116, 97, 108, 76, 111, 110, 103),
      ::capnp::word(105, 116, 117, 100, 105, 110, 97, 108),
      ::capnp::word(65, 118, 97, 105, 108, 97, 98, 108),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 114, 101, 83, 116, 105, 102),
      ::capnp::word(102, 110, 101, 115, 115, 70, 97, 99),
      ::capnp::word(116, 111, 114, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 97, 115, 115, 105, 118, 101, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <bool as ::capnp::introspect::Introspect>::introspect(),
        3 => <bool as ::capnp::introspect::Introspect>::introspect(),
        4 => <bool as ::capnp::introspect::Introspect>::introspect(),
        5 => <bool as ::capnp::introspect::Introspect>::introspect(),
        6 => <bool as ::capnp::introspect::Introspect>::introspect(),
        7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <crate::cereal::car_capnp::car_params::SafetyModel as ::capnp::introspect::Introspect>::introspect(),
        10 => <i16 as ::capnp::introspect::Introspect>::introspect(),
        11 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        12 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        13 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        14 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        15 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        16 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
        17 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        18 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        19 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        20 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        21 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        22 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        23 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        24 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        25 => <crate::cereal::car_capnp::car_params::longitudinal_p_i_d_tuning::Owned as ::capnp::introspect::Introspect>::introspect(),
        26 => <crate::cereal::car_capnp::car_params::lateral_tuning::Owned as ::capnp::introspect::Introspect>::introspect(),
        27 => <bool as ::capnp::introspect::Introspect>::introspect(),
        28 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        29 => <bool as ::capnp::introspect::Introspect>::introspect(),
        30 => <bool as ::capnp::introspect::Introspect>::introspect(),
        31 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        32 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        33 => <crate::cereal::car_capnp::car_params::SteerControlType as ::capnp::introspect::Introspect>::introspect(),
        34 => <bool as ::capnp::introspect::Introspect>::introspect(),
        35 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        36 => <bool as ::capnp::introspect::Introspect>::introspect(),
        37 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
        38 => <bool as ::capnp::introspect::Introspect>::introspect(),
        39 => <bool as ::capnp::introspect::Introspect>::introspect(),
        40 => <crate::cereal::car_capnp::car_params::SafetyModel as ::capnp::introspect::Introspect>::introspect(),
        41 => <crate::cereal::car_capnp::car_params::TransmissionType as ::capnp::introspect::Introspect>::introspect(),
        42 => <::capnp::struct_list::Owned<crate::cereal::car_capnp::car_params::car_fw::Owned> as ::capnp::introspect::Introspect>::introspect(),
        43 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        44 => <bool as ::capnp::introspect::Introspect>::introspect(),
        45 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        46 => <crate::cereal::car_capnp::car_params::lateral_params::Owned as ::capnp::introspect::Introspect>::introspect(),
        47 => <crate::cereal::car_capnp::car_params::FingerprintSource as ::capnp::introspect::Introspect>::introspect(),
        48 => <crate::cereal::car_capnp::car_params::NetworkLocation as ::capnp::introspect::Introspect>::introspect(),
        49 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        50 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        51 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        52 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        53 => <bool as ::capnp::introspect::Introspect>::introspect(),
        54 => <bool as ::capnp::introspect::Introspect>::introspect(),
        55 => <bool as ::capnp::introspect::Introspect>::introspect(),
        56 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        57 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        58 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        59 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        60 => <::capnp::struct_list::Owned<crate::cereal::car_capnp::car_params::safety_config::Owned> as ::capnp::introspect::Introspect>::introspect(),
        61 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        62 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        63 => <i16 as ::capnp::introspect::Introspect>::introspect(),
        64 => <bool as ::capnp::introspect::Introspect>::introspect(),
        65 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        66 => <bool as ::capnp::introspect::Introspect>::introspect(),
        67 => <bool as ::capnp::introspect::Introspect>::introspect(),
        68 => <bool as ::capnp::introspect::Introspect>::introspect(),
        69 => <f32 as ::capnp::introspect::Introspect>::introspect(),
        70 => <bool as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[63,66,15,16,1,42,0,37,19,44,39,29,6,54,4,5,2,68,47,62,53,13,14,55,38,46,26,59,56,25,17,65,52,7,49,8,48,64,36,70,3,43,34,22,60,9,40,10,31,51,67,35,33,27,45,11,12,32,20,21,58,30,50,69,23,24,41,57,28,61,18];
    pub const TYPE_ID: u64 = 0x8c69_3724_90aa_a9da;
  }

  pub mod safety_config {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_safety_model(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SafetyModel,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_safety_param_d_e_p_r_e_c_a_t_e_d(self) -> i16 {
        self.reader.get_data_field::<i16>(1)
      }
      #[inline]
      pub fn get_safety_param2_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
        self.reader.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn get_safety_param(self) -> u16 {
        self.reader.get_data_field::<u16>(4)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_safety_model(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::SafetyModel,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_safety_model(&mut self, value: crate::cereal::car_capnp::car_params::SafetyModel)  {
        self.builder.set_data_field::<u16>(0, value as u16);
      }
      #[inline]
      pub fn get_safety_param_d_e_p_r_e_c_a_t_e_d(self) -> i16 {
        self.builder.get_data_field::<i16>(1)
      }
      #[inline]
      pub fn set_safety_param_d_e_p_r_e_c_a_t_e_d(&mut self, value: i16)  {
        self.builder.set_data_field::<i16>(1, value);
      }
      #[inline]
      pub fn get_safety_param2_d_e_p_r_e_c_a_t_e_d(self) -> u32 {
        self.builder.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn set_safety_param2_d_e_p_r_e_c_a_t_e_d(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(1, value);
      }
      #[inline]
      pub fn get_safety_param(self) -> u16 {
        self.builder.get_data_field::<u16>(4)
      }
      #[inline]
      pub fn set_safety_param(&mut self, value: u16)  {
        self.builder.set_data_field::<u16>(4, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 85] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(201, 176, 86, 96, 156, 52, 54, 232),
        ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 10, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 231, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
        ::capnp::word(97, 109, 115, 46, 83, 97, 102, 101),
        ::capnp::word(116, 121, 67, 111, 110, 102, 105, 103),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(96, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(108, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 0, 0, 0, 178, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 0, 0, 0, 186, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(132, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(129, 0, 0, 0, 98, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(128, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(140, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 97, 102, 101, 116, 121, 77, 111),
        ::capnp::word(100, 101, 108, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(81, 244, 218, 30, 91, 30, 85, 149),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 102, 101, 116, 121, 80, 97),
        ::capnp::word(114, 97, 109, 68, 69, 80, 82, 69),
        ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 102, 101, 116, 121, 80, 97),
        ::capnp::word(114, 97, 109, 50, 68, 69, 80, 82),
        ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 97, 102, 101, 116, 121, 80, 97),
        ::capnp::word(114, 97, 109, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <crate::cereal::car_capnp::car_params::SafetyModel as ::capnp::introspect::Introspect>::introspect(),
          1 => <i16 as ::capnp::introspect::Introspect>::introspect(),
          2 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <u16 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,3,2,1];
      pub const TYPE_ID: u64 = 0xe836_349c_6056_b0c9;
    }
  }

  pub mod lateral_params {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_torque_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_torque_b_p(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_torque_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,i32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_torque_v(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 2 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_torque_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_torque_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<i32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_torque_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_torque_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_torque_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,i32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_torque_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<i32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_torque_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,i32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_torque_v(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 58] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(163, 221, 137, 28, 59, 178, 129, 181),
        ::capnp::word(20, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
        ::capnp::word(97, 109, 115, 46, 76, 97, 116, 101),
        ::capnp::word(114, 97, 108, 80, 97, 114, 97, 109),
        ::capnp::word(115, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 0, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(60, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(88, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(116, 111, 114, 113, 117, 101, 66, 80),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 114, 113, 117, 101, 86, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<i32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<i32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
      pub const TYPE_ID: u64 = 0xb581_b23b_1c89_dda3;
    }
  }

  pub mod lateral_p_i_d_tuning {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_kp_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_kp_b_p(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_kp_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_kp_v(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_ki_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_ki_b_p(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_ki_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_ki_v(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_kf(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 4 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_kp_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_kp_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_kp_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_kp_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_kp_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_kp_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_kp_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_kp_v(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_ki_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_ki_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_ki_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_ki_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_ki_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_ki_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_ki_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_ki_v(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_kf(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_kf(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 110] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(46, 76, 209, 203, 63, 114, 34, 150),
        ::capnp::word(20, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
        ::capnp::word(4, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 31, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
        ::capnp::word(97, 109, 115, 46, 76, 97, 116, 101),
        ::capnp::word(114, 97, 108, 80, 73, 68, 84, 117),
        ::capnp::word(110, 105, 110, 103, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(20, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(125, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(120, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(148, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(160, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(188, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(185, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(180, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(208, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(205, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(200, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(212, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(107, 112, 66, 80, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 112, 86, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 105, 66, 80, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 105, 86, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 102, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[4,2,3,0,1];
      pub const TYPE_ID: u64 = 0x9622_723f_cbd1_4c2e;
    }
  }

  pub mod lateral_torque_tuning {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_use_steering_angle(self) -> bool {
        self.reader.get_bool_field(0)
      }
      #[inline]
      pub fn get_kp(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_ki(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_friction(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_kf(self) -> f32 {
        self.reader.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn get_steering_angle_deadzone_deg(self) -> f32 {
        self.reader.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn get_lat_accel_factor(self) -> f32 {
        self.reader.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn get_lat_accel_offset(self) -> f32 {
        self.reader.get_data_field::<f32>(7)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 4, pointers: 0 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_use_steering_angle(self) -> bool {
        self.builder.get_bool_field(0)
      }
      #[inline]
      pub fn set_use_steering_angle(&mut self, value: bool)  {
        self.builder.set_bool_field(0, value);
      }
      #[inline]
      pub fn get_kp(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_kp(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_ki(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_ki(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_friction(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_friction(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_kf(self) -> f32 {
        self.builder.get_data_field::<f32>(4)
      }
      #[inline]
      pub fn set_kf(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(4, value);
      }
      #[inline]
      pub fn get_steering_angle_deadzone_deg(self) -> f32 {
        self.builder.get_data_field::<f32>(5)
      }
      #[inline]
      pub fn set_steering_angle_deadzone_deg(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(5, value);
      }
      #[inline]
      pub fn get_lat_accel_factor(self) -> f32 {
        self.builder.get_data_field::<f32>(6)
      }
      #[inline]
      pub fn set_lat_accel_factor(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(6, value);
      }
      #[inline]
      pub fn get_lat_accel_offset(self) -> f32 {
        self.builder.get_data_field::<f32>(7)
      }
      #[inline]
      pub fn set_lat_accel_offset(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(7, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 147] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(29, 204, 78, 128, 14, 110, 54, 128),
        ::capnp::word(20, 0, 0, 0, 1, 0, 4, 0),
        ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
        ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 66, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 199, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
        ::capnp::word(97, 109, 115, 46, 76, 97, 116, 101),
        ::capnp::word(114, 97, 108, 84, 111, 114, 113, 117),
        ::capnp::word(101, 84, 117, 110, 105, 110, 103, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(32, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 0, 0, 0, 138, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(228, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(225, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(220, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(232, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(229, 0, 0, 0, 74, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(228, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(232, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 0, 0, 0, 202, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(248, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(4, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(12, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(117, 115, 101, 83, 116, 101, 101, 114),
        ::capnp::word(105, 110, 103, 65, 110, 103, 108, 101),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 112, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 105, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 114, 105, 99, 116, 105, 111, 110),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 102, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 101, 101, 114, 105, 110, 103),
        ::capnp::word(65, 110, 103, 108, 101, 68, 101, 97),
        ::capnp::word(100, 122, 111, 110, 101, 68, 101, 103),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 116, 65, 99, 99, 101, 108),
        ::capnp::word(70, 97, 99, 116, 111, 114, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 97, 116, 65, 99, 99, 101, 108),
        ::capnp::word(79, 102, 102, 115, 101, 116, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <bool as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          7 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[3,4,2,1,6,7,5,0];
      pub const TYPE_ID: u64 = 0x8036_6e0e_804e_cc1d;
    }
  }

  pub mod longitudinal_p_i_d_tuning {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_kp_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_kp_b_p(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_kp_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_kp_v(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_ki_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_ki_b_p(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_ki_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_ki_v(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_deadzone_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_deadzone_b_p(&self) -> bool {
        !self.reader.get_pointer_field(4).is_null()
      }
      #[inline]
      pub fn get_deadzone_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_deadzone_v(&self) -> bool {
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn get_kf(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 6 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_kp_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_kp_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_kp_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_kp_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_kp_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_kp_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_kp_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_kp_v(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_ki_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_ki_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_ki_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_ki_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_ki_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_ki_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_ki_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_ki_v(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_deadzone_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_deadzone_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
      }
      #[inline]
      pub fn init_deadzone_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
      }
      #[inline]
      pub fn has_deadzone_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(4)
      }
      #[inline]
      pub fn get_deadzone_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_deadzone_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_deadzone_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
      }
      #[inline]
      pub fn has_deadzone_v(&self) -> bool {
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn get_kf(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_kf(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 151] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(142, 155, 62, 48, 252, 206, 66, 195),
        ::capnp::word(20, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
        ::capnp::word(6, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 82, 1, 0, 0),
        ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(37, 0, 0, 0, 143, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
        ::capnp::word(97, 109, 115, 46, 76, 111, 110, 103),
        ::capnp::word(105, 116, 117, 100, 105, 110, 97, 108),
        ::capnp::word(80, 73, 68, 84, 117, 110, 105, 110),
        ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(28, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(181, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(176, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(204, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(201, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(196, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 0, 0, 0, 42, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(236, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 1, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(32, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(28, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(56, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(53, 1, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(48, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(60, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(107, 112, 66, 80, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 112, 86, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 105, 66, 80, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 105, 86, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 97, 100, 122, 111, 110, 101),
        ::capnp::word(66, 80, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 101, 97, 100, 122, 111, 110, 101),
        ::capnp::word(86, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 102, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          2 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          6 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[4,5,6,2,3,0,1];
      pub const TYPE_ID: u64 = 0xc342_cefc_303e_9b8e;
    }
  }

  pub mod lateral_i_n_d_i_tuning {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_outer_loop_gain_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_inner_loop_gain_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_time_constant_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_actuator_effectiveness_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.reader.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn get_outer_loop_gain_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_outer_loop_gain_b_p(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_outer_loop_gain_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_outer_loop_gain_v(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_inner_loop_gain_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_inner_loop_gain_b_p(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_inner_loop_gain_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_inner_loop_gain_v(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_time_constant_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_time_constant_b_p(&self) -> bool {
        !self.reader.get_pointer_field(4).is_null()
      }
      #[inline]
      pub fn get_time_constant_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_time_constant_v(&self) -> bool {
        !self.reader.get_pointer_field(5).is_null()
      }
      #[inline]
      pub fn get_actuator_effectiveness_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_actuator_effectiveness_b_p(&self) -> bool {
        !self.reader.get_pointer_field(6).is_null()
      }
      #[inline]
      pub fn get_actuator_effectiveness_v(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(7), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_actuator_effectiveness_v(&self) -> bool {
        !self.reader.get_pointer_field(7).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 8 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_outer_loop_gain_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_outer_loop_gain_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_inner_loop_gain_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_inner_loop_gain_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_time_constant_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_time_constant_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_actuator_effectiveness_d_e_p_r_e_c_a_t_e_d(self) -> f32 {
        self.builder.get_data_field::<f32>(3)
      }
      #[inline]
      pub fn set_actuator_effectiveness_d_e_p_r_e_c_a_t_e_d(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(3, value);
      }
      #[inline]
      pub fn get_outer_loop_gain_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_outer_loop_gain_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_outer_loop_gain_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_outer_loop_gain_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_outer_loop_gain_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_outer_loop_gain_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_outer_loop_gain_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_outer_loop_gain_v(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_inner_loop_gain_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_inner_loop_gain_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_inner_loop_gain_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_inner_loop_gain_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_inner_loop_gain_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_inner_loop_gain_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_inner_loop_gain_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_inner_loop_gain_v(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_time_constant_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_time_constant_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
      }
      #[inline]
      pub fn init_time_constant_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
      }
      #[inline]
      pub fn has_time_constant_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(4)
      }
      #[inline]
      pub fn get_time_constant_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(5), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_time_constant_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(5), value, false)
      }
      #[inline]
      pub fn init_time_constant_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
      }
      #[inline]
      pub fn has_time_constant_v(&self) -> bool {
        !self.builder.is_pointer_field_null(5)
      }
      #[inline]
      pub fn get_actuator_effectiveness_b_p(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(6), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_actuator_effectiveness_b_p(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(6), value, false)
      }
      #[inline]
      pub fn init_actuator_effectiveness_b_p(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
      }
      #[inline]
      pub fn has_actuator_effectiveness_b_p(&self) -> bool {
        !self.builder.is_pointer_field_null(6)
      }
      #[inline]
      pub fn get_actuator_effectiveness_v(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(7), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_actuator_effectiveness_v(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(7), value, false)
      }
      #[inline]
      pub fn init_actuator_effectiveness_v(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), size)
      }
      #[inline]
      pub fn has_actuator_effectiveness_v(&self) -> bool {
        !self.builder.is_pointer_field_null(7)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 250] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(179, 51, 85, 4, 46, 71, 52, 163),
        ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
        ::capnp::word(8, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 50, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 167, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
        ::capnp::word(97, 109, 115, 46, 76, 97, 116, 101),
        ::capnp::word(114, 97, 108, 73, 78, 68, 73, 84),
        ::capnp::word(117, 110, 105, 110, 103, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(48, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 1, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(68, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(80, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(77, 1, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(80, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(92, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(89, 1, 0, 0, 186, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(11, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 1, 0, 0, 2, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(144, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(141, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(140, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(168, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(165, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(164, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(192, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(189, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(188, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 1, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(240, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(237, 1, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(236, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 2, 0, 0, 194, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 2, 0, 0, 186, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 2, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 2, 0, 0, 2, 0, 1, 0),
        ::capnp::word(111, 117, 116, 101, 114, 76, 111, 111),
        ::capnp::word(112, 71, 97, 105, 110, 68, 69, 80),
        ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 110, 110, 101, 114, 76, 111, 111),
        ::capnp::word(112, 71, 97, 105, 110, 68, 69, 80),
        ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 105, 109, 101, 67, 111, 110, 115),
        ::capnp::word(116, 97, 110, 116, 68, 69, 80, 82),
        ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 116, 117, 97, 116, 111, 114),
        ::capnp::word(69, 102, 102, 101, 99, 116, 105, 118),
        ::capnp::word(101, 110, 101, 115, 115, 68, 69, 80),
        ::capnp::word(82, 69, 67, 65, 84, 69, 68, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 117, 116, 101, 114, 76, 111, 111),
        ::capnp::word(112, 71, 97, 105, 110, 66, 80, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 117, 116, 101, 114, 76, 111, 111),
        ::capnp::word(112, 71, 97, 105, 110, 86, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 110, 110, 101, 114, 76, 111, 111),
        ::capnp::word(112, 71, 97, 105, 110, 66, 80, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 110, 110, 101, 114, 76, 111, 111),
        ::capnp::word(112, 71, 97, 105, 110, 86, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 105, 109, 101, 67, 111, 110, 115),
        ::capnp::word(116, 97, 110, 116, 66, 80, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 105, 109, 101, 67, 111, 110, 115),
        ::capnp::word(116, 97, 110, 116, 86, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 116, 117, 97, 116, 111, 114),
        ::capnp::word(69, 102, 102, 101, 99, 116, 105, 118),
        ::capnp::word(101, 110, 101, 115, 115, 66, 80, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 99, 116, 117, 97, 116, 111, 114),
        ::capnp::word(69, 102, 102, 101, 99, 116, 105, 118),
        ::capnp::word(101, 110, 101, 115, 115, 86, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          7 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          8 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          9 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          10 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          11 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[10,3,11,6,1,7,4,0,5,8,2,9];
      pub const TYPE_ID: u64 = 0xa334_472e_0455_33b3;
    }
  }

  pub mod lateral_l_q_r_tuning {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_scale(self) -> f32 {
        self.reader.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn get_ki(self) -> f32 {
        self.reader.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn get_dc_gain(self) -> f32 {
        self.reader.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn get_a(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_a(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_b(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_b(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_c(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_c(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_k(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_k(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
      #[inline]
      pub fn get_l(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a,f32>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_l(&self) -> bool {
        !self.reader.get_pointer_field(4).is_null()
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 5 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_scale(self) -> f32 {
        self.builder.get_data_field::<f32>(0)
      }
      #[inline]
      pub fn set_scale(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(0, value);
      }
      #[inline]
      pub fn get_ki(self) -> f32 {
        self.builder.get_data_field::<f32>(1)
      }
      #[inline]
      pub fn set_ki(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(1, value);
      }
      #[inline]
      pub fn get_dc_gain(self) -> f32 {
        self.builder.get_data_field::<f32>(2)
      }
      #[inline]
      pub fn set_dc_gain(&mut self, value: f32)  {
        self.builder.set_data_field::<f32>(2, value);
      }
      #[inline]
      pub fn get_a(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_a(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_a(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
      }
      #[inline]
      pub fn has_a(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_b(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_b(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_b(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_b(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_c(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_c(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_c(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      #[inline]
      pub fn has_c(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_k(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(3), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_k(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(3), value, false)
      }
      #[inline]
      pub fn init_k(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
      }
      #[inline]
      pub fn has_k(&self) -> bool {
        !self.builder.is_pointer_field_null(3)
      }
      #[inline]
      pub fn get_l(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a,f32>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(4), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_l(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::primitive_list::Owned<f32>>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(4), value, false)
      }
      #[inline]
      pub fn init_l(self, size: u32) -> ::capnp::primitive_list::Builder<'a,f32> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
      }
      #[inline]
      pub fn has_l(&self) -> bool {
        !self.builder.is_pointer_field_null(4)
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 159] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(18, 106, 97, 40, 63, 30, 21, 157),
        ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
        ::capnp::word(5, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
        ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 199, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
        ::capnp::word(97, 109, 115, 46, 76, 97, 116, 101),
        ::capnp::word(114, 97, 108, 76, 81, 82, 84, 117),
        ::capnp::word(110, 105, 110, 103, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(32, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(209, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(204, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(216, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(213, 0, 0, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(208, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(220, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(217, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(212, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(224, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(221, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(216, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(241, 0, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(236, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(8, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(20, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 1, 0, 0, 18, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(115, 99, 97, 108, 101, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 105, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 99, 71, 97, 105, 110, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(107, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          1 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          2 => <f32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          4 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          6 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          7 => <::capnp::primitive_list::Owned<f32> as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[3,4,5,2,6,1,7,0];
      pub const TYPE_ID: u64 = 0x9d15_1e3f_2861_6a12;
    }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum SafetyModel {
    Silent = 0,
    HondaNidec = 1,
    Toyota = 2,
    Elm327 = 3,
    Gm = 4,
    HondaBoschGiraffe = 5,
    Ford = 6,
    Cadillac = 7,
    Hyundai = 8,
    Chrysler = 9,
    Tesla = 10,
    Subaru = 11,
    GmPassive = 12,
    Mazda = 13,
    Nissan = 14,
    Volkswagen = 15,
    ToyotaIpas = 16,
    AllOutput = 17,
    GmAscm = 18,
    NoOutput = 19,
    HondaBosch = 20,
    VolkswagenPq = 21,
    SubaruPreglobal = 22,
    HyundaiLegacy = 23,
    HyundaiCommunity = 24,
    VolkswagenMlb = 25,
    Hongqi = 26,
    Body = 27,
    HyundaiCanfd = 28,
    VolkswagenMqbEvo = 29,
    ChryslerCusw = 30,
    Psa = 31,
  }

  impl ::capnp::introspect::Introspect for SafetyModel {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &safety_model::ENCODED_NODE, annotation_types: safety_model::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<SafetyModel> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: SafetyModel) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &safety_model::ENCODED_NODE, annotation_types: safety_model::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for SafetyModel {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <SafetyModel as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Silent),
        1 => ::core::result::Result::Ok(Self::HondaNidec),
        2 => ::core::result::Result::Ok(Self::Toyota),
        3 => ::core::result::Result::Ok(Self::Elm327),
        4 => ::core::result::Result::Ok(Self::Gm),
        5 => ::core::result::Result::Ok(Self::HondaBoschGiraffe),
        6 => ::core::result::Result::Ok(Self::Ford),
        7 => ::core::result::Result::Ok(Self::Cadillac),
        8 => ::core::result::Result::Ok(Self::Hyundai),
        9 => ::core::result::Result::Ok(Self::Chrysler),
        10 => ::core::result::Result::Ok(Self::Tesla),
        11 => ::core::result::Result::Ok(Self::Subaru),
        12 => ::core::result::Result::Ok(Self::GmPassive),
        13 => ::core::result::Result::Ok(Self::Mazda),
        14 => ::core::result::Result::Ok(Self::Nissan),
        15 => ::core::result::Result::Ok(Self::Volkswagen),
        16 => ::core::result::Result::Ok(Self::ToyotaIpas),
        17 => ::core::result::Result::Ok(Self::AllOutput),
        18 => ::core::result::Result::Ok(Self::GmAscm),
        19 => ::core::result::Result::Ok(Self::NoOutput),
        20 => ::core::result::Result::Ok(Self::HondaBosch),
        21 => ::core::result::Result::Ok(Self::VolkswagenPq),
        22 => ::core::result::Result::Ok(Self::SubaruPreglobal),
        23 => ::core::result::Result::Ok(Self::HyundaiLegacy),
        24 => ::core::result::Result::Ok(Self::HyundaiCommunity),
        25 => ::core::result::Result::Ok(Self::VolkswagenMlb),
        26 => ::core::result::Result::Ok(Self::Hongqi),
        27 => ::core::result::Result::Ok(Self::Body),
        28 => ::core::result::Result::Ok(Self::HyundaiCanfd),
        29 => ::core::result::Result::Ok(Self::VolkswagenMqbEvo),
        30 => ::core::result::Result::Ok(Self::ChryslerCusw),
        31 => ::core::result::Result::Ok(Self::Psa),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<SafetyModel> for u16 {
    #[inline]
    fn from(x: SafetyModel) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for SafetyModel {
    const TYPE_ID: u64 = 0x9555_1e5b_1eda_f451u64;
  }
  mod safety_model {
  pub static ENCODED_NODE: [::capnp::Word; 167] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(81, 244, 218, 30, 91, 30, 85, 149),
    ::capnp::word(20, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
    ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 7, 3, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
    ::capnp::word(97, 109, 115, 46, 83, 97, 102, 101),
    ::capnp::word(116, 121, 77, 111, 100, 101, 108, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(128, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(121, 1, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(113, 1, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 1, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 1, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(93, 1, 0, 0, 26, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 1, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(85, 1, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(77, 1, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(73, 1, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(65, 1, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(61, 1, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 1, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 1, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 1, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 1, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 1, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 1, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 1, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 1, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(19, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 1, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(20, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 1, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(253, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(22, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(249, 0, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(23, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(245, 0, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(24, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(241, 0, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(241, 0, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(26, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(237, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(27, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(229, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(28, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(221, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(217, 0, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(30, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(217, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(31, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(213, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(115, 105, 108, 101, 110, 116, 0, 0),
    ::capnp::word(104, 111, 110, 100, 97, 78, 105, 100),
    ::capnp::word(101, 99, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 111, 121, 111, 116, 97, 0, 0),
    ::capnp::word(101, 108, 109, 51, 50, 55, 0, 0),
    ::capnp::word(103, 109, 0, 0, 0, 0, 0, 0),
    ::capnp::word(104, 111, 110, 100, 97, 66, 111, 115),
    ::capnp::word(99, 104, 71, 105, 114, 97, 102, 102),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 111, 114, 100, 0, 0, 0, 0),
    ::capnp::word(99, 97, 100, 105, 108, 108, 97, 99),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(104, 121, 117, 110, 100, 97, 105, 0),
    ::capnp::word(99, 104, 114, 121, 115, 108, 101, 114),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 101, 115, 108, 97, 0, 0, 0),
    ::capnp::word(115, 117, 98, 97, 114, 117, 0, 0),
    ::capnp::word(103, 109, 80, 97, 115, 115, 105, 118),
    ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 97, 122, 100, 97, 0, 0, 0),
    ::capnp::word(110, 105, 115, 115, 97, 110, 0, 0),
    ::capnp::word(118, 111, 108, 107, 115, 119, 97, 103),
    ::capnp::word(101, 110, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 111, 121, 111, 116, 97, 73, 112),
    ::capnp::word(97, 115, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 108, 108, 79, 117, 116, 112, 117),
    ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 109, 65, 115, 99, 109, 0, 0),
    ::capnp::word(110, 111, 79, 117, 116, 112, 117, 116),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(104, 111, 110, 100, 97, 66, 111, 115),
    ::capnp::word(99, 104, 0, 0, 0, 0, 0, 0),
    ::capnp::word(118, 111, 108, 107, 115, 119, 97, 103),
    ::capnp::word(101, 110, 80, 113, 0, 0, 0, 0),
    ::capnp::word(115, 117, 98, 97, 114, 117, 80, 114),
    ::capnp::word(101, 103, 108, 111, 98, 97, 108, 0),
    ::capnp::word(104, 121, 117, 110, 100, 97, 105, 76),
    ::capnp::word(101, 103, 97, 99, 121, 0, 0, 0),
    ::capnp::word(104, 121, 117, 110, 100, 97, 105, 67),
    ::capnp::word(111, 109, 109, 117, 110, 105, 116, 121),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(118, 111, 108, 107, 115, 119, 97, 103),
    ::capnp::word(101, 110, 77, 108, 98, 0, 0, 0),
    ::capnp::word(104, 111, 110, 103, 113, 105, 0, 0),
    ::capnp::word(98, 111, 100, 121, 0, 0, 0, 0),
    ::capnp::word(104, 121, 117, 110, 100, 97, 105, 67),
    ::capnp::word(97, 110, 102, 100, 0, 0, 0, 0),
    ::capnp::word(118, 111, 108, 107, 115, 119, 97, 103),
    ::capnp::word(101, 110, 77, 113, 98, 69, 118, 111),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 104, 114, 121, 115, 108, 101, 114),
    ::capnp::word(67, 117, 115, 119, 0, 0, 0, 0),
    ::capnp::word(112, 115, 97, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum SteerControlType {
    Torque = 0,
    Angle = 1,
    CurvatureDEPRECATED = 2,
  }

  impl ::capnp::introspect::Introspect for SteerControlType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &steer_control_type::ENCODED_NODE, annotation_types: steer_control_type::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<SteerControlType> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: SteerControlType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &steer_control_type::ENCODED_NODE, annotation_types: steer_control_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for SteerControlType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <SteerControlType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Torque),
        1 => ::core::result::Result::Ok(Self::Angle),
        2 => ::core::result::Result::Ok(Self::CurvatureDEPRECATED),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<SteerControlType> for u16 {
    #[inline]
    fn from(x: SteerControlType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for SteerControlType {
    const TYPE_ID: u64 = 0xd661_512b_e2de_f77fu64;
  }
  mod steer_control_type {
  pub static ENCODED_NODE: [::capnp::Word; 33] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(127, 247, 222, 226, 43, 81, 97, 214),
    ::capnp::word(20, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 79, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
    ::capnp::word(97, 109, 115, 46, 83, 116, 101, 101),
    ::capnp::word(114, 67, 111, 110, 116, 114, 111, 108),
    ::capnp::word(84, 121, 112, 101, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 162, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 111, 114, 113, 117, 101, 0, 0),
    ::capnp::word(97, 110, 103, 108, 101, 0, 0, 0),
    ::capnp::word(99, 117, 114, 118, 97, 116, 117, 114),
    ::capnp::word(101, 68, 69, 80, 82, 69, 67, 65),
    ::capnp::word(84, 69, 68, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum TransmissionType {
    Unknown = 0,
    Automatic = 1,
    Manual = 2,
    Direct = 3,
    Cvt = 4,
  }

  impl ::capnp::introspect::Introspect for TransmissionType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &transmission_type::ENCODED_NODE, annotation_types: transmission_type::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<TransmissionType> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: TransmissionType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &transmission_type::ENCODED_NODE, annotation_types: transmission_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for TransmissionType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <TransmissionType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Unknown),
        1 => ::core::result::Result::Ok(Self::Automatic),
        2 => ::core::result::Result::Ok(Self::Manual),
        3 => ::core::result::Result::Ok(Self::Direct),
        4 => ::core::result::Result::Ok(Self::Cvt),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<TransmissionType> for u16 {
    #[inline]
    fn from(x: TransmissionType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for TransmissionType {
    const TYPE_ID: u64 = 0x8f16_2eeb_14bf_c0ecu64;
  }
  mod transmission_type {
  pub static ENCODED_NODE: [::capnp::Word; 40] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(236, 192, 191, 20, 235, 46, 22, 143),
    ::capnp::word(20, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 42, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 127, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
    ::capnp::word(97, 109, 115, 46, 84, 114, 97, 110),
    ::capnp::word(115, 109, 105, 115, 115, 105, 111, 110),
    ::capnp::word(84, 121, 112, 101, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(53, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(45, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(41, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
    ::capnp::word(97, 117, 116, 111, 109, 97, 116, 105),
    ::capnp::word(99, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(109, 97, 110, 117, 97, 108, 0, 0),
    ::capnp::word(100, 105, 114, 101, 99, 116, 0, 0),
    ::capnp::word(99, 118, 116, 0, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod car_fw {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_ecu(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::Ecu,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_fw_version(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_fw_version(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_address(self) -> u32 {
        self.reader.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn get_sub_address(self) -> u8 {
        self.reader.get_data_field::<u8>(2)
      }
      #[inline]
      pub fn get_response_address(self) -> u32 {
        self.reader.get_data_field::<u32>(2)
      }
      #[inline]
      pub fn get_request(self) -> ::capnp::Result<::capnp::data_list::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_request(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_brand(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_brand(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_bus(self) -> u8 {
        self.reader.get_data_field::<u8>(3)
      }
      #[inline]
      pub fn get_logging(self) -> bool {
        self.reader.get_bool_field(96)
      }
      #[inline]
      pub fn get_obd_multiplexing(self) -> bool {
        self.reader.get_bool_field(97)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 3 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_ecu(self) -> ::core::result::Result<crate::cereal::car_capnp::car_params::Ecu,::capnp::NotInSchema> {
        ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_ecu(&mut self, value: crate::cereal::car_capnp::car_params::Ecu)  {
        self.builder.set_data_field::<u16>(0, value as u16);
      }
      #[inline]
      pub fn get_fw_version(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_fw_version(&mut self, value: ::capnp::data::Reader<'_>)  {
        self.builder.reborrow().get_pointer_field(0).set_data(value);
      }
      #[inline]
      pub fn init_fw_version(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(0).init_data(size)
      }
      #[inline]
      pub fn has_fw_version(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_address(self) -> u32 {
        self.builder.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn set_address(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(1, value);
      }
      #[inline]
      pub fn get_sub_address(self) -> u8 {
        self.builder.get_data_field::<u8>(2)
      }
      #[inline]
      pub fn set_sub_address(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(2, value);
      }
      #[inline]
      pub fn get_response_address(self) -> u32 {
        self.builder.get_data_field::<u32>(2)
      }
      #[inline]
      pub fn set_response_address(&mut self, value: u32)  {
        self.builder.set_data_field::<u32>(2, value);
      }
      #[inline]
      pub fn get_request(self) -> ::capnp::Result<::capnp::data_list::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_request(&mut self, value: ::capnp::data_list::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_request(self, size: u32) -> ::capnp::data_list::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      #[inline]
      pub fn has_request(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
      #[inline]
      pub fn get_brand(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
      }
      #[inline]
      pub fn set_brand(&mut self, value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>)  {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false).unwrap()
      }
      #[inline]
      pub fn init_brand(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      #[inline]
      pub fn has_brand(&self) -> bool {
        !self.builder.is_pointer_field_null(2)
      }
      #[inline]
      pub fn get_bus(self) -> u8 {
        self.builder.get_data_field::<u8>(3)
      }
      #[inline]
      pub fn set_bus(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(3, value);
      }
      #[inline]
      pub fn get_logging(self) -> bool {
        self.builder.get_bool_field(96)
      }
      #[inline]
      pub fn set_logging(&mut self, value: bool)  {
        self.builder.set_bool_field(96, value);
      }
      #[inline]
      pub fn get_obd_multiplexing(self) -> bool {
        self.builder.get_bool_field(97)
      }
      #[inline]
      pub fn set_obd_multiplexing(&mut self, value: bool)  {
        self.builder.set_bool_field(97, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 176] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(206, 89, 147, 12, 24, 86, 43, 150),
        ::capnp::word(20, 0, 0, 0, 1, 0, 2, 0),
        ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
        ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 210, 0, 0, 0),
        ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 55, 2, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
        ::capnp::word(97, 109, 115, 46, 67, 97, 114, 70),
        ::capnp::word(119, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(9, 1, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(4, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(16, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 1, 0, 0, 82, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(24, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 1, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(28, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 1, 0, 0, 90, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(24, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(36, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(4, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(33, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(32, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(44, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 1, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(64, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(6, 0, 0, 0, 2, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(61, 1, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(56, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(68, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(7, 0, 0, 0, 3, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(65, 1, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(60, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(72, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 96, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(69, 1, 0, 0, 66, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(64, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(76, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(9, 0, 0, 0, 97, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(73, 1, 0, 0, 130, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(72, 1, 0, 0, 3, 0, 1, 0),
        ::capnp::word(84, 1, 0, 0, 2, 0, 1, 0),
        ::capnp::word(101, 99, 117, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(145, 214, 209, 89, 183, 155, 17, 247),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(102, 119, 86, 101, 114, 115, 105, 111),
        ::capnp::word(110, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 100, 100, 114, 101, 115, 115, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 117, 98, 65, 100, 100, 114, 101),
        ::capnp::word(115, 115, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 101, 115, 112, 111, 110, 115, 101),
        ::capnp::word(65, 100, 100, 114, 101, 115, 115, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(114, 101, 113, 117, 101, 115, 116, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 114, 97, 110, 100, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(98, 117, 115, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 111, 103, 103, 105, 110, 103, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(111, 98, 100, 77, 117, 108, 116, 105),
        ::capnp::word(112, 108, 101, 120, 105, 110, 103, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <crate::cereal::car_capnp::car_params::Ecu as ::capnp::introspect::Introspect>::introspect(),
          1 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
          2 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          3 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          4 => <u32 as ::capnp::introspect::Introspect>::introspect(),
          5 => <::capnp::data_list::Owned as ::capnp::introspect::Introspect>::introspect(),
          6 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
          7 => <u8 as ::capnp::introspect::Introspect>::introspect(),
          8 => <bool as ::capnp::introspect::Introspect>::introspect(),
          9 => <bool as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[2,6,7,0,1,8,9,5,4,3];
      pub const TYPE_ID: u64 = 0x962b_5618_0c93_59ce;
    }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum Ecu {
    Eps = 0,
    Abs = 1,
    FwdRadar = 2,
    FwdCamera = 3,
    Engine = 4,
    Unknown = 5,
    Dsu = 6,
    ParkingAdas = 7,
    Transmission = 8,
    Srs = 9,
    Gateway = 10,
    Hud = 11,
    CombinationMeter = 12,
    Vsa = 13,
    ProgrammedFuelInjection = 14,
    ElectricBrakeBooster = 15,
    ShiftByWire = 16,
    Debug = 17,
    Hybrid = 18,
    Adas = 19,
    Hvac = 20,
    CornerRadar = 21,
    Epb = 22,
    Telematics = 23,
    Body = 24,
  }

  impl ::capnp::introspect::Introspect for Ecu {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &ecu::ENCODED_NODE, annotation_types: ecu::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<Ecu> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: Ecu) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &ecu::ENCODED_NODE, annotation_types: ecu::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for Ecu {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <Ecu as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Eps),
        1 => ::core::result::Result::Ok(Self::Abs),
        2 => ::core::result::Result::Ok(Self::FwdRadar),
        3 => ::core::result::Result::Ok(Self::FwdCamera),
        4 => ::core::result::Result::Ok(Self::Engine),
        5 => ::core::result::Result::Ok(Self::Unknown),
        6 => ::core::result::Result::Ok(Self::Dsu),
        7 => ::core::result::Result::Ok(Self::ParkingAdas),
        8 => ::core::result::Result::Ok(Self::Transmission),
        9 => ::core::result::Result::Ok(Self::Srs),
        10 => ::core::result::Result::Ok(Self::Gateway),
        11 => ::core::result::Result::Ok(Self::Hud),
        12 => ::core::result::Result::Ok(Self::CombinationMeter),
        13 => ::core::result::Result::Ok(Self::Vsa),
        14 => ::core::result::Result::Ok(Self::ProgrammedFuelInjection),
        15 => ::core::result::Result::Ok(Self::ElectricBrakeBooster),
        16 => ::core::result::Result::Ok(Self::ShiftByWire),
        17 => ::core::result::Result::Ok(Self::Debug),
        18 => ::core::result::Result::Ok(Self::Hybrid),
        19 => ::core::result::Result::Ok(Self::Adas),
        20 => ::core::result::Result::Ok(Self::Hvac),
        21 => ::core::result::Result::Ok(Self::CornerRadar),
        22 => ::core::result::Result::Ok(Self::Epb),
        23 => ::core::result::Result::Ok(Self::Telematics),
        24 => ::core::result::Result::Ok(Self::Body),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<Ecu> for u16 {
    #[inline]
    fn from(x: Ecu) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for Ecu {
    const TYPE_ID: u64 = 0xf711_9bb7_59d1_d691u64;
  }
  mod ecu {
  pub static ENCODED_NODE: [::capnp::Word; 130] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(145, 214, 209, 89, 183, 155, 17, 247),
    ::capnp::word(20, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 194, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(25, 0, 0, 0, 95, 2, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
    ::capnp::word(97, 109, 115, 46, 69, 99, 117, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(100, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 1, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 1, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 1, 0, 0, 74, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 1, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 1, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 1, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(253, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(245, 0, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(241, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(237, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(229, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(221, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(213, 0, 0, 0, 138, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(22, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(213, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(23, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(205, 0, 0, 0, 194, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(205, 0, 0, 0, 170, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(205, 0, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(24, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(201, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(193, 0, 0, 0, 58, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(185, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(177, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(169, 0, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(165, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(19, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(157, 0, 0, 0, 90, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(20, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(153, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 112, 115, 0, 0, 0, 0, 0),
    ::capnp::word(97, 98, 115, 0, 0, 0, 0, 0),
    ::capnp::word(102, 119, 100, 82, 97, 100, 97, 114),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 119, 100, 67, 97, 109, 101, 114),
    ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 110, 103, 105, 110, 101, 0, 0),
    ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
    ::capnp::word(100, 115, 117, 0, 0, 0, 0, 0),
    ::capnp::word(112, 97, 114, 107, 105, 110, 103, 65),
    ::capnp::word(100, 97, 115, 0, 0, 0, 0, 0),
    ::capnp::word(116, 114, 97, 110, 115, 109, 105, 115),
    ::capnp::word(115, 105, 111, 110, 0, 0, 0, 0),
    ::capnp::word(115, 114, 115, 0, 0, 0, 0, 0),
    ::capnp::word(103, 97, 116, 101, 119, 97, 121, 0),
    ::capnp::word(104, 117, 100, 0, 0, 0, 0, 0),
    ::capnp::word(99, 111, 109, 98, 105, 110, 97, 116),
    ::capnp::word(105, 111, 110, 77, 101, 116, 101, 114),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(118, 115, 97, 0, 0, 0, 0, 0),
    ::capnp::word(112, 114, 111, 103, 114, 97, 109, 109),
    ::capnp::word(101, 100, 70, 117, 101, 108, 73, 110),
    ::capnp::word(106, 101, 99, 116, 105, 111, 110, 0),
    ::capnp::word(101, 108, 101, 99, 116, 114, 105, 99),
    ::capnp::word(66, 114, 97, 107, 101, 66, 111, 111),
    ::capnp::word(115, 116, 101, 114, 0, 0, 0, 0),
    ::capnp::word(115, 104, 105, 102, 116, 66, 121, 87),
    ::capnp::word(105, 114, 101, 0, 0, 0, 0, 0),
    ::capnp::word(100, 101, 98, 117, 103, 0, 0, 0),
    ::capnp::word(104, 121, 98, 114, 105, 100, 0, 0),
    ::capnp::word(97, 100, 97, 115, 0, 0, 0, 0),
    ::capnp::word(104, 118, 97, 99, 0, 0, 0, 0),
    ::capnp::word(99, 111, 114, 110, 101, 114, 82, 97),
    ::capnp::word(100, 97, 114, 0, 0, 0, 0, 0),
    ::capnp::word(101, 112, 98, 0, 0, 0, 0, 0),
    ::capnp::word(116, 101, 108, 101, 109, 97, 116, 105),
    ::capnp::word(99, 115, 0, 0, 0, 0, 0, 0),
    ::capnp::word(98, 111, 100, 121, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum FingerprintSource {
    Can = 0,
    Fw = 1,
    Fixed = 2,
  }

  impl ::capnp::introspect::Introspect for FingerprintSource {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &fingerprint_source::ENCODED_NODE, annotation_types: fingerprint_source::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<FingerprintSource> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: FingerprintSource) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &fingerprint_source::ENCODED_NODE, annotation_types: fingerprint_source::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for FingerprintSource {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <FingerprintSource as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::Can),
        1 => ::core::result::Result::Ok(Self::Fw),
        2 => ::core::result::Result::Ok(Self::Fixed),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<FingerprintSource> for u16 {
    #[inline]
    fn from(x: FingerprintSource) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for FingerprintSource {
    const TYPE_ID: u64 = 0x9fd9_5523_d8dc_40ceu64;
  }
  mod fingerprint_source {
  pub static ENCODED_NODE: [::capnp::Word; 31] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(206, 64, 220, 216, 35, 85, 217, 159),
    ::capnp::word(20, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 50, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 79, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
    ::capnp::word(97, 109, 115, 46, 70, 105, 110, 103),
    ::capnp::word(101, 114, 112, 114, 105, 110, 116, 83),
    ::capnp::word(111, 117, 114, 99, 101, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(12, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(29, 0, 0, 0, 34, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 26, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 50, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 110, 0, 0, 0, 0, 0),
    ::capnp::word(102, 119, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 105, 120, 101, 100, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum NetworkLocation {
    FwdCamera = 0,
    Gateway = 1,
  }

  impl ::capnp::introspect::Introspect for NetworkLocation {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &network_location::ENCODED_NODE, annotation_types: network_location::get_annotation_types }).into() }
  }
  impl <'a> ::core::convert::From<NetworkLocation> for ::capnp::dynamic_value::Reader<'a> {
    fn from(e: NetworkLocation) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &network_location::ENCODED_NODE, annotation_types: network_location::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for NetworkLocation {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <NetworkLocation as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::FwdCamera),
        1 => ::core::result::Result::Ok(Self::Gateway),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<NetworkLocation> for u16 {
    #[inline]
    fn from(x: NetworkLocation) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for NetworkLocation {
    const TYPE_ID: u64 = 0xff99_e368_2a83_3c51u64;
  }
  mod network_location {
  pub static ENCODED_NODE: [::capnp::Word; 28] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(81, 60, 131, 42, 104, 227, 153, 255),
    ::capnp::word(20, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 34, 1, 0, 0),
    ::capnp::word(37, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(33, 0, 0, 0, 55, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
    ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
    ::capnp::word(97, 109, 115, 46, 78, 101, 116, 119),
    ::capnp::word(111, 114, 107, 76, 111, 99, 97, 116),
    ::capnp::word(105, 111, 110, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(8, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(17, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 66, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(102, 119, 100, 67, 97, 109, 101, 114),
    ::capnp::word(97, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(103, 97, 116, 101, 119, 97, 121, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }

  pub mod lateral_tuning {
    pub use self::Which::{Pid,IndiDEPRECATED,LqrDEPRECATED,Torque};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
    impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
    impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
    impl <'a,> ::core::clone::Clone for Reader<'a,>  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader,  }
      }
    }

    impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
      fn from(reader: Reader<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn has_pid(&self) -> bool {
        if self.reader.get_data_field::<u16>(7) != 0 { return false; }
        !self.reader.get_pointer_field(9).is_null()
      }
      #[inline]
      pub fn has_indi_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        if self.reader.get_data_field::<u16>(7) != 1 { return false; }
        !self.reader.get_pointer_field(9).is_null()
      }
      #[inline]
      pub fn has_lqr_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        if self.reader.get_data_field::<u16>(7) != 2 { return false; }
        !self.reader.get_pointer_field(9).is_null()
      }
      #[inline]
      pub fn has_torque(&self) -> bool {
        if self.reader.get_data_field::<u16>(7) != 3 { return false; }
        !self.reader.get_pointer_field(9).is_null()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(7) {
          0 => {
            ::core::result::Result::Ok(Pid(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
            ))
          }
          1 => {
            ::core::result::Result::Ok(IndiDEPRECATED(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
            ))
          }
          2 => {
            ::core::result::Result::Ok(LqrDEPRECATED(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
            ))
          }
          3 => {
            ::core::result::Result::Ok(Torque(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(9), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 17, pointers: 14 };
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder,  }
      }
    }

    impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
      fn from(builder: Builder<'a,>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { builder: self.builder.reborrow() }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_pid(&mut self, value: crate::cereal::car_capnp::car_params::lateral_p_i_d_tuning::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(7, 0);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false)
      }
      #[inline]
      pub fn init_pid(self, ) -> crate::cereal::car_capnp::car_params::lateral_p_i_d_tuning::Builder<'a> {
        self.builder.set_data_field::<u16>(7, 0);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(9), 0)
      }
      #[inline]
      pub fn has_pid(&self) -> bool {
        if self.builder.get_data_field::<u16>(7) != 0 { return false; }
        !self.builder.is_pointer_field_null(9)
      }
      #[inline]
      pub fn set_indi_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::car_capnp::car_params::lateral_i_n_d_i_tuning::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(7, 1);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false)
      }
      #[inline]
      pub fn init_indi_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::car_capnp::car_params::lateral_i_n_d_i_tuning::Builder<'a> {
        self.builder.set_data_field::<u16>(7, 1);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(9), 0)
      }
      #[inline]
      pub fn has_indi_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        if self.builder.get_data_field::<u16>(7) != 1 { return false; }
        !self.builder.is_pointer_field_null(9)
      }
      #[inline]
      pub fn set_lqr_d_e_p_r_e_c_a_t_e_d(&mut self, value: crate::cereal::car_capnp::car_params::lateral_l_q_r_tuning::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(7, 2);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false)
      }
      #[inline]
      pub fn init_lqr_d_e_p_r_e_c_a_t_e_d(self, ) -> crate::cereal::car_capnp::car_params::lateral_l_q_r_tuning::Builder<'a> {
        self.builder.set_data_field::<u16>(7, 2);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(9), 0)
      }
      #[inline]
      pub fn has_lqr_d_e_p_r_e_c_a_t_e_d(&self) -> bool {
        if self.builder.get_data_field::<u16>(7) != 2 { return false; }
        !self.builder.is_pointer_field_null(9)
      }
      #[inline]
      pub fn set_torque(&mut self, value: crate::cereal::car_capnp::car_params::lateral_torque_tuning::Reader<'_>) -> ::capnp::Result<()> {
        self.builder.set_data_field::<u16>(7, 3);
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(9), value, false)
      }
      #[inline]
      pub fn init_torque(self, ) -> crate::cereal::car_capnp::car_params::lateral_torque_tuning::Builder<'a> {
        self.builder.set_data_field::<u16>(7, 3);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(9), 0)
      }
      #[inline]
      pub fn has_torque(&self) -> bool {
        if self.builder.get_data_field::<u16>(7) != 3 { return false; }
        !self.builder.is_pointer_field_null(9)
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(7) {
          0 => {
            ::core::result::Result::Ok(Pid(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
            ))
          }
          1 => {
            ::core::result::Result::Ok(IndiDEPRECATED(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
            ))
          }
          2 => {
            ::core::result::Result::Ok(LqrDEPRECATED(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
            ))
          }
          3 => {
            ::core::result::Result::Ok(Torque(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(9), ::core::option::Option::None)
            ))
          }
          x => ::core::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 80] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(104, 149, 51, 53, 10, 88, 252, 147),
        ::capnp::word(20, 0, 0, 0, 1, 0, 17, 0),
        ::capnp::word(218, 169, 170, 144, 36, 55, 105, 140),
        ::capnp::word(14, 0, 7, 0, 1, 0, 4, 0),
        ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 18, 1, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 231, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(99, 97, 114, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 67, 97, 114, 80, 97, 114),
        ::capnp::word(97, 109, 115, 46, 108, 97, 116, 101),
        ::capnp::word(114, 97, 108, 84, 117, 110, 105, 110),
        ::capnp::word(103, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 255, 255, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 26, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(97, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(92, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(104, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 254, 255, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 27, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(101, 0, 0, 0, 122, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(100, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(112, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(2, 0, 253, 255, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 40, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(109, 0, 0, 0, 114, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(120, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(3, 0, 252, 255, 9, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 67, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(117, 0, 0, 0, 58, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(112, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(124, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(112, 105, 100, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(46, 76, 209, 203, 63, 114, 34, 150),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(105, 110, 100, 105, 68, 69, 80, 82),
        ::capnp::word(69, 67, 65, 84, 69, 68, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(179, 51, 85, 4, 46, 71, 52, 163),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(108, 113, 114, 68, 69, 80, 82, 69),
        ::capnp::word(67, 65, 84, 69, 68, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(18, 106, 97, 40, 63, 30, 21, 157),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(116, 111, 114, 113, 117, 101, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(29, 204, 78, 128, 14, 110, 54, 128),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
        match index {
          0 => <crate::cereal::car_capnp::car_params::lateral_p_i_d_tuning::Owned as ::capnp::introspect::Introspect>::introspect(),
          1 => <crate::cereal::car_capnp::car_params::lateral_i_n_d_i_tuning::Owned as ::capnp::introspect::Introspect>::introspect(),
          2 => <crate::cereal::car_capnp::car_params::lateral_l_q_r_tuning::Owned as ::capnp::introspect::Introspect>::introspect(),
          3 => <crate::cereal::car_capnp::car_params::lateral_torque_tuning::Owned as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[0,1,2,3];
      pub static MEMBERS_BY_NAME : &[u16] = &[1,2,0,3];
      pub const TYPE_ID: u64 = 0x93fc_580a_3533_9568;
    }
    pub enum Which<A0,A1,A2,A3> {
      Pid(A0),
      IndiDEPRECATED(A1),
      LqrDEPRECATED(A2),
      Torque(A3),
    }
    pub type WhichReader<'a,> = Which<::capnp::Result<crate::cereal::car_capnp::car_params::lateral_p_i_d_tuning::Reader<'a>>,::capnp::Result<crate::cereal::car_capnp::car_params::lateral_i_n_d_i_tuning::Reader<'a>>,::capnp::Result<crate::cereal::car_capnp::car_params::lateral_l_q_r_tuning::Reader<'a>>,::capnp::Result<crate::cereal::car_capnp::car_params::lateral_torque_tuning::Reader<'a>>>;
    pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::cereal::car_capnp::car_params::lateral_p_i_d_tuning::Builder<'a>>,::capnp::Result<crate::cereal::car_capnp::car_params::lateral_i_n_d_i_tuning::Builder<'a>>,::capnp::Result<crate::cereal::car_capnp::car_params::lateral_l_q_r_tuning::Builder<'a>>,::capnp::Result<crate::cereal::car_capnp::car_params::lateral_torque_tuning::Builder<'a>>>;
  }
}
